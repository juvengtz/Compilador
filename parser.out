Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MEDIA
    MODA
    PLOTXY
    REG
    VARIANZA

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars func bloque
Rule 2     vars -> VAR tipo addvar COLON id_list SEMICOLON
Rule 3     vars -> empty
Rule 4     id_list -> id_list COMMA ID addvar array
Rule 5     id_list -> ID array
Rule 6     array -> L_BRACKET CTE_I R_BRACKET
Rule 7     array -> empty
Rule 8     tipo -> INT current_type
Rule 9     tipo -> FLOAT current_type
Rule 10    tipo -> CHAR current_type
Rule 11    func -> FUNCTION tipo_func ID addfunc L_PAREN parms R_PAREN vars bloque
Rule 12    tipo_func -> INT current_type
Rule 13    tipo_func -> FLOAT current_type
Rule 14    tipo_func -> CHAR current_type
Rule 15    tipo_func -> VOID current_type
Rule 16    parms -> tipo ID addvar id_list
Rule 17    parms -> empty
Rule 18    bloque -> L_BRACE estatuto_rep R_BRACE
Rule 19    estatuto_rep -> estatuto_rep estatuto
Rule 20    estatuto_rep -> estatuto
Rule 21    estatuto -> asignacion
Rule 22    estatuto -> condicion
Rule 23    estatuto -> escritura
Rule 24    estatuto -> llamada
Rule 25    estatuto -> retorno
Rule 26    estatuto -> lectura
Rule 27    estatuto -> repeticion
Rule 28    asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON
Rule 29    llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON
Rule 30    exp_rep -> exp_rep COMMA expresion
Rule 31    exp_rep -> expresion
Rule 32    retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON
Rule 33    lectura -> READ L_PAREN id_list R_PAREN SEMICOLON
Rule 34    escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
Rule 35    escritura_rep -> escritura_rep COMMA escritura_aux
Rule 36    escritura_rep -> escritura_aux
Rule 37    escritura_aux -> CTE_S
Rule 38    escritura_aux -> expresion
Rule 39    condicion -> IF L_PAREN expresion R_PAREN bloque else_aux
Rule 40    else_aux -> ELSE bloque
Rule 41    else_aux -> empty
Rule 42    repeticion -> WHILE L_PAREN expresion R_PAREN bloque
Rule 43    repeticion -> FOR ID EQUAL expresion TO expresion DO bloque
Rule 44    expresion -> exp
Rule 45    expresion -> exp checkrelop relop exp
Rule 46    relop -> GT stack_operator
Rule 47    relop -> LT stack_operator
Rule 48    relop -> EQ stack_operator
Rule 49    relop -> LEQ stack_operator
Rule 50    relop -> GEQ stack_operator
Rule 51    exp -> termino
Rule 52    exp -> termino checkexp masmenos termino
Rule 53    masmenos -> PLUS stack_operator
Rule 54    masmenos -> MINUS stack_operator
Rule 55    termino -> factor
Rule 56    termino -> factor checkterm multdiv factor
Rule 57    multdiv -> MULT stack_operator
Rule 58    multdiv -> DIV stack_operator
Rule 59    factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis
Rule 60    factor -> masmenos var_cte
Rule 61    factor -> var_cte
Rule 62    var_cte -> ID stack_operand_id
Rule 63    var_cte -> CTE_I stack_operand_int
Rule 64    var_cte -> CTE_F stack_operand_float
Rule 65    var_cte -> CTE_CHAR stack_operand_char
Rule 66    empty -> <empty>
Rule 67    create_dirfunc -> <empty>
Rule 68    current_type -> <empty>
Rule 69    addvar -> <empty>
Rule 70    addfunc -> <empty>
Rule 71    stack_operand_id -> <empty>
Rule 72    stack_operand_int -> <empty>
Rule 73    stack_operand_float -> <empty>
Rule 74    stack_operand_char -> <empty>
Rule 75    stack_operator -> <empty>
Rule 76    fakebottom -> <empty>
Rule 77    checkparentesis -> <empty>
Rule 78    checkterm -> <empty>
Rule 79    checkexp -> <empty>
Rule 80    checkrelop -> <empty>
Rule 81    np_llamada -> <empty>
Rule 82    np_asignacion -> <empty>
Rule 83    return -> <empty>
Rule 84    GotoF -> <empty>
Rule 85    Goto -> <empty>
Rule 86    endProc -> <empty>

Terminals, with rules where they appear

CHAR                 : 10 14
COLON                : 2
COMMA                : 4 30 35
CTE_CHAR             : 65
CTE_F                : 64
CTE_I                : 6 63
CTE_S                : 37
DIV                  : 58
DO                   : 43
ELSE                 : 40
EQ                   : 48
EQUAL                : 28 43
FLOAT                : 9 13
FOR                  : 43
FUNCTION             : 11
GEQ                  : 50
GT                   : 46
ID                   : 1 4 5 11 16 28 29 43 62
IF                   : 39
INT                  : 8 12
LEQ                  : 49
LT                   : 47
L_BRACE              : 18
L_BRACKET            : 6
L_PAREN              : 11 29 32 33 34 39 42 59
MEDIA                : 
MINUS                : 54
MODA                 : 
MULT                 : 57
PLOTXY               : 
PLUS                 : 53
PROGRAM              : 1
READ                 : 33
REG                  : 
RETURN               : 32
R_BRACE              : 18
R_BRACKET            : 6
R_PAREN              : 11 29 32 33 34 39 42 59
SEMICOLON            : 1 2 28 29 32 33 34
TO                   : 43
VAR                  : 2
VARIANZA             : 
VOID                 : 15
WHILE                : 42
WRITE                : 34
error                : 

Nonterminals, with rules where they appear

Goto                 : 
GotoF                : 
PROGRAMA             : 0
addfunc              : 11
addvar               : 2 4 16
array                : 4 5 28
asignacion           : 21
bloque               : 1 11 39 40 42 43
checkexp             : 52
checkparentesis      : 59
checkrelop           : 45
checkterm            : 56
condicion            : 22
create_dirfunc       : 1
current_type         : 8 9 10 12 13 14 15
else_aux             : 39
empty                : 3 7 17 41
endProc              : 
escritura            : 23
escritura_aux        : 35 36
escritura_rep        : 34 35
estatuto             : 19 20
estatuto_rep         : 18 19
exp                  : 44 45 45
exp_rep              : 29 30
expresion            : 28 30 31 32 38 39 42 43 43 59
factor               : 55 56 56
fakebottom           : 59
func                 : 1
id_list              : 2 4 16 33
lectura              : 26
llamada              : 24
masmenos             : 52 60
multdiv              : 56
np_asignacion        : 28
np_llamada           : 29
parms                : 11
relop                : 45
repeticion           : 27
retorno              : 25
return               : 32
stack_operand_char   : 65
stack_operand_float  : 64
stack_operand_id     : 28 62
stack_operand_int    : 63
stack_operator       : 28 46 47 48 49 50 53 54 57 58
termino              : 51 52 52
tipo                 : 2 16
tipo_func            : 11
var_cte              : 60 61
vars                 : 1 11

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . PROGRAM create_dirfunc ID SEMICOLON vars func bloque

    PROGRAM         shift and go to state 2

    PROGRAMA                       shift and go to state 1

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> PROGRAM . create_dirfunc ID SEMICOLON vars func bloque
    (67) create_dirfunc -> .

    ID              reduce using rule 67 (create_dirfunc -> .)

    create_dirfunc                 shift and go to state 3

state 3

    (1) PROGRAMA -> PROGRAM create_dirfunc . ID SEMICOLON vars func bloque

    ID              shift and go to state 4


state 4

    (1) PROGRAMA -> PROGRAM create_dirfunc ID . SEMICOLON vars func bloque

    SEMICOLON       shift and go to state 5


state 5

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON . vars func bloque
    (2) vars -> . VAR tipo addvar COLON id_list SEMICOLON
    (3) vars -> . empty
    (66) empty -> .

    VAR             shift and go to state 7
    FUNCTION        reduce using rule 66 (empty -> .)

    vars                           shift and go to state 6
    empty                          shift and go to state 8

state 6

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars . func bloque
    (11) func -> . FUNCTION tipo_func ID addfunc L_PAREN parms R_PAREN vars bloque

    FUNCTION        shift and go to state 10

    func                           shift and go to state 9

state 7

    (2) vars -> VAR . tipo addvar COLON id_list SEMICOLON
    (8) tipo -> . INT current_type
    (9) tipo -> . FLOAT current_type
    (10) tipo -> . CHAR current_type

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 14

    tipo                           shift and go to state 11

state 8

    (3) vars -> empty .

    FUNCTION        reduce using rule 3 (vars -> empty .)
    L_BRACE         reduce using rule 3 (vars -> empty .)


state 9

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars func . bloque
    (18) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 16

    bloque                         shift and go to state 15

state 10

    (11) func -> FUNCTION . tipo_func ID addfunc L_PAREN parms R_PAREN vars bloque
    (12) tipo_func -> . INT current_type
    (13) tipo_func -> . FLOAT current_type
    (14) tipo_func -> . CHAR current_type
    (15) tipo_func -> . VOID current_type

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    VOID            shift and go to state 21

    tipo_func                      shift and go to state 17

state 11

    (2) vars -> VAR tipo . addvar COLON id_list SEMICOLON
    (69) addvar -> .

    COLON           reduce using rule 69 (addvar -> .)

    addvar                         shift and go to state 22

state 12

    (8) tipo -> INT . current_type
    (68) current_type -> .

    COLON           reduce using rule 68 (current_type -> .)
    ID              reduce using rule 68 (current_type -> .)

    current_type                   shift and go to state 23

state 13

    (9) tipo -> FLOAT . current_type
    (68) current_type -> .

    COLON           reduce using rule 68 (current_type -> .)
    ID              reduce using rule 68 (current_type -> .)

    current_type                   shift and go to state 24

state 14

    (10) tipo -> CHAR . current_type
    (68) current_type -> .

    COLON           reduce using rule 68 (current_type -> .)
    ID              reduce using rule 68 (current_type -> .)

    current_type                   shift and go to state 25

state 15

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars func bloque .

    $end            reduce using rule 1 (PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars func bloque .)


state 16

    (18) bloque -> L_BRACE . estatuto_rep R_BRACE
    (19) estatuto_rep -> . estatuto_rep estatuto
    (20) estatuto_rep -> . estatuto
    (21) estatuto -> . asignacion
    (22) estatuto -> . condicion
    (23) estatuto -> . escritura
    (24) estatuto -> . llamada
    (25) estatuto -> . retorno
    (26) estatuto -> . lectura
    (27) estatuto -> . repeticion
    (28) asignacion -> . ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON
    (39) condicion -> . IF L_PAREN expresion R_PAREN bloque else_aux
    (34) escritura -> . WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
    (29) llamada -> . ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON
    (32) retorno -> . RETURN L_PAREN expresion R_PAREN return SEMICOLON
    (33) lectura -> . READ L_PAREN id_list R_PAREN SEMICOLON
    (42) repeticion -> . WHILE L_PAREN expresion R_PAREN bloque
    (43) repeticion -> . FOR ID EQUAL expresion TO expresion DO bloque

    ID              shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    RETURN          shift and go to state 38
    READ            shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41

    estatuto_rep                   shift and go to state 26
    estatuto                       shift and go to state 27
    asignacion                     shift and go to state 28
    condicion                      shift and go to state 29
    escritura                      shift and go to state 30
    llamada                        shift and go to state 31
    retorno                        shift and go to state 32
    lectura                        shift and go to state 33
    repeticion                     shift and go to state 34

state 17

    (11) func -> FUNCTION tipo_func . ID addfunc L_PAREN parms R_PAREN vars bloque

    ID              shift and go to state 42


state 18

    (12) tipo_func -> INT . current_type
    (68) current_type -> .

    ID              reduce using rule 68 (current_type -> .)

    current_type                   shift and go to state 43

state 19

    (13) tipo_func -> FLOAT . current_type
    (68) current_type -> .

    ID              reduce using rule 68 (current_type -> .)

    current_type                   shift and go to state 44

state 20

    (14) tipo_func -> CHAR . current_type
    (68) current_type -> .

    ID              reduce using rule 68 (current_type -> .)

    current_type                   shift and go to state 45

state 21

    (15) tipo_func -> VOID . current_type
    (68) current_type -> .

    ID              reduce using rule 68 (current_type -> .)

    current_type                   shift and go to state 46

state 22

    (2) vars -> VAR tipo addvar . COLON id_list SEMICOLON

    COLON           shift and go to state 47


state 23

    (8) tipo -> INT current_type .

    COLON           reduce using rule 8 (tipo -> INT current_type .)
    ID              reduce using rule 8 (tipo -> INT current_type .)


state 24

    (9) tipo -> FLOAT current_type .

    COLON           reduce using rule 9 (tipo -> FLOAT current_type .)
    ID              reduce using rule 9 (tipo -> FLOAT current_type .)


state 25

    (10) tipo -> CHAR current_type .

    COLON           reduce using rule 10 (tipo -> CHAR current_type .)
    ID              reduce using rule 10 (tipo -> CHAR current_type .)


state 26

    (18) bloque -> L_BRACE estatuto_rep . R_BRACE
    (19) estatuto_rep -> estatuto_rep . estatuto
    (21) estatuto -> . asignacion
    (22) estatuto -> . condicion
    (23) estatuto -> . escritura
    (24) estatuto -> . llamada
    (25) estatuto -> . retorno
    (26) estatuto -> . lectura
    (27) estatuto -> . repeticion
    (28) asignacion -> . ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON
    (39) condicion -> . IF L_PAREN expresion R_PAREN bloque else_aux
    (34) escritura -> . WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
    (29) llamada -> . ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON
    (32) retorno -> . RETURN L_PAREN expresion R_PAREN return SEMICOLON
    (33) lectura -> . READ L_PAREN id_list R_PAREN SEMICOLON
    (42) repeticion -> . WHILE L_PAREN expresion R_PAREN bloque
    (43) repeticion -> . FOR ID EQUAL expresion TO expresion DO bloque

    R_BRACE         shift and go to state 48
    ID              shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    RETURN          shift and go to state 38
    READ            shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41

    estatuto                       shift and go to state 49
    asignacion                     shift and go to state 28
    condicion                      shift and go to state 29
    escritura                      shift and go to state 30
    llamada                        shift and go to state 31
    retorno                        shift and go to state 32
    lectura                        shift and go to state 33
    repeticion                     shift and go to state 34

state 27

    (20) estatuto_rep -> estatuto .

    R_BRACE         reduce using rule 20 (estatuto_rep -> estatuto .)
    ID              reduce using rule 20 (estatuto_rep -> estatuto .)
    IF              reduce using rule 20 (estatuto_rep -> estatuto .)
    WRITE           reduce using rule 20 (estatuto_rep -> estatuto .)
    RETURN          reduce using rule 20 (estatuto_rep -> estatuto .)
    READ            reduce using rule 20 (estatuto_rep -> estatuto .)
    WHILE           reduce using rule 20 (estatuto_rep -> estatuto .)
    FOR             reduce using rule 20 (estatuto_rep -> estatuto .)


state 28

    (21) estatuto -> asignacion .

    R_BRACE         reduce using rule 21 (estatuto -> asignacion .)
    ID              reduce using rule 21 (estatuto -> asignacion .)
    IF              reduce using rule 21 (estatuto -> asignacion .)
    WRITE           reduce using rule 21 (estatuto -> asignacion .)
    RETURN          reduce using rule 21 (estatuto -> asignacion .)
    READ            reduce using rule 21 (estatuto -> asignacion .)
    WHILE           reduce using rule 21 (estatuto -> asignacion .)
    FOR             reduce using rule 21 (estatuto -> asignacion .)


state 29

    (22) estatuto -> condicion .

    R_BRACE         reduce using rule 22 (estatuto -> condicion .)
    ID              reduce using rule 22 (estatuto -> condicion .)
    IF              reduce using rule 22 (estatuto -> condicion .)
    WRITE           reduce using rule 22 (estatuto -> condicion .)
    RETURN          reduce using rule 22 (estatuto -> condicion .)
    READ            reduce using rule 22 (estatuto -> condicion .)
    WHILE           reduce using rule 22 (estatuto -> condicion .)
    FOR             reduce using rule 22 (estatuto -> condicion .)


state 30

    (23) estatuto -> escritura .

    R_BRACE         reduce using rule 23 (estatuto -> escritura .)
    ID              reduce using rule 23 (estatuto -> escritura .)
    IF              reduce using rule 23 (estatuto -> escritura .)
    WRITE           reduce using rule 23 (estatuto -> escritura .)
    RETURN          reduce using rule 23 (estatuto -> escritura .)
    READ            reduce using rule 23 (estatuto -> escritura .)
    WHILE           reduce using rule 23 (estatuto -> escritura .)
    FOR             reduce using rule 23 (estatuto -> escritura .)


state 31

    (24) estatuto -> llamada .

    R_BRACE         reduce using rule 24 (estatuto -> llamada .)
    ID              reduce using rule 24 (estatuto -> llamada .)
    IF              reduce using rule 24 (estatuto -> llamada .)
    WRITE           reduce using rule 24 (estatuto -> llamada .)
    RETURN          reduce using rule 24 (estatuto -> llamada .)
    READ            reduce using rule 24 (estatuto -> llamada .)
    WHILE           reduce using rule 24 (estatuto -> llamada .)
    FOR             reduce using rule 24 (estatuto -> llamada .)


state 32

    (25) estatuto -> retorno .

    R_BRACE         reduce using rule 25 (estatuto -> retorno .)
    ID              reduce using rule 25 (estatuto -> retorno .)
    IF              reduce using rule 25 (estatuto -> retorno .)
    WRITE           reduce using rule 25 (estatuto -> retorno .)
    RETURN          reduce using rule 25 (estatuto -> retorno .)
    READ            reduce using rule 25 (estatuto -> retorno .)
    WHILE           reduce using rule 25 (estatuto -> retorno .)
    FOR             reduce using rule 25 (estatuto -> retorno .)


state 33

    (26) estatuto -> lectura .

    R_BRACE         reduce using rule 26 (estatuto -> lectura .)
    ID              reduce using rule 26 (estatuto -> lectura .)
    IF              reduce using rule 26 (estatuto -> lectura .)
    WRITE           reduce using rule 26 (estatuto -> lectura .)
    RETURN          reduce using rule 26 (estatuto -> lectura .)
    READ            reduce using rule 26 (estatuto -> lectura .)
    WHILE           reduce using rule 26 (estatuto -> lectura .)
    FOR             reduce using rule 26 (estatuto -> lectura .)


state 34

    (27) estatuto -> repeticion .

    R_BRACE         reduce using rule 27 (estatuto -> repeticion .)
    ID              reduce using rule 27 (estatuto -> repeticion .)
    IF              reduce using rule 27 (estatuto -> repeticion .)
    WRITE           reduce using rule 27 (estatuto -> repeticion .)
    RETURN          reduce using rule 27 (estatuto -> repeticion .)
    READ            reduce using rule 27 (estatuto -> repeticion .)
    WHILE           reduce using rule 27 (estatuto -> repeticion .)
    FOR             reduce using rule 27 (estatuto -> repeticion .)


state 35

    (28) asignacion -> ID . stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON
    (29) llamada -> ID . L_PAREN exp_rep R_PAREN np_llamada SEMICOLON
    (71) stack_operand_id -> .

    L_PAREN         shift and go to state 51
    L_BRACKET       reduce using rule 71 (stack_operand_id -> .)
    EQUAL           reduce using rule 71 (stack_operand_id -> .)

    stack_operand_id               shift and go to state 50

state 36

    (39) condicion -> IF . L_PAREN expresion R_PAREN bloque else_aux

    L_PAREN         shift and go to state 52


state 37

    (34) escritura -> WRITE . L_PAREN escritura_rep R_PAREN SEMICOLON

    L_PAREN         shift and go to state 53


state 38

    (32) retorno -> RETURN . L_PAREN expresion R_PAREN return SEMICOLON

    L_PAREN         shift and go to state 54


state 39

    (33) lectura -> READ . L_PAREN id_list R_PAREN SEMICOLON

    L_PAREN         shift and go to state 55


state 40

    (42) repeticion -> WHILE . L_PAREN expresion R_PAREN bloque

    L_PAREN         shift and go to state 56


state 41

    (43) repeticion -> FOR . ID EQUAL expresion TO expresion DO bloque

    ID              shift and go to state 57


state 42

    (11) func -> FUNCTION tipo_func ID . addfunc L_PAREN parms R_PAREN vars bloque
    (70) addfunc -> .

    L_PAREN         reduce using rule 70 (addfunc -> .)

    addfunc                        shift and go to state 58

state 43

    (12) tipo_func -> INT current_type .

    ID              reduce using rule 12 (tipo_func -> INT current_type .)


state 44

    (13) tipo_func -> FLOAT current_type .

    ID              reduce using rule 13 (tipo_func -> FLOAT current_type .)


state 45

    (14) tipo_func -> CHAR current_type .

    ID              reduce using rule 14 (tipo_func -> CHAR current_type .)


state 46

    (15) tipo_func -> VOID current_type .

    ID              reduce using rule 15 (tipo_func -> VOID current_type .)


state 47

    (2) vars -> VAR tipo addvar COLON . id_list SEMICOLON
    (4) id_list -> . id_list COMMA ID addvar array
    (5) id_list -> . ID array

    ID              shift and go to state 60

    id_list                        shift and go to state 59

state 48

    (18) bloque -> L_BRACE estatuto_rep R_BRACE .

    $end            reduce using rule 18 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    ELSE            reduce using rule 18 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    R_BRACE         reduce using rule 18 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    ID              reduce using rule 18 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    IF              reduce using rule 18 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    WRITE           reduce using rule 18 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    RETURN          reduce using rule 18 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    READ            reduce using rule 18 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    WHILE           reduce using rule 18 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    FOR             reduce using rule 18 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    L_BRACE         reduce using rule 18 (bloque -> L_BRACE estatuto_rep R_BRACE .)


state 49

    (19) estatuto_rep -> estatuto_rep estatuto .

    R_BRACE         reduce using rule 19 (estatuto_rep -> estatuto_rep estatuto .)
    ID              reduce using rule 19 (estatuto_rep -> estatuto_rep estatuto .)
    IF              reduce using rule 19 (estatuto_rep -> estatuto_rep estatuto .)
    WRITE           reduce using rule 19 (estatuto_rep -> estatuto_rep estatuto .)
    RETURN          reduce using rule 19 (estatuto_rep -> estatuto_rep estatuto .)
    READ            reduce using rule 19 (estatuto_rep -> estatuto_rep estatuto .)
    WHILE           reduce using rule 19 (estatuto_rep -> estatuto_rep estatuto .)
    FOR             reduce using rule 19 (estatuto_rep -> estatuto_rep estatuto .)


state 50

    (28) asignacion -> ID stack_operand_id . array EQUAL stack_operator expresion np_asignacion SEMICOLON
    (6) array -> . L_BRACKET CTE_I R_BRACKET
    (7) array -> . empty
    (66) empty -> .

    L_BRACKET       shift and go to state 62
    EQUAL           reduce using rule 66 (empty -> .)

    array                          shift and go to state 61
    empty                          shift and go to state 63

state 51

    (29) llamada -> ID L_PAREN . exp_rep R_PAREN np_llamada SEMICOLON
    (30) exp_rep -> . exp_rep COMMA expresion
    (31) exp_rep -> . expresion
    (44) expresion -> . exp
    (45) expresion -> . exp checkrelop relop exp
    (51) exp -> . termino
    (52) exp -> . termino checkexp masmenos termino
    (55) termino -> . factor
    (56) termino -> . factor checkterm multdiv factor
    (59) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (60) factor -> . masmenos var_cte
    (61) factor -> . var_cte
    (53) masmenos -> . PLUS stack_operator
    (54) masmenos -> . MINUS stack_operator
    (62) var_cte -> . ID stack_operand_id
    (63) var_cte -> . CTE_I stack_operand_int
    (64) var_cte -> . CTE_F stack_operand_float
    (65) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 65
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    ID              shift and go to state 64
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    exp_rep                        shift and go to state 66
    expresion                      shift and go to state 67
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    masmenos                       shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72

state 52

    (39) condicion -> IF L_PAREN . expresion R_PAREN bloque else_aux
    (44) expresion -> . exp
    (45) expresion -> . exp checkrelop relop exp
    (51) exp -> . termino
    (52) exp -> . termino checkexp masmenos termino
    (55) termino -> . factor
    (56) termino -> . factor checkterm multdiv factor
    (59) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (60) factor -> . masmenos var_cte
    (61) factor -> . var_cte
    (53) masmenos -> . PLUS stack_operator
    (54) masmenos -> . MINUS stack_operator
    (62) var_cte -> . ID stack_operand_id
    (63) var_cte -> . CTE_I stack_operand_int
    (64) var_cte -> . CTE_F stack_operand_float
    (65) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 65
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    ID              shift and go to state 64
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expresion                      shift and go to state 78
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    masmenos                       shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72

state 53

    (34) escritura -> WRITE L_PAREN . escritura_rep R_PAREN SEMICOLON
    (35) escritura_rep -> . escritura_rep COMMA escritura_aux
    (36) escritura_rep -> . escritura_aux
    (37) escritura_aux -> . CTE_S
    (38) escritura_aux -> . expresion
    (44) expresion -> . exp
    (45) expresion -> . exp checkrelop relop exp
    (51) exp -> . termino
    (52) exp -> . termino checkexp masmenos termino
    (55) termino -> . factor
    (56) termino -> . factor checkterm multdiv factor
    (59) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (60) factor -> . masmenos var_cte
    (61) factor -> . var_cte
    (53) masmenos -> . PLUS stack_operator
    (54) masmenos -> . MINUS stack_operator
    (62) var_cte -> . ID stack_operand_id
    (63) var_cte -> . CTE_I stack_operand_int
    (64) var_cte -> . CTE_F stack_operand_float
    (65) var_cte -> . CTE_CHAR stack_operand_char

    CTE_S           shift and go to state 81
    L_PAREN         shift and go to state 65
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    ID              shift and go to state 64
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    escritura_rep                  shift and go to state 79
    escritura_aux                  shift and go to state 80
    expresion                      shift and go to state 82
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    masmenos                       shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72

state 54

    (32) retorno -> RETURN L_PAREN . expresion R_PAREN return SEMICOLON
    (44) expresion -> . exp
    (45) expresion -> . exp checkrelop relop exp
    (51) exp -> . termino
    (52) exp -> . termino checkexp masmenos termino
    (55) termino -> . factor
    (56) termino -> . factor checkterm multdiv factor
    (59) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (60) factor -> . masmenos var_cte
    (61) factor -> . var_cte
    (53) masmenos -> . PLUS stack_operator
    (54) masmenos -> . MINUS stack_operator
    (62) var_cte -> . ID stack_operand_id
    (63) var_cte -> . CTE_I stack_operand_int
    (64) var_cte -> . CTE_F stack_operand_float
    (65) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 65
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    ID              shift and go to state 64
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expresion                      shift and go to state 83
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    masmenos                       shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72

state 55

    (33) lectura -> READ L_PAREN . id_list R_PAREN SEMICOLON
    (4) id_list -> . id_list COMMA ID addvar array
    (5) id_list -> . ID array

    ID              shift and go to state 60

    id_list                        shift and go to state 84

state 56

    (42) repeticion -> WHILE L_PAREN . expresion R_PAREN bloque
    (44) expresion -> . exp
    (45) expresion -> . exp checkrelop relop exp
    (51) exp -> . termino
    (52) exp -> . termino checkexp masmenos termino
    (55) termino -> . factor
    (56) termino -> . factor checkterm multdiv factor
    (59) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (60) factor -> . masmenos var_cte
    (61) factor -> . var_cte
    (53) masmenos -> . PLUS stack_operator
    (54) masmenos -> . MINUS stack_operator
    (62) var_cte -> . ID stack_operand_id
    (63) var_cte -> . CTE_I stack_operand_int
    (64) var_cte -> . CTE_F stack_operand_float
    (65) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 65
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    ID              shift and go to state 64
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expresion                      shift and go to state 85
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    masmenos                       shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72

state 57

    (43) repeticion -> FOR ID . EQUAL expresion TO expresion DO bloque

    EQUAL           shift and go to state 86


state 58

    (11) func -> FUNCTION tipo_func ID addfunc . L_PAREN parms R_PAREN vars bloque

    L_PAREN         shift and go to state 87


state 59

    (2) vars -> VAR tipo addvar COLON id_list . SEMICOLON
    (4) id_list -> id_list . COMMA ID addvar array

    SEMICOLON       shift and go to state 88
    COMMA           shift and go to state 89


state 60

    (5) id_list -> ID . array
    (6) array -> . L_BRACKET CTE_I R_BRACKET
    (7) array -> . empty
    (66) empty -> .

    L_BRACKET       shift and go to state 62
    SEMICOLON       reduce using rule 66 (empty -> .)
    COMMA           reduce using rule 66 (empty -> .)
    R_PAREN         reduce using rule 66 (empty -> .)

    array                          shift and go to state 90
    empty                          shift and go to state 63

state 61

    (28) asignacion -> ID stack_operand_id array . EQUAL stack_operator expresion np_asignacion SEMICOLON

    EQUAL           shift and go to state 91


state 62

    (6) array -> L_BRACKET . CTE_I R_BRACKET

    CTE_I           shift and go to state 92


state 63

    (7) array -> empty .

    EQUAL           reduce using rule 7 (array -> empty .)
    SEMICOLON       reduce using rule 7 (array -> empty .)
    COMMA           reduce using rule 7 (array -> empty .)
    R_PAREN         reduce using rule 7 (array -> empty .)


state 64

    (62) var_cte -> ID . stack_operand_id
    (71) stack_operand_id -> .

    MULT            reduce using rule 71 (stack_operand_id -> .)
    DIV             reduce using rule 71 (stack_operand_id -> .)
    PLUS            reduce using rule 71 (stack_operand_id -> .)
    MINUS           reduce using rule 71 (stack_operand_id -> .)
    GT              reduce using rule 71 (stack_operand_id -> .)
    LT              reduce using rule 71 (stack_operand_id -> .)
    EQ              reduce using rule 71 (stack_operand_id -> .)
    LEQ             reduce using rule 71 (stack_operand_id -> .)
    GEQ             reduce using rule 71 (stack_operand_id -> .)
    R_PAREN         reduce using rule 71 (stack_operand_id -> .)
    COMMA           reduce using rule 71 (stack_operand_id -> .)
    TO              reduce using rule 71 (stack_operand_id -> .)
    SEMICOLON       reduce using rule 71 (stack_operand_id -> .)
    DO              reduce using rule 71 (stack_operand_id -> .)

    stack_operand_id               shift and go to state 93

state 65

    (59) factor -> L_PAREN . fakebottom expresion R_PAREN checkparentesis
    (76) fakebottom -> .

    L_PAREN         reduce using rule 76 (fakebottom -> .)
    PLUS            reduce using rule 76 (fakebottom -> .)
    MINUS           reduce using rule 76 (fakebottom -> .)
    ID              reduce using rule 76 (fakebottom -> .)
    CTE_I           reduce using rule 76 (fakebottom -> .)
    CTE_F           reduce using rule 76 (fakebottom -> .)
    CTE_CHAR        reduce using rule 76 (fakebottom -> .)

    fakebottom                     shift and go to state 94

state 66

    (29) llamada -> ID L_PAREN exp_rep . R_PAREN np_llamada SEMICOLON
    (30) exp_rep -> exp_rep . COMMA expresion

    R_PAREN         shift and go to state 95
    COMMA           shift and go to state 96


state 67

    (31) exp_rep -> expresion .

    R_PAREN         reduce using rule 31 (exp_rep -> expresion .)
    COMMA           reduce using rule 31 (exp_rep -> expresion .)


state 68

    (44) expresion -> exp .
    (45) expresion -> exp . checkrelop relop exp
    (80) checkrelop -> .

    R_PAREN         reduce using rule 44 (expresion -> exp .)
    COMMA           reduce using rule 44 (expresion -> exp .)
    TO              reduce using rule 44 (expresion -> exp .)
    SEMICOLON       reduce using rule 44 (expresion -> exp .)
    DO              reduce using rule 44 (expresion -> exp .)
    GT              reduce using rule 80 (checkrelop -> .)
    LT              reduce using rule 80 (checkrelop -> .)
    EQ              reduce using rule 80 (checkrelop -> .)
    LEQ             reduce using rule 80 (checkrelop -> .)
    GEQ             reduce using rule 80 (checkrelop -> .)

    checkrelop                     shift and go to state 97

state 69

    (51) exp -> termino .
    (52) exp -> termino . checkexp masmenos termino
    (79) checkexp -> .

    GT              reduce using rule 51 (exp -> termino .)
    LT              reduce using rule 51 (exp -> termino .)
    EQ              reduce using rule 51 (exp -> termino .)
    LEQ             reduce using rule 51 (exp -> termino .)
    GEQ             reduce using rule 51 (exp -> termino .)
    R_PAREN         reduce using rule 51 (exp -> termino .)
    COMMA           reduce using rule 51 (exp -> termino .)
    TO              reduce using rule 51 (exp -> termino .)
    SEMICOLON       reduce using rule 51 (exp -> termino .)
    DO              reduce using rule 51 (exp -> termino .)
    PLUS            reduce using rule 79 (checkexp -> .)
    MINUS           reduce using rule 79 (checkexp -> .)

    checkexp                       shift and go to state 98

state 70

    (60) factor -> masmenos . var_cte
    (62) var_cte -> . ID stack_operand_id
    (63) var_cte -> . CTE_I stack_operand_int
    (64) var_cte -> . CTE_F stack_operand_float
    (65) var_cte -> . CTE_CHAR stack_operand_char

    ID              shift and go to state 64
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    var_cte                        shift and go to state 99

state 71

    (55) termino -> factor .
    (56) termino -> factor . checkterm multdiv factor
    (78) checkterm -> .

    PLUS            reduce using rule 55 (termino -> factor .)
    MINUS           reduce using rule 55 (termino -> factor .)
    GT              reduce using rule 55 (termino -> factor .)
    LT              reduce using rule 55 (termino -> factor .)
    EQ              reduce using rule 55 (termino -> factor .)
    LEQ             reduce using rule 55 (termino -> factor .)
    GEQ             reduce using rule 55 (termino -> factor .)
    R_PAREN         reduce using rule 55 (termino -> factor .)
    COMMA           reduce using rule 55 (termino -> factor .)
    TO              reduce using rule 55 (termino -> factor .)
    SEMICOLON       reduce using rule 55 (termino -> factor .)
    DO              reduce using rule 55 (termino -> factor .)
    MULT            reduce using rule 78 (checkterm -> .)
    DIV             reduce using rule 78 (checkterm -> .)

    checkterm                      shift and go to state 100

state 72

    (61) factor -> var_cte .

    MULT            reduce using rule 61 (factor -> var_cte .)
    DIV             reduce using rule 61 (factor -> var_cte .)
    PLUS            reduce using rule 61 (factor -> var_cte .)
    MINUS           reduce using rule 61 (factor -> var_cte .)
    GT              reduce using rule 61 (factor -> var_cte .)
    LT              reduce using rule 61 (factor -> var_cte .)
    EQ              reduce using rule 61 (factor -> var_cte .)
    LEQ             reduce using rule 61 (factor -> var_cte .)
    GEQ             reduce using rule 61 (factor -> var_cte .)
    R_PAREN         reduce using rule 61 (factor -> var_cte .)
    COMMA           reduce using rule 61 (factor -> var_cte .)
    TO              reduce using rule 61 (factor -> var_cte .)
    SEMICOLON       reduce using rule 61 (factor -> var_cte .)
    DO              reduce using rule 61 (factor -> var_cte .)


state 73

    (53) masmenos -> PLUS . stack_operator
    (75) stack_operator -> .

    ID              reduce using rule 75 (stack_operator -> .)
    CTE_I           reduce using rule 75 (stack_operator -> .)
    CTE_F           reduce using rule 75 (stack_operator -> .)
    CTE_CHAR        reduce using rule 75 (stack_operator -> .)
    L_PAREN         reduce using rule 75 (stack_operator -> .)
    PLUS            reduce using rule 75 (stack_operator -> .)
    MINUS           reduce using rule 75 (stack_operator -> .)

    stack_operator                 shift and go to state 101

state 74

    (54) masmenos -> MINUS . stack_operator
    (75) stack_operator -> .

    ID              reduce using rule 75 (stack_operator -> .)
    CTE_I           reduce using rule 75 (stack_operator -> .)
    CTE_F           reduce using rule 75 (stack_operator -> .)
    CTE_CHAR        reduce using rule 75 (stack_operator -> .)
    L_PAREN         reduce using rule 75 (stack_operator -> .)
    PLUS            reduce using rule 75 (stack_operator -> .)
    MINUS           reduce using rule 75 (stack_operator -> .)

    stack_operator                 shift and go to state 102

state 75

    (63) var_cte -> CTE_I . stack_operand_int
    (72) stack_operand_int -> .

    MULT            reduce using rule 72 (stack_operand_int -> .)
    DIV             reduce using rule 72 (stack_operand_int -> .)
    PLUS            reduce using rule 72 (stack_operand_int -> .)
    MINUS           reduce using rule 72 (stack_operand_int -> .)
    GT              reduce using rule 72 (stack_operand_int -> .)
    LT              reduce using rule 72 (stack_operand_int -> .)
    EQ              reduce using rule 72 (stack_operand_int -> .)
    LEQ             reduce using rule 72 (stack_operand_int -> .)
    GEQ             reduce using rule 72 (stack_operand_int -> .)
    R_PAREN         reduce using rule 72 (stack_operand_int -> .)
    COMMA           reduce using rule 72 (stack_operand_int -> .)
    TO              reduce using rule 72 (stack_operand_int -> .)
    SEMICOLON       reduce using rule 72 (stack_operand_int -> .)
    DO              reduce using rule 72 (stack_operand_int -> .)

    stack_operand_int              shift and go to state 103

state 76

    (64) var_cte -> CTE_F . stack_operand_float
    (73) stack_operand_float -> .

    MULT            reduce using rule 73 (stack_operand_float -> .)
    DIV             reduce using rule 73 (stack_operand_float -> .)
    PLUS            reduce using rule 73 (stack_operand_float -> .)
    MINUS           reduce using rule 73 (stack_operand_float -> .)
    GT              reduce using rule 73 (stack_operand_float -> .)
    LT              reduce using rule 73 (stack_operand_float -> .)
    EQ              reduce using rule 73 (stack_operand_float -> .)
    LEQ             reduce using rule 73 (stack_operand_float -> .)
    GEQ             reduce using rule 73 (stack_operand_float -> .)
    R_PAREN         reduce using rule 73 (stack_operand_float -> .)
    COMMA           reduce using rule 73 (stack_operand_float -> .)
    TO              reduce using rule 73 (stack_operand_float -> .)
    SEMICOLON       reduce using rule 73 (stack_operand_float -> .)
    DO              reduce using rule 73 (stack_operand_float -> .)

    stack_operand_float            shift and go to state 104

state 77

    (65) var_cte -> CTE_CHAR . stack_operand_char
    (74) stack_operand_char -> .

    MULT            reduce using rule 74 (stack_operand_char -> .)
    DIV             reduce using rule 74 (stack_operand_char -> .)
    PLUS            reduce using rule 74 (stack_operand_char -> .)
    MINUS           reduce using rule 74 (stack_operand_char -> .)
    GT              reduce using rule 74 (stack_operand_char -> .)
    LT              reduce using rule 74 (stack_operand_char -> .)
    EQ              reduce using rule 74 (stack_operand_char -> .)
    LEQ             reduce using rule 74 (stack_operand_char -> .)
    GEQ             reduce using rule 74 (stack_operand_char -> .)
    R_PAREN         reduce using rule 74 (stack_operand_char -> .)
    COMMA           reduce using rule 74 (stack_operand_char -> .)
    TO              reduce using rule 74 (stack_operand_char -> .)
    SEMICOLON       reduce using rule 74 (stack_operand_char -> .)
    DO              reduce using rule 74 (stack_operand_char -> .)

    stack_operand_char             shift and go to state 105

state 78

    (39) condicion -> IF L_PAREN expresion . R_PAREN bloque else_aux

    R_PAREN         shift and go to state 106


state 79

    (34) escritura -> WRITE L_PAREN escritura_rep . R_PAREN SEMICOLON
    (35) escritura_rep -> escritura_rep . COMMA escritura_aux

    R_PAREN         shift and go to state 107
    COMMA           shift and go to state 108


state 80

    (36) escritura_rep -> escritura_aux .

    R_PAREN         reduce using rule 36 (escritura_rep -> escritura_aux .)
    COMMA           reduce using rule 36 (escritura_rep -> escritura_aux .)


state 81

    (37) escritura_aux -> CTE_S .

    R_PAREN         reduce using rule 37 (escritura_aux -> CTE_S .)
    COMMA           reduce using rule 37 (escritura_aux -> CTE_S .)


state 82

    (38) escritura_aux -> expresion .

    R_PAREN         reduce using rule 38 (escritura_aux -> expresion .)
    COMMA           reduce using rule 38 (escritura_aux -> expresion .)


state 83

    (32) retorno -> RETURN L_PAREN expresion . R_PAREN return SEMICOLON

    R_PAREN         shift and go to state 109


state 84

    (33) lectura -> READ L_PAREN id_list . R_PAREN SEMICOLON
    (4) id_list -> id_list . COMMA ID addvar array

    R_PAREN         shift and go to state 110
    COMMA           shift and go to state 89


state 85

    (42) repeticion -> WHILE L_PAREN expresion . R_PAREN bloque

    R_PAREN         shift and go to state 111


state 86

    (43) repeticion -> FOR ID EQUAL . expresion TO expresion DO bloque
    (44) expresion -> . exp
    (45) expresion -> . exp checkrelop relop exp
    (51) exp -> . termino
    (52) exp -> . termino checkexp masmenos termino
    (55) termino -> . factor
    (56) termino -> . factor checkterm multdiv factor
    (59) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (60) factor -> . masmenos var_cte
    (61) factor -> . var_cte
    (53) masmenos -> . PLUS stack_operator
    (54) masmenos -> . MINUS stack_operator
    (62) var_cte -> . ID stack_operand_id
    (63) var_cte -> . CTE_I stack_operand_int
    (64) var_cte -> . CTE_F stack_operand_float
    (65) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 65
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    ID              shift and go to state 64
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expresion                      shift and go to state 112
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    masmenos                       shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72

state 87

    (11) func -> FUNCTION tipo_func ID addfunc L_PAREN . parms R_PAREN vars bloque
    (16) parms -> . tipo ID addvar id_list
    (17) parms -> . empty
    (8) tipo -> . INT current_type
    (9) tipo -> . FLOAT current_type
    (10) tipo -> . CHAR current_type
    (66) empty -> .

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 14
    R_PAREN         reduce using rule 66 (empty -> .)

    parms                          shift and go to state 113
    tipo                           shift and go to state 114
    empty                          shift and go to state 115

state 88

    (2) vars -> VAR tipo addvar COLON id_list SEMICOLON .

    FUNCTION        reduce using rule 2 (vars -> VAR tipo addvar COLON id_list SEMICOLON .)
    L_BRACE         reduce using rule 2 (vars -> VAR tipo addvar COLON id_list SEMICOLON .)


state 89

    (4) id_list -> id_list COMMA . ID addvar array

    ID              shift and go to state 116


state 90

    (5) id_list -> ID array .

    SEMICOLON       reduce using rule 5 (id_list -> ID array .)
    COMMA           reduce using rule 5 (id_list -> ID array .)
    R_PAREN         reduce using rule 5 (id_list -> ID array .)


state 91

    (28) asignacion -> ID stack_operand_id array EQUAL . stack_operator expresion np_asignacion SEMICOLON
    (75) stack_operator -> .

    L_PAREN         reduce using rule 75 (stack_operator -> .)
    PLUS            reduce using rule 75 (stack_operator -> .)
    MINUS           reduce using rule 75 (stack_operator -> .)
    ID              reduce using rule 75 (stack_operator -> .)
    CTE_I           reduce using rule 75 (stack_operator -> .)
    CTE_F           reduce using rule 75 (stack_operator -> .)
    CTE_CHAR        reduce using rule 75 (stack_operator -> .)

    stack_operator                 shift and go to state 117

state 92

    (6) array -> L_BRACKET CTE_I . R_BRACKET

    R_BRACKET       shift and go to state 118


state 93

    (62) var_cte -> ID stack_operand_id .

    MULT            reduce using rule 62 (var_cte -> ID stack_operand_id .)
    DIV             reduce using rule 62 (var_cte -> ID stack_operand_id .)
    PLUS            reduce using rule 62 (var_cte -> ID stack_operand_id .)
    MINUS           reduce using rule 62 (var_cte -> ID stack_operand_id .)
    GT              reduce using rule 62 (var_cte -> ID stack_operand_id .)
    LT              reduce using rule 62 (var_cte -> ID stack_operand_id .)
    EQ              reduce using rule 62 (var_cte -> ID stack_operand_id .)
    LEQ             reduce using rule 62 (var_cte -> ID stack_operand_id .)
    GEQ             reduce using rule 62 (var_cte -> ID stack_operand_id .)
    R_PAREN         reduce using rule 62 (var_cte -> ID stack_operand_id .)
    COMMA           reduce using rule 62 (var_cte -> ID stack_operand_id .)
    TO              reduce using rule 62 (var_cte -> ID stack_operand_id .)
    SEMICOLON       reduce using rule 62 (var_cte -> ID stack_operand_id .)
    DO              reduce using rule 62 (var_cte -> ID stack_operand_id .)


state 94

    (59) factor -> L_PAREN fakebottom . expresion R_PAREN checkparentesis
    (44) expresion -> . exp
    (45) expresion -> . exp checkrelop relop exp
    (51) exp -> . termino
    (52) exp -> . termino checkexp masmenos termino
    (55) termino -> . factor
    (56) termino -> . factor checkterm multdiv factor
    (59) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (60) factor -> . masmenos var_cte
    (61) factor -> . var_cte
    (53) masmenos -> . PLUS stack_operator
    (54) masmenos -> . MINUS stack_operator
    (62) var_cte -> . ID stack_operand_id
    (63) var_cte -> . CTE_I stack_operand_int
    (64) var_cte -> . CTE_F stack_operand_float
    (65) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 65
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    ID              shift and go to state 64
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expresion                      shift and go to state 119
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    masmenos                       shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72

state 95

    (29) llamada -> ID L_PAREN exp_rep R_PAREN . np_llamada SEMICOLON
    (81) np_llamada -> .

    SEMICOLON       reduce using rule 81 (np_llamada -> .)

    np_llamada                     shift and go to state 120

state 96

    (30) exp_rep -> exp_rep COMMA . expresion
    (44) expresion -> . exp
    (45) expresion -> . exp checkrelop relop exp
    (51) exp -> . termino
    (52) exp -> . termino checkexp masmenos termino
    (55) termino -> . factor
    (56) termino -> . factor checkterm multdiv factor
    (59) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (60) factor -> . masmenos var_cte
    (61) factor -> . var_cte
    (53) masmenos -> . PLUS stack_operator
    (54) masmenos -> . MINUS stack_operator
    (62) var_cte -> . ID stack_operand_id
    (63) var_cte -> . CTE_I stack_operand_int
    (64) var_cte -> . CTE_F stack_operand_float
    (65) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 65
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    ID              shift and go to state 64
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expresion                      shift and go to state 121
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    masmenos                       shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72

state 97

    (45) expresion -> exp checkrelop . relop exp
    (46) relop -> . GT stack_operator
    (47) relop -> . LT stack_operator
    (48) relop -> . EQ stack_operator
    (49) relop -> . LEQ stack_operator
    (50) relop -> . GEQ stack_operator

    GT              shift and go to state 123
    LT              shift and go to state 124
    EQ              shift and go to state 125
    LEQ             shift and go to state 126
    GEQ             shift and go to state 127

    relop                          shift and go to state 122

state 98

    (52) exp -> termino checkexp . masmenos termino
    (53) masmenos -> . PLUS stack_operator
    (54) masmenos -> . MINUS stack_operator

    PLUS            shift and go to state 73
    MINUS           shift and go to state 74

    masmenos                       shift and go to state 128

state 99

    (60) factor -> masmenos var_cte .

    MULT            reduce using rule 60 (factor -> masmenos var_cte .)
    DIV             reduce using rule 60 (factor -> masmenos var_cte .)
    PLUS            reduce using rule 60 (factor -> masmenos var_cte .)
    MINUS           reduce using rule 60 (factor -> masmenos var_cte .)
    GT              reduce using rule 60 (factor -> masmenos var_cte .)
    LT              reduce using rule 60 (factor -> masmenos var_cte .)
    EQ              reduce using rule 60 (factor -> masmenos var_cte .)
    LEQ             reduce using rule 60 (factor -> masmenos var_cte .)
    GEQ             reduce using rule 60 (factor -> masmenos var_cte .)
    R_PAREN         reduce using rule 60 (factor -> masmenos var_cte .)
    COMMA           reduce using rule 60 (factor -> masmenos var_cte .)
    TO              reduce using rule 60 (factor -> masmenos var_cte .)
    SEMICOLON       reduce using rule 60 (factor -> masmenos var_cte .)
    DO              reduce using rule 60 (factor -> masmenos var_cte .)


state 100

    (56) termino -> factor checkterm . multdiv factor
    (57) multdiv -> . MULT stack_operator
    (58) multdiv -> . DIV stack_operator

    MULT            shift and go to state 130
    DIV             shift and go to state 131

    multdiv                        shift and go to state 129

state 101

    (53) masmenos -> PLUS stack_operator .

    ID              reduce using rule 53 (masmenos -> PLUS stack_operator .)
    CTE_I           reduce using rule 53 (masmenos -> PLUS stack_operator .)
    CTE_F           reduce using rule 53 (masmenos -> PLUS stack_operator .)
    CTE_CHAR        reduce using rule 53 (masmenos -> PLUS stack_operator .)
    L_PAREN         reduce using rule 53 (masmenos -> PLUS stack_operator .)
    PLUS            reduce using rule 53 (masmenos -> PLUS stack_operator .)
    MINUS           reduce using rule 53 (masmenos -> PLUS stack_operator .)


state 102

    (54) masmenos -> MINUS stack_operator .

    ID              reduce using rule 54 (masmenos -> MINUS stack_operator .)
    CTE_I           reduce using rule 54 (masmenos -> MINUS stack_operator .)
    CTE_F           reduce using rule 54 (masmenos -> MINUS stack_operator .)
    CTE_CHAR        reduce using rule 54 (masmenos -> MINUS stack_operator .)
    L_PAREN         reduce using rule 54 (masmenos -> MINUS stack_operator .)
    PLUS            reduce using rule 54 (masmenos -> MINUS stack_operator .)
    MINUS           reduce using rule 54 (masmenos -> MINUS stack_operator .)


state 103

    (63) var_cte -> CTE_I stack_operand_int .

    MULT            reduce using rule 63 (var_cte -> CTE_I stack_operand_int .)
    DIV             reduce using rule 63 (var_cte -> CTE_I stack_operand_int .)
    PLUS            reduce using rule 63 (var_cte -> CTE_I stack_operand_int .)
    MINUS           reduce using rule 63 (var_cte -> CTE_I stack_operand_int .)
    GT              reduce using rule 63 (var_cte -> CTE_I stack_operand_int .)
    LT              reduce using rule 63 (var_cte -> CTE_I stack_operand_int .)
    EQ              reduce using rule 63 (var_cte -> CTE_I stack_operand_int .)
    LEQ             reduce using rule 63 (var_cte -> CTE_I stack_operand_int .)
    GEQ             reduce using rule 63 (var_cte -> CTE_I stack_operand_int .)
    R_PAREN         reduce using rule 63 (var_cte -> CTE_I stack_operand_int .)
    COMMA           reduce using rule 63 (var_cte -> CTE_I stack_operand_int .)
    TO              reduce using rule 63 (var_cte -> CTE_I stack_operand_int .)
    SEMICOLON       reduce using rule 63 (var_cte -> CTE_I stack_operand_int .)
    DO              reduce using rule 63 (var_cte -> CTE_I stack_operand_int .)


state 104

    (64) var_cte -> CTE_F stack_operand_float .

    MULT            reduce using rule 64 (var_cte -> CTE_F stack_operand_float .)
    DIV             reduce using rule 64 (var_cte -> CTE_F stack_operand_float .)
    PLUS            reduce using rule 64 (var_cte -> CTE_F stack_operand_float .)
    MINUS           reduce using rule 64 (var_cte -> CTE_F stack_operand_float .)
    GT              reduce using rule 64 (var_cte -> CTE_F stack_operand_float .)
    LT              reduce using rule 64 (var_cte -> CTE_F stack_operand_float .)
    EQ              reduce using rule 64 (var_cte -> CTE_F stack_operand_float .)
    LEQ             reduce using rule 64 (var_cte -> CTE_F stack_operand_float .)
    GEQ             reduce using rule 64 (var_cte -> CTE_F stack_operand_float .)
    R_PAREN         reduce using rule 64 (var_cte -> CTE_F stack_operand_float .)
    COMMA           reduce using rule 64 (var_cte -> CTE_F stack_operand_float .)
    TO              reduce using rule 64 (var_cte -> CTE_F stack_operand_float .)
    SEMICOLON       reduce using rule 64 (var_cte -> CTE_F stack_operand_float .)
    DO              reduce using rule 64 (var_cte -> CTE_F stack_operand_float .)


state 105

    (65) var_cte -> CTE_CHAR stack_operand_char .

    MULT            reduce using rule 65 (var_cte -> CTE_CHAR stack_operand_char .)
    DIV             reduce using rule 65 (var_cte -> CTE_CHAR stack_operand_char .)
    PLUS            reduce using rule 65 (var_cte -> CTE_CHAR stack_operand_char .)
    MINUS           reduce using rule 65 (var_cte -> CTE_CHAR stack_operand_char .)
    GT              reduce using rule 65 (var_cte -> CTE_CHAR stack_operand_char .)
    LT              reduce using rule 65 (var_cte -> CTE_CHAR stack_operand_char .)
    EQ              reduce using rule 65 (var_cte -> CTE_CHAR stack_operand_char .)
    LEQ             reduce using rule 65 (var_cte -> CTE_CHAR stack_operand_char .)
    GEQ             reduce using rule 65 (var_cte -> CTE_CHAR stack_operand_char .)
    R_PAREN         reduce using rule 65 (var_cte -> CTE_CHAR stack_operand_char .)
    COMMA           reduce using rule 65 (var_cte -> CTE_CHAR stack_operand_char .)
    TO              reduce using rule 65 (var_cte -> CTE_CHAR stack_operand_char .)
    SEMICOLON       reduce using rule 65 (var_cte -> CTE_CHAR stack_operand_char .)
    DO              reduce using rule 65 (var_cte -> CTE_CHAR stack_operand_char .)


state 106

    (39) condicion -> IF L_PAREN expresion R_PAREN . bloque else_aux
    (18) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 16

    bloque                         shift and go to state 132

state 107

    (34) escritura -> WRITE L_PAREN escritura_rep R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 133


state 108

    (35) escritura_rep -> escritura_rep COMMA . escritura_aux
    (37) escritura_aux -> . CTE_S
    (38) escritura_aux -> . expresion
    (44) expresion -> . exp
    (45) expresion -> . exp checkrelop relop exp
    (51) exp -> . termino
    (52) exp -> . termino checkexp masmenos termino
    (55) termino -> . factor
    (56) termino -> . factor checkterm multdiv factor
    (59) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (60) factor -> . masmenos var_cte
    (61) factor -> . var_cte
    (53) masmenos -> . PLUS stack_operator
    (54) masmenos -> . MINUS stack_operator
    (62) var_cte -> . ID stack_operand_id
    (63) var_cte -> . CTE_I stack_operand_int
    (64) var_cte -> . CTE_F stack_operand_float
    (65) var_cte -> . CTE_CHAR stack_operand_char

    CTE_S           shift and go to state 81
    L_PAREN         shift and go to state 65
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    ID              shift and go to state 64
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    escritura_aux                  shift and go to state 134
    expresion                      shift and go to state 82
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    masmenos                       shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72

state 109

    (32) retorno -> RETURN L_PAREN expresion R_PAREN . return SEMICOLON
    (83) return -> .

    SEMICOLON       reduce using rule 83 (return -> .)

    return                         shift and go to state 135

state 110

    (33) lectura -> READ L_PAREN id_list R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 136


state 111

    (42) repeticion -> WHILE L_PAREN expresion R_PAREN . bloque
    (18) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 16

    bloque                         shift and go to state 137

state 112

    (43) repeticion -> FOR ID EQUAL expresion . TO expresion DO bloque

    TO              shift and go to state 138


state 113

    (11) func -> FUNCTION tipo_func ID addfunc L_PAREN parms . R_PAREN vars bloque

    R_PAREN         shift and go to state 139


state 114

    (16) parms -> tipo . ID addvar id_list

    ID              shift and go to state 140


state 115

    (17) parms -> empty .

    R_PAREN         reduce using rule 17 (parms -> empty .)


state 116

    (4) id_list -> id_list COMMA ID . addvar array
    (69) addvar -> .

    L_BRACKET       reduce using rule 69 (addvar -> .)
    SEMICOLON       reduce using rule 69 (addvar -> .)
    COMMA           reduce using rule 69 (addvar -> .)
    R_PAREN         reduce using rule 69 (addvar -> .)

    addvar                         shift and go to state 141

state 117

    (28) asignacion -> ID stack_operand_id array EQUAL stack_operator . expresion np_asignacion SEMICOLON
    (44) expresion -> . exp
    (45) expresion -> . exp checkrelop relop exp
    (51) exp -> . termino
    (52) exp -> . termino checkexp masmenos termino
    (55) termino -> . factor
    (56) termino -> . factor checkterm multdiv factor
    (59) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (60) factor -> . masmenos var_cte
    (61) factor -> . var_cte
    (53) masmenos -> . PLUS stack_operator
    (54) masmenos -> . MINUS stack_operator
    (62) var_cte -> . ID stack_operand_id
    (63) var_cte -> . CTE_I stack_operand_int
    (64) var_cte -> . CTE_F stack_operand_float
    (65) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 65
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    ID              shift and go to state 64
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expresion                      shift and go to state 142
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    masmenos                       shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72

state 118

    (6) array -> L_BRACKET CTE_I R_BRACKET .

    EQUAL           reduce using rule 6 (array -> L_BRACKET CTE_I R_BRACKET .)
    SEMICOLON       reduce using rule 6 (array -> L_BRACKET CTE_I R_BRACKET .)
    COMMA           reduce using rule 6 (array -> L_BRACKET CTE_I R_BRACKET .)
    R_PAREN         reduce using rule 6 (array -> L_BRACKET CTE_I R_BRACKET .)


state 119

    (59) factor -> L_PAREN fakebottom expresion . R_PAREN checkparentesis

    R_PAREN         shift and go to state 143


state 120

    (29) llamada -> ID L_PAREN exp_rep R_PAREN np_llamada . SEMICOLON

    SEMICOLON       shift and go to state 144


state 121

    (30) exp_rep -> exp_rep COMMA expresion .

    R_PAREN         reduce using rule 30 (exp_rep -> exp_rep COMMA expresion .)
    COMMA           reduce using rule 30 (exp_rep -> exp_rep COMMA expresion .)


state 122

    (45) expresion -> exp checkrelop relop . exp
    (51) exp -> . termino
    (52) exp -> . termino checkexp masmenos termino
    (55) termino -> . factor
    (56) termino -> . factor checkterm multdiv factor
    (59) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (60) factor -> . masmenos var_cte
    (61) factor -> . var_cte
    (53) masmenos -> . PLUS stack_operator
    (54) masmenos -> . MINUS stack_operator
    (62) var_cte -> . ID stack_operand_id
    (63) var_cte -> . CTE_I stack_operand_int
    (64) var_cte -> . CTE_F stack_operand_float
    (65) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 65
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    ID              shift and go to state 64
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    exp                            shift and go to state 145
    termino                        shift and go to state 69
    masmenos                       shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72

state 123

    (46) relop -> GT . stack_operator
    (75) stack_operator -> .

    L_PAREN         reduce using rule 75 (stack_operator -> .)
    PLUS            reduce using rule 75 (stack_operator -> .)
    MINUS           reduce using rule 75 (stack_operator -> .)
    ID              reduce using rule 75 (stack_operator -> .)
    CTE_I           reduce using rule 75 (stack_operator -> .)
    CTE_F           reduce using rule 75 (stack_operator -> .)
    CTE_CHAR        reduce using rule 75 (stack_operator -> .)

    stack_operator                 shift and go to state 146

state 124

    (47) relop -> LT . stack_operator
    (75) stack_operator -> .

    L_PAREN         reduce using rule 75 (stack_operator -> .)
    PLUS            reduce using rule 75 (stack_operator -> .)
    MINUS           reduce using rule 75 (stack_operator -> .)
    ID              reduce using rule 75 (stack_operator -> .)
    CTE_I           reduce using rule 75 (stack_operator -> .)
    CTE_F           reduce using rule 75 (stack_operator -> .)
    CTE_CHAR        reduce using rule 75 (stack_operator -> .)

    stack_operator                 shift and go to state 147

state 125

    (48) relop -> EQ . stack_operator
    (75) stack_operator -> .

    L_PAREN         reduce using rule 75 (stack_operator -> .)
    PLUS            reduce using rule 75 (stack_operator -> .)
    MINUS           reduce using rule 75 (stack_operator -> .)
    ID              reduce using rule 75 (stack_operator -> .)
    CTE_I           reduce using rule 75 (stack_operator -> .)
    CTE_F           reduce using rule 75 (stack_operator -> .)
    CTE_CHAR        reduce using rule 75 (stack_operator -> .)

    stack_operator                 shift and go to state 148

state 126

    (49) relop -> LEQ . stack_operator
    (75) stack_operator -> .

    L_PAREN         reduce using rule 75 (stack_operator -> .)
    PLUS            reduce using rule 75 (stack_operator -> .)
    MINUS           reduce using rule 75 (stack_operator -> .)
    ID              reduce using rule 75 (stack_operator -> .)
    CTE_I           reduce using rule 75 (stack_operator -> .)
    CTE_F           reduce using rule 75 (stack_operator -> .)
    CTE_CHAR        reduce using rule 75 (stack_operator -> .)

    stack_operator                 shift and go to state 149

state 127

    (50) relop -> GEQ . stack_operator
    (75) stack_operator -> .

    L_PAREN         reduce using rule 75 (stack_operator -> .)
    PLUS            reduce using rule 75 (stack_operator -> .)
    MINUS           reduce using rule 75 (stack_operator -> .)
    ID              reduce using rule 75 (stack_operator -> .)
    CTE_I           reduce using rule 75 (stack_operator -> .)
    CTE_F           reduce using rule 75 (stack_operator -> .)
    CTE_CHAR        reduce using rule 75 (stack_operator -> .)

    stack_operator                 shift and go to state 150

state 128

    (52) exp -> termino checkexp masmenos . termino
    (55) termino -> . factor
    (56) termino -> . factor checkterm multdiv factor
    (59) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (60) factor -> . masmenos var_cte
    (61) factor -> . var_cte
    (53) masmenos -> . PLUS stack_operator
    (54) masmenos -> . MINUS stack_operator
    (62) var_cte -> . ID stack_operand_id
    (63) var_cte -> . CTE_I stack_operand_int
    (64) var_cte -> . CTE_F stack_operand_float
    (65) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 65
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    ID              shift and go to state 64
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    termino                        shift and go to state 151
    masmenos                       shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72

state 129

    (56) termino -> factor checkterm multdiv . factor
    (59) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (60) factor -> . masmenos var_cte
    (61) factor -> . var_cte
    (53) masmenos -> . PLUS stack_operator
    (54) masmenos -> . MINUS stack_operator
    (62) var_cte -> . ID stack_operand_id
    (63) var_cte -> . CTE_I stack_operand_int
    (64) var_cte -> . CTE_F stack_operand_float
    (65) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 65
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    ID              shift and go to state 64
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    factor                         shift and go to state 152
    masmenos                       shift and go to state 70
    var_cte                        shift and go to state 72

state 130

    (57) multdiv -> MULT . stack_operator
    (75) stack_operator -> .

    L_PAREN         reduce using rule 75 (stack_operator -> .)
    PLUS            reduce using rule 75 (stack_operator -> .)
    MINUS           reduce using rule 75 (stack_operator -> .)
    ID              reduce using rule 75 (stack_operator -> .)
    CTE_I           reduce using rule 75 (stack_operator -> .)
    CTE_F           reduce using rule 75 (stack_operator -> .)
    CTE_CHAR        reduce using rule 75 (stack_operator -> .)

    stack_operator                 shift and go to state 153

state 131

    (58) multdiv -> DIV . stack_operator
    (75) stack_operator -> .

    L_PAREN         reduce using rule 75 (stack_operator -> .)
    PLUS            reduce using rule 75 (stack_operator -> .)
    MINUS           reduce using rule 75 (stack_operator -> .)
    ID              reduce using rule 75 (stack_operator -> .)
    CTE_I           reduce using rule 75 (stack_operator -> .)
    CTE_F           reduce using rule 75 (stack_operator -> .)
    CTE_CHAR        reduce using rule 75 (stack_operator -> .)

    stack_operator                 shift and go to state 154

state 132

    (39) condicion -> IF L_PAREN expresion R_PAREN bloque . else_aux
    (40) else_aux -> . ELSE bloque
    (41) else_aux -> . empty
    (66) empty -> .

    ELSE            shift and go to state 156
    R_BRACE         reduce using rule 66 (empty -> .)
    ID              reduce using rule 66 (empty -> .)
    IF              reduce using rule 66 (empty -> .)
    WRITE           reduce using rule 66 (empty -> .)
    RETURN          reduce using rule 66 (empty -> .)
    READ            reduce using rule 66 (empty -> .)
    WHILE           reduce using rule 66 (empty -> .)
    FOR             reduce using rule 66 (empty -> .)

    else_aux                       shift and go to state 155
    empty                          shift and go to state 157

state 133

    (34) escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .

    R_BRACE         reduce using rule 34 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    ID              reduce using rule 34 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    IF              reduce using rule 34 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    WRITE           reduce using rule 34 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    RETURN          reduce using rule 34 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    READ            reduce using rule 34 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    WHILE           reduce using rule 34 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    FOR             reduce using rule 34 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)


state 134

    (35) escritura_rep -> escritura_rep COMMA escritura_aux .

    R_PAREN         reduce using rule 35 (escritura_rep -> escritura_rep COMMA escritura_aux .)
    COMMA           reduce using rule 35 (escritura_rep -> escritura_rep COMMA escritura_aux .)


state 135

    (32) retorno -> RETURN L_PAREN expresion R_PAREN return . SEMICOLON

    SEMICOLON       shift and go to state 158


state 136

    (33) lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .

    R_BRACE         reduce using rule 33 (lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    ID              reduce using rule 33 (lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    IF              reduce using rule 33 (lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    WRITE           reduce using rule 33 (lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    RETURN          reduce using rule 33 (lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    READ            reduce using rule 33 (lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    WHILE           reduce using rule 33 (lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    FOR             reduce using rule 33 (lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .)


state 137

    (42) repeticion -> WHILE L_PAREN expresion R_PAREN bloque .

    R_BRACE         reduce using rule 42 (repeticion -> WHILE L_PAREN expresion R_PAREN bloque .)
    ID              reduce using rule 42 (repeticion -> WHILE L_PAREN expresion R_PAREN bloque .)
    IF              reduce using rule 42 (repeticion -> WHILE L_PAREN expresion R_PAREN bloque .)
    WRITE           reduce using rule 42 (repeticion -> WHILE L_PAREN expresion R_PAREN bloque .)
    RETURN          reduce using rule 42 (repeticion -> WHILE L_PAREN expresion R_PAREN bloque .)
    READ            reduce using rule 42 (repeticion -> WHILE L_PAREN expresion R_PAREN bloque .)
    WHILE           reduce using rule 42 (repeticion -> WHILE L_PAREN expresion R_PAREN bloque .)
    FOR             reduce using rule 42 (repeticion -> WHILE L_PAREN expresion R_PAREN bloque .)


state 138

    (43) repeticion -> FOR ID EQUAL expresion TO . expresion DO bloque
    (44) expresion -> . exp
    (45) expresion -> . exp checkrelop relop exp
    (51) exp -> . termino
    (52) exp -> . termino checkexp masmenos termino
    (55) termino -> . factor
    (56) termino -> . factor checkterm multdiv factor
    (59) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (60) factor -> . masmenos var_cte
    (61) factor -> . var_cte
    (53) masmenos -> . PLUS stack_operator
    (54) masmenos -> . MINUS stack_operator
    (62) var_cte -> . ID stack_operand_id
    (63) var_cte -> . CTE_I stack_operand_int
    (64) var_cte -> . CTE_F stack_operand_float
    (65) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 65
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    ID              shift and go to state 64
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expresion                      shift and go to state 159
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    masmenos                       shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72

state 139

    (11) func -> FUNCTION tipo_func ID addfunc L_PAREN parms R_PAREN . vars bloque
    (2) vars -> . VAR tipo addvar COLON id_list SEMICOLON
    (3) vars -> . empty
    (66) empty -> .

    VAR             shift and go to state 7
    L_BRACE         reduce using rule 66 (empty -> .)

    vars                           shift and go to state 160
    empty                          shift and go to state 8

state 140

    (16) parms -> tipo ID . addvar id_list
    (69) addvar -> .

    ID              reduce using rule 69 (addvar -> .)

    addvar                         shift and go to state 161

state 141

    (4) id_list -> id_list COMMA ID addvar . array
    (6) array -> . L_BRACKET CTE_I R_BRACKET
    (7) array -> . empty
    (66) empty -> .

    L_BRACKET       shift and go to state 62
    SEMICOLON       reduce using rule 66 (empty -> .)
    COMMA           reduce using rule 66 (empty -> .)
    R_PAREN         reduce using rule 66 (empty -> .)

    array                          shift and go to state 162
    empty                          shift and go to state 63

state 142

    (28) asignacion -> ID stack_operand_id array EQUAL stack_operator expresion . np_asignacion SEMICOLON
    (82) np_asignacion -> .

    SEMICOLON       reduce using rule 82 (np_asignacion -> .)

    np_asignacion                  shift and go to state 163

state 143

    (59) factor -> L_PAREN fakebottom expresion R_PAREN . checkparentesis
    (77) checkparentesis -> .

    MULT            reduce using rule 77 (checkparentesis -> .)
    DIV             reduce using rule 77 (checkparentesis -> .)
    PLUS            reduce using rule 77 (checkparentesis -> .)
    MINUS           reduce using rule 77 (checkparentesis -> .)
    GT              reduce using rule 77 (checkparentesis -> .)
    LT              reduce using rule 77 (checkparentesis -> .)
    EQ              reduce using rule 77 (checkparentesis -> .)
    LEQ             reduce using rule 77 (checkparentesis -> .)
    GEQ             reduce using rule 77 (checkparentesis -> .)
    R_PAREN         reduce using rule 77 (checkparentesis -> .)
    COMMA           reduce using rule 77 (checkparentesis -> .)
    TO              reduce using rule 77 (checkparentesis -> .)
    SEMICOLON       reduce using rule 77 (checkparentesis -> .)
    DO              reduce using rule 77 (checkparentesis -> .)

    checkparentesis                shift and go to state 164

state 144

    (29) llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .

    R_BRACE         reduce using rule 29 (llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    ID              reduce using rule 29 (llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    IF              reduce using rule 29 (llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    WRITE           reduce using rule 29 (llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    RETURN          reduce using rule 29 (llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    READ            reduce using rule 29 (llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    WHILE           reduce using rule 29 (llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    FOR             reduce using rule 29 (llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)


state 145

    (45) expresion -> exp checkrelop relop exp .

    R_PAREN         reduce using rule 45 (expresion -> exp checkrelop relop exp .)
    COMMA           reduce using rule 45 (expresion -> exp checkrelop relop exp .)
    TO              reduce using rule 45 (expresion -> exp checkrelop relop exp .)
    SEMICOLON       reduce using rule 45 (expresion -> exp checkrelop relop exp .)
    DO              reduce using rule 45 (expresion -> exp checkrelop relop exp .)


state 146

    (46) relop -> GT stack_operator .

    L_PAREN         reduce using rule 46 (relop -> GT stack_operator .)
    PLUS            reduce using rule 46 (relop -> GT stack_operator .)
    MINUS           reduce using rule 46 (relop -> GT stack_operator .)
    ID              reduce using rule 46 (relop -> GT stack_operator .)
    CTE_I           reduce using rule 46 (relop -> GT stack_operator .)
    CTE_F           reduce using rule 46 (relop -> GT stack_operator .)
    CTE_CHAR        reduce using rule 46 (relop -> GT stack_operator .)


state 147

    (47) relop -> LT stack_operator .

    L_PAREN         reduce using rule 47 (relop -> LT stack_operator .)
    PLUS            reduce using rule 47 (relop -> LT stack_operator .)
    MINUS           reduce using rule 47 (relop -> LT stack_operator .)
    ID              reduce using rule 47 (relop -> LT stack_operator .)
    CTE_I           reduce using rule 47 (relop -> LT stack_operator .)
    CTE_F           reduce using rule 47 (relop -> LT stack_operator .)
    CTE_CHAR        reduce using rule 47 (relop -> LT stack_operator .)


state 148

    (48) relop -> EQ stack_operator .

    L_PAREN         reduce using rule 48 (relop -> EQ stack_operator .)
    PLUS            reduce using rule 48 (relop -> EQ stack_operator .)
    MINUS           reduce using rule 48 (relop -> EQ stack_operator .)
    ID              reduce using rule 48 (relop -> EQ stack_operator .)
    CTE_I           reduce using rule 48 (relop -> EQ stack_operator .)
    CTE_F           reduce using rule 48 (relop -> EQ stack_operator .)
    CTE_CHAR        reduce using rule 48 (relop -> EQ stack_operator .)


state 149

    (49) relop -> LEQ stack_operator .

    L_PAREN         reduce using rule 49 (relop -> LEQ stack_operator .)
    PLUS            reduce using rule 49 (relop -> LEQ stack_operator .)
    MINUS           reduce using rule 49 (relop -> LEQ stack_operator .)
    ID              reduce using rule 49 (relop -> LEQ stack_operator .)
    CTE_I           reduce using rule 49 (relop -> LEQ stack_operator .)
    CTE_F           reduce using rule 49 (relop -> LEQ stack_operator .)
    CTE_CHAR        reduce using rule 49 (relop -> LEQ stack_operator .)


state 150

    (50) relop -> GEQ stack_operator .

    L_PAREN         reduce using rule 50 (relop -> GEQ stack_operator .)
    PLUS            reduce using rule 50 (relop -> GEQ stack_operator .)
    MINUS           reduce using rule 50 (relop -> GEQ stack_operator .)
    ID              reduce using rule 50 (relop -> GEQ stack_operator .)
    CTE_I           reduce using rule 50 (relop -> GEQ stack_operator .)
    CTE_F           reduce using rule 50 (relop -> GEQ stack_operator .)
    CTE_CHAR        reduce using rule 50 (relop -> GEQ stack_operator .)


state 151

    (52) exp -> termino checkexp masmenos termino .

    GT              reduce using rule 52 (exp -> termino checkexp masmenos termino .)
    LT              reduce using rule 52 (exp -> termino checkexp masmenos termino .)
    EQ              reduce using rule 52 (exp -> termino checkexp masmenos termino .)
    LEQ             reduce using rule 52 (exp -> termino checkexp masmenos termino .)
    GEQ             reduce using rule 52 (exp -> termino checkexp masmenos termino .)
    R_PAREN         reduce using rule 52 (exp -> termino checkexp masmenos termino .)
    COMMA           reduce using rule 52 (exp -> termino checkexp masmenos termino .)
    TO              reduce using rule 52 (exp -> termino checkexp masmenos termino .)
    SEMICOLON       reduce using rule 52 (exp -> termino checkexp masmenos termino .)
    DO              reduce using rule 52 (exp -> termino checkexp masmenos termino .)


state 152

    (56) termino -> factor checkterm multdiv factor .

    PLUS            reduce using rule 56 (termino -> factor checkterm multdiv factor .)
    MINUS           reduce using rule 56 (termino -> factor checkterm multdiv factor .)
    GT              reduce using rule 56 (termino -> factor checkterm multdiv factor .)
    LT              reduce using rule 56 (termino -> factor checkterm multdiv factor .)
    EQ              reduce using rule 56 (termino -> factor checkterm multdiv factor .)
    LEQ             reduce using rule 56 (termino -> factor checkterm multdiv factor .)
    GEQ             reduce using rule 56 (termino -> factor checkterm multdiv factor .)
    R_PAREN         reduce using rule 56 (termino -> factor checkterm multdiv factor .)
    COMMA           reduce using rule 56 (termino -> factor checkterm multdiv factor .)
    TO              reduce using rule 56 (termino -> factor checkterm multdiv factor .)
    SEMICOLON       reduce using rule 56 (termino -> factor checkterm multdiv factor .)
    DO              reduce using rule 56 (termino -> factor checkterm multdiv factor .)


state 153

    (57) multdiv -> MULT stack_operator .

    L_PAREN         reduce using rule 57 (multdiv -> MULT stack_operator .)
    PLUS            reduce using rule 57 (multdiv -> MULT stack_operator .)
    MINUS           reduce using rule 57 (multdiv -> MULT stack_operator .)
    ID              reduce using rule 57 (multdiv -> MULT stack_operator .)
    CTE_I           reduce using rule 57 (multdiv -> MULT stack_operator .)
    CTE_F           reduce using rule 57 (multdiv -> MULT stack_operator .)
    CTE_CHAR        reduce using rule 57 (multdiv -> MULT stack_operator .)


state 154

    (58) multdiv -> DIV stack_operator .

    L_PAREN         reduce using rule 58 (multdiv -> DIV stack_operator .)
    PLUS            reduce using rule 58 (multdiv -> DIV stack_operator .)
    MINUS           reduce using rule 58 (multdiv -> DIV stack_operator .)
    ID              reduce using rule 58 (multdiv -> DIV stack_operator .)
    CTE_I           reduce using rule 58 (multdiv -> DIV stack_operator .)
    CTE_F           reduce using rule 58 (multdiv -> DIV stack_operator .)
    CTE_CHAR        reduce using rule 58 (multdiv -> DIV stack_operator .)


state 155

    (39) condicion -> IF L_PAREN expresion R_PAREN bloque else_aux .

    R_BRACE         reduce using rule 39 (condicion -> IF L_PAREN expresion R_PAREN bloque else_aux .)
    ID              reduce using rule 39 (condicion -> IF L_PAREN expresion R_PAREN bloque else_aux .)
    IF              reduce using rule 39 (condicion -> IF L_PAREN expresion R_PAREN bloque else_aux .)
    WRITE           reduce using rule 39 (condicion -> IF L_PAREN expresion R_PAREN bloque else_aux .)
    RETURN          reduce using rule 39 (condicion -> IF L_PAREN expresion R_PAREN bloque else_aux .)
    READ            reduce using rule 39 (condicion -> IF L_PAREN expresion R_PAREN bloque else_aux .)
    WHILE           reduce using rule 39 (condicion -> IF L_PAREN expresion R_PAREN bloque else_aux .)
    FOR             reduce using rule 39 (condicion -> IF L_PAREN expresion R_PAREN bloque else_aux .)


state 156

    (40) else_aux -> ELSE . bloque
    (18) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 16

    bloque                         shift and go to state 165

state 157

    (41) else_aux -> empty .

    R_BRACE         reduce using rule 41 (else_aux -> empty .)
    ID              reduce using rule 41 (else_aux -> empty .)
    IF              reduce using rule 41 (else_aux -> empty .)
    WRITE           reduce using rule 41 (else_aux -> empty .)
    RETURN          reduce using rule 41 (else_aux -> empty .)
    READ            reduce using rule 41 (else_aux -> empty .)
    WHILE           reduce using rule 41 (else_aux -> empty .)
    FOR             reduce using rule 41 (else_aux -> empty .)


state 158

    (32) retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .

    R_BRACE         reduce using rule 32 (retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .)
    ID              reduce using rule 32 (retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .)
    IF              reduce using rule 32 (retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .)
    WRITE           reduce using rule 32 (retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .)
    RETURN          reduce using rule 32 (retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .)
    READ            reduce using rule 32 (retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .)
    WHILE           reduce using rule 32 (retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .)
    FOR             reduce using rule 32 (retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .)


state 159

    (43) repeticion -> FOR ID EQUAL expresion TO expresion . DO bloque

    DO              shift and go to state 166


state 160

    (11) func -> FUNCTION tipo_func ID addfunc L_PAREN parms R_PAREN vars . bloque
    (18) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 16

    bloque                         shift and go to state 167

state 161

    (16) parms -> tipo ID addvar . id_list
    (4) id_list -> . id_list COMMA ID addvar array
    (5) id_list -> . ID array

    ID              shift and go to state 60

    id_list                        shift and go to state 168

state 162

    (4) id_list -> id_list COMMA ID addvar array .

    SEMICOLON       reduce using rule 4 (id_list -> id_list COMMA ID addvar array .)
    COMMA           reduce using rule 4 (id_list -> id_list COMMA ID addvar array .)
    R_PAREN         reduce using rule 4 (id_list -> id_list COMMA ID addvar array .)


state 163

    (28) asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion . SEMICOLON

    SEMICOLON       shift and go to state 169


state 164

    (59) factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .

    MULT            reduce using rule 59 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    DIV             reduce using rule 59 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    PLUS            reduce using rule 59 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    MINUS           reduce using rule 59 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    GT              reduce using rule 59 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    LT              reduce using rule 59 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    EQ              reduce using rule 59 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    LEQ             reduce using rule 59 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    GEQ             reduce using rule 59 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    R_PAREN         reduce using rule 59 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    COMMA           reduce using rule 59 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    TO              reduce using rule 59 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    SEMICOLON       reduce using rule 59 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    DO              reduce using rule 59 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)


state 165

    (40) else_aux -> ELSE bloque .

    R_BRACE         reduce using rule 40 (else_aux -> ELSE bloque .)
    ID              reduce using rule 40 (else_aux -> ELSE bloque .)
    IF              reduce using rule 40 (else_aux -> ELSE bloque .)
    WRITE           reduce using rule 40 (else_aux -> ELSE bloque .)
    RETURN          reduce using rule 40 (else_aux -> ELSE bloque .)
    READ            reduce using rule 40 (else_aux -> ELSE bloque .)
    WHILE           reduce using rule 40 (else_aux -> ELSE bloque .)
    FOR             reduce using rule 40 (else_aux -> ELSE bloque .)


state 166

    (43) repeticion -> FOR ID EQUAL expresion TO expresion DO . bloque
    (18) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 16

    bloque                         shift and go to state 170

state 167

    (11) func -> FUNCTION tipo_func ID addfunc L_PAREN parms R_PAREN vars bloque .

    L_BRACE         reduce using rule 11 (func -> FUNCTION tipo_func ID addfunc L_PAREN parms R_PAREN vars bloque .)


state 168

    (16) parms -> tipo ID addvar id_list .
    (4) id_list -> id_list . COMMA ID addvar array

    R_PAREN         reduce using rule 16 (parms -> tipo ID addvar id_list .)
    COMMA           shift and go to state 89


state 169

    (28) asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .

    R_BRACE         reduce using rule 28 (asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .)
    ID              reduce using rule 28 (asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .)
    IF              reduce using rule 28 (asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .)
    WRITE           reduce using rule 28 (asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .)
    RETURN          reduce using rule 28 (asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .)
    READ            reduce using rule 28 (asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .)
    WHILE           reduce using rule 28 (asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .)
    FOR             reduce using rule 28 (asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .)


state 170

    (43) repeticion -> FOR ID EQUAL expresion TO expresion DO bloque .

    R_BRACE         reduce using rule 43 (repeticion -> FOR ID EQUAL expresion TO expresion DO bloque .)
    ID              reduce using rule 43 (repeticion -> FOR ID EQUAL expresion TO expresion DO bloque .)
    IF              reduce using rule 43 (repeticion -> FOR ID EQUAL expresion TO expresion DO bloque .)
    WRITE           reduce using rule 43 (repeticion -> FOR ID EQUAL expresion TO expresion DO bloque .)
    RETURN          reduce using rule 43 (repeticion -> FOR ID EQUAL expresion TO expresion DO bloque .)
    READ            reduce using rule 43 (repeticion -> FOR ID EQUAL expresion TO expresion DO bloque .)
    WHILE           reduce using rule 43 (repeticion -> FOR ID EQUAL expresion TO expresion DO bloque .)
    FOR             reduce using rule 43 (repeticion -> FOR ID EQUAL expresion TO expresion DO bloque .)

