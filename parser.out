Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MEDIA
    MODA
    PLOTXY
    REG
    VARIANZA

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars2 func2 principal
Rule 2     vars -> VAR tipo COLON id_list SEMICOLON
Rule 3     vars2 -> vars vars2
Rule 4     vars2 -> empty
Rule 5     id_list -> id_list COMMA ID addvar array
Rule 6     id_list -> ID addvar array
Rule 7     array -> L_BRACKET CTE_I R_BRACKET
Rule 8     array -> empty
Rule 9     tipo -> INT current_type
Rule 10    tipo -> FLOAT current_type
Rule 11    tipo -> BOOL current_type
Rule 12    tipo -> CHAR current_type
Rule 13    func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc
Rule 14    func2 -> func func2
Rule 15    func2 -> empty
Rule 16    tipo_func -> INT current_type
Rule 17    tipo_func -> FLOAT current_type
Rule 18    tipo_func -> CHAR current_type
Rule 19    tipo_func -> BOOL current_type
Rule 20    tipo_func -> VOID current_type
Rule 21    params -> tipo ID addvar updateParams params2
Rule 22    params -> empty
Rule 23    params2 -> COMMA tipo ID addvar updateParams params2
Rule 24    params2 -> empty
Rule 25    principal -> MAIN start funcChange L_PAREN R_PAREN bloque endProc
Rule 26    bloque -> L_BRACE estatuto_rep R_BRACE
Rule 27    estatuto_rep -> estatuto estatuto_rep
Rule 28    estatuto_rep -> empty
Rule 29    estatuto -> asignacion
Rule 30    estatuto -> condicion
Rule 31    estatuto -> escritura
Rule 32    estatuto -> llamada
Rule 33    estatuto -> retorno
Rule 34    estatuto -> lectura
Rule 35    estatuto -> repeticion
Rule 36    estatuto -> repeticion2
Rule 37    asignacion -> ID stack_operand_id array EQUAL stack_operator expOr np_asignacion SEMICOLON
Rule 38    llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
Rule 39    retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON
Rule 40    lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON
Rule 41    escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
Rule 42    escritura_rep -> escritura_rep COMMA escritura_aux
Rule 43    escritura_rep -> escritura_aux
Rule 44    escritura_aux -> CTE_S printString
Rule 45    escritura_aux -> expOr np_print
Rule 46    condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux
Rule 47    else_aux -> ELSE Goto bloque end_if
Rule 48    else_aux -> end_if
Rule 49    repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF bloque end_while
Rule 50    repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque
Rule 51    parm -> expOr checkParam parm2
Rule 52    parm -> empty
Rule 53    parm2 -> COMMA expOr checkParam parm2
Rule 54    parm2 -> empty
Rule 55    expOr -> expAnd checkAndOr OR stack_operator expOr
Rule 56    expOr -> expAnd checkAndOr
Rule 57    expAnd -> expresion checkAndOr AND stack_operator expAnd
Rule 58    expAnd -> expresion checkAndOr
Rule 59    expresion -> exp checkrelop relop
Rule 60    relop -> GT stack_operator expresion
Rule 61    relop -> LT stack_operator expresion
Rule 62    relop -> EQ stack_operator expresion
Rule 63    relop -> LEQ stack_operator expresion
Rule 64    relop -> GEQ stack_operator expresion
Rule 65    relop -> empty
Rule 66    exp -> termino checkexp masmenos
Rule 67    masmenos -> PLUS stack_operator exp
Rule 68    masmenos -> MINUS stack_operator exp
Rule 69    masmenos -> empty
Rule 70    termino -> factor checkterm multdiv
Rule 71    multdiv -> MULT stack_operator termino
Rule 72    multdiv -> DIV stack_operator termino
Rule 73    multdiv -> empty
Rule 74    factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis
Rule 75    factor -> var_cte
Rule 76    var_cte -> ID stack_operand_id
Rule 77    var_cte -> llamada
Rule 78    var_cte -> CTE_I stack_operand_int
Rule 79    var_cte -> CTE_F stack_operand_float
Rule 80    var_cte -> CTE_CHAR stack_operand_char
Rule 81    empty -> <empty>
Rule 82    create_dirfunc -> <empty>
Rule 83    current_type -> <empty>
Rule 84    addvar -> <empty>
Rule 85    addfunc -> <empty>
Rule 86    stack_operand_id -> <empty>
Rule 87    stack_operand_int -> <empty>
Rule 88    stack_operand_float -> <empty>
Rule 89    stack_operand_char -> <empty>
Rule 90    stack_operator -> <empty>
Rule 91    fakebottom -> <empty>
Rule 92    checkparentesis -> <empty>
Rule 93    checkAndOr -> <empty>
Rule 94    checkterm -> <empty>
Rule 95    checkexp -> <empty>
Rule 96    checkrelop -> <empty>
Rule 97    llamadaEra -> <empty>
Rule 98    np_asignacion -> <empty>
Rule 99    np_return -> <empty>
Rule 100   GotoF -> <empty>
Rule 101   Goto -> <empty>
Rule 102   end_if -> <empty>
Rule 103   end_while -> <empty>
Rule 104   addJump -> <empty>
Rule 105   endFunc -> <empty>
Rule 106   updateParams -> <empty>
Rule 107   funcJump -> <empty>
Rule 108   funcChange -> <empty>
Rule 109   np_print -> <empty>
Rule 110   printString -> <empty>
Rule 111   np_read -> <empty>
Rule 112   start -> <empty>
Rule 113   endProc -> <empty>
Rule 114   checkParam -> <empty>
Rule 115   checkParamNum -> <empty>
Rule 116   Gosub -> <empty>

Terminals, with rules where they appear

AND                  : 57
BOOL                 : 11 19
CHAR                 : 12 18
COLON                : 2
COMMA                : 5 23 42 53
CTE_CHAR             : 80
CTE_F                : 79
CTE_I                : 7 78
CTE_S                : 44
DIV                  : 72
DO                   : 50
ELSE                 : 47
EQ                   : 62
EQUAL                : 37 50
FLOAT                : 10 17
FOR                  : 50
FUNCTION             : 13
GEQ                  : 64
GT                   : 60
ID                   : 1 5 6 13 21 23 37 38 40 50 76
IF                   : 46
INT                  : 9 16
LEQ                  : 63
LT                   : 61
L_BRACE              : 13 26
L_BRACKET            : 7
L_PAREN              : 13 25 38 39 40 41 46 49 74
MAIN                 : 25
MEDIA                : 
MINUS                : 68
MODA                 : 
MULT                 : 71
OR                   : 55
PLOTXY               : 
PLUS                 : 67
PROGRAM              : 1
READ                 : 40
REG                  : 
RETURN               : 39
R_BRACE              : 13 26
R_BRACKET            : 7
R_PAREN              : 13 25 38 39 40 41 46 49 74
SEMICOLON            : 1 2 37 39 40 41
THEN                 : 46
TO                   : 50
VAR                  : 2
VARIANZA             : 
VOID                 : 20
WHILE                : 49
WRITE                : 41
error                : 

Nonterminals, with rules where they appear

Gosub                : 38
Goto                 : 47
GotoF                : 46 49
PROGRAMA             : 0
addJump              : 49
addfunc              : 13
addvar               : 5 6 21 23
array                : 5 6 37
asignacion           : 29
bloque               : 25 46 47 49 50
checkAndOr           : 55 56 57 58
checkParam           : 51 53
checkParamNum        : 38
checkexp             : 66
checkparentesis      : 38 74
checkrelop           : 59
checkterm            : 70
condicion            : 30
create_dirfunc       : 1
current_type         : 9 10 11 12 16 17 18 19 20
else_aux             : 46
empty                : 4 8 15 22 24 28 52 54 65 69 73
endFunc              : 13
endProc              : 25
end_if               : 47 48
end_while            : 49
escritura            : 31
escritura_aux        : 42 43
escritura_rep        : 41 42
estatuto             : 27
estatuto_rep         : 13 26 27
exp                  : 59 67 68
expAnd               : 55 56 57
expOr                : 37 39 45 46 49 50 50 51 53 55 74
expresion            : 57 58 60 61 62 63 64
factor               : 70
fakebottom           : 38 74
func                 : 14
func2                : 1 14
funcChange           : 25
funcJump             : 13
id_list              : 2 5
lectura              : 34
llamada              : 32 77
llamadaEra           : 38
masmenos             : 66
multdiv              : 70
np_asignacion        : 37
np_print             : 45
np_read              : 40
np_return            : 39
params               : 13
params2              : 21 23
parm                 : 38
parm2                : 51 53
principal            : 1
printString          : 44
relop                : 59
repeticion           : 35
repeticion2          : 36
retorno              : 33
stack_operand_char   : 80
stack_operand_float  : 79
stack_operand_id     : 37 76
stack_operand_int    : 78
stack_operator       : 37 55 57 60 61 62 63 64 67 68 71 72
start                : 25
termino              : 66 71 72
tipo                 : 2 21 23
tipo_func            : 13
updateParams         : 21 23
var_cte              : 75
vars                 : 3
vars2                : 1 3 13

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . PROGRAM create_dirfunc ID SEMICOLON vars2 func2 principal

    PROGRAM         shift and go to state 2

    PROGRAMA                       shift and go to state 1

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> PROGRAM . create_dirfunc ID SEMICOLON vars2 func2 principal
    (82) create_dirfunc -> .

    ID              reduce using rule 82 (create_dirfunc -> .)

    create_dirfunc                 shift and go to state 3

state 3

    (1) PROGRAMA -> PROGRAM create_dirfunc . ID SEMICOLON vars2 func2 principal

    ID              shift and go to state 4


state 4

    (1) PROGRAMA -> PROGRAM create_dirfunc ID . SEMICOLON vars2 func2 principal

    SEMICOLON       shift and go to state 5


state 5

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON . vars2 func2 principal
    (3) vars2 -> . vars vars2
    (4) vars2 -> . empty
    (2) vars -> . VAR tipo COLON id_list SEMICOLON
    (81) empty -> .

    VAR             shift and go to state 9
    FUNCTION        reduce using rule 81 (empty -> .)
    MAIN            reduce using rule 81 (empty -> .)

    vars2                          shift and go to state 6
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 6

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars2 . func2 principal
    (14) func2 -> . func func2
    (15) func2 -> . empty
    (13) func -> . FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc
    (81) empty -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 81 (empty -> .)

    func2                          shift and go to state 10
    func                           shift and go to state 11
    empty                          shift and go to state 12

state 7

    (3) vars2 -> vars . vars2
    (3) vars2 -> . vars vars2
    (4) vars2 -> . empty
    (2) vars -> . VAR tipo COLON id_list SEMICOLON
    (81) empty -> .

    VAR             shift and go to state 9
    FUNCTION        reduce using rule 81 (empty -> .)
    MAIN            reduce using rule 81 (empty -> .)
    L_BRACE         reduce using rule 81 (empty -> .)

    vars                           shift and go to state 7
    vars2                          shift and go to state 14
    empty                          shift and go to state 8

state 8

    (4) vars2 -> empty .

    FUNCTION        reduce using rule 4 (vars2 -> empty .)
    MAIN            reduce using rule 4 (vars2 -> empty .)
    L_BRACE         reduce using rule 4 (vars2 -> empty .)


state 9

    (2) vars -> VAR . tipo COLON id_list SEMICOLON
    (9) tipo -> . INT current_type
    (10) tipo -> . FLOAT current_type
    (11) tipo -> . BOOL current_type
    (12) tipo -> . CHAR current_type

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    CHAR            shift and go to state 19

    tipo                           shift and go to state 15

state 10

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars2 func2 . principal
    (25) principal -> . MAIN start funcChange L_PAREN R_PAREN bloque endProc

    MAIN            shift and go to state 21

    principal                      shift and go to state 20

state 11

    (14) func2 -> func . func2
    (14) func2 -> . func func2
    (15) func2 -> . empty
    (13) func -> . FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc
    (81) empty -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 81 (empty -> .)

    func                           shift and go to state 11
    func2                          shift and go to state 22
    empty                          shift and go to state 12

state 12

    (15) func2 -> empty .

    MAIN            reduce using rule 15 (func2 -> empty .)


state 13

    (13) func -> FUNCTION . tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc
    (16) tipo_func -> . INT current_type
    (17) tipo_func -> . FLOAT current_type
    (18) tipo_func -> . CHAR current_type
    (19) tipo_func -> . BOOL current_type
    (20) tipo_func -> . VOID current_type

    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26
    BOOL            shift and go to state 27
    VOID            shift and go to state 28

    tipo_func                      shift and go to state 23

state 14

    (3) vars2 -> vars vars2 .

    FUNCTION        reduce using rule 3 (vars2 -> vars vars2 .)
    MAIN            reduce using rule 3 (vars2 -> vars vars2 .)
    L_BRACE         reduce using rule 3 (vars2 -> vars vars2 .)


state 15

    (2) vars -> VAR tipo . COLON id_list SEMICOLON

    COLON           shift and go to state 29


state 16

    (9) tipo -> INT . current_type
    (83) current_type -> .

    COLON           reduce using rule 83 (current_type -> .)
    ID              reduce using rule 83 (current_type -> .)

    current_type                   shift and go to state 30

state 17

    (10) tipo -> FLOAT . current_type
    (83) current_type -> .

    COLON           reduce using rule 83 (current_type -> .)
    ID              reduce using rule 83 (current_type -> .)

    current_type                   shift and go to state 31

state 18

    (11) tipo -> BOOL . current_type
    (83) current_type -> .

    COLON           reduce using rule 83 (current_type -> .)
    ID              reduce using rule 83 (current_type -> .)

    current_type                   shift and go to state 32

state 19

    (12) tipo -> CHAR . current_type
    (83) current_type -> .

    COLON           reduce using rule 83 (current_type -> .)
    ID              reduce using rule 83 (current_type -> .)

    current_type                   shift and go to state 33

state 20

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars2 func2 principal .

    $end            reduce using rule 1 (PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars2 func2 principal .)


state 21

    (25) principal -> MAIN . start funcChange L_PAREN R_PAREN bloque endProc
    (112) start -> .

    L_PAREN         reduce using rule 112 (start -> .)

    start                          shift and go to state 34

state 22

    (14) func2 -> func func2 .

    MAIN            reduce using rule 14 (func2 -> func func2 .)


state 23

    (13) func -> FUNCTION tipo_func . ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc

    ID              shift and go to state 35


state 24

    (16) tipo_func -> INT . current_type
    (83) current_type -> .

    ID              reduce using rule 83 (current_type -> .)

    current_type                   shift and go to state 36

state 25

    (17) tipo_func -> FLOAT . current_type
    (83) current_type -> .

    ID              reduce using rule 83 (current_type -> .)

    current_type                   shift and go to state 37

state 26

    (18) tipo_func -> CHAR . current_type
    (83) current_type -> .

    ID              reduce using rule 83 (current_type -> .)

    current_type                   shift and go to state 38

state 27

    (19) tipo_func -> BOOL . current_type
    (83) current_type -> .

    ID              reduce using rule 83 (current_type -> .)

    current_type                   shift and go to state 39

state 28

    (20) tipo_func -> VOID . current_type
    (83) current_type -> .

    ID              reduce using rule 83 (current_type -> .)

    current_type                   shift and go to state 40

state 29

    (2) vars -> VAR tipo COLON . id_list SEMICOLON
    (5) id_list -> . id_list COMMA ID addvar array
    (6) id_list -> . ID addvar array

    ID              shift and go to state 42

    id_list                        shift and go to state 41

state 30

    (9) tipo -> INT current_type .

    COLON           reduce using rule 9 (tipo -> INT current_type .)
    ID              reduce using rule 9 (tipo -> INT current_type .)


state 31

    (10) tipo -> FLOAT current_type .

    COLON           reduce using rule 10 (tipo -> FLOAT current_type .)
    ID              reduce using rule 10 (tipo -> FLOAT current_type .)


state 32

    (11) tipo -> BOOL current_type .

    COLON           reduce using rule 11 (tipo -> BOOL current_type .)
    ID              reduce using rule 11 (tipo -> BOOL current_type .)


state 33

    (12) tipo -> CHAR current_type .

    COLON           reduce using rule 12 (tipo -> CHAR current_type .)
    ID              reduce using rule 12 (tipo -> CHAR current_type .)


state 34

    (25) principal -> MAIN start . funcChange L_PAREN R_PAREN bloque endProc
    (108) funcChange -> .

    L_PAREN         reduce using rule 108 (funcChange -> .)

    funcChange                     shift and go to state 43

state 35

    (13) func -> FUNCTION tipo_func ID . addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc
    (85) addfunc -> .

    L_PAREN         reduce using rule 85 (addfunc -> .)

    addfunc                        shift and go to state 44

state 36

    (16) tipo_func -> INT current_type .

    ID              reduce using rule 16 (tipo_func -> INT current_type .)


state 37

    (17) tipo_func -> FLOAT current_type .

    ID              reduce using rule 17 (tipo_func -> FLOAT current_type .)


state 38

    (18) tipo_func -> CHAR current_type .

    ID              reduce using rule 18 (tipo_func -> CHAR current_type .)


state 39

    (19) tipo_func -> BOOL current_type .

    ID              reduce using rule 19 (tipo_func -> BOOL current_type .)


state 40

    (20) tipo_func -> VOID current_type .

    ID              reduce using rule 20 (tipo_func -> VOID current_type .)


state 41

    (2) vars -> VAR tipo COLON id_list . SEMICOLON
    (5) id_list -> id_list . COMMA ID addvar array

    SEMICOLON       shift and go to state 45
    COMMA           shift and go to state 46


state 42

    (6) id_list -> ID . addvar array
    (84) addvar -> .

    L_BRACKET       reduce using rule 84 (addvar -> .)
    SEMICOLON       reduce using rule 84 (addvar -> .)
    COMMA           reduce using rule 84 (addvar -> .)

    addvar                         shift and go to state 47

state 43

    (25) principal -> MAIN start funcChange . L_PAREN R_PAREN bloque endProc

    L_PAREN         shift and go to state 48


state 44

    (13) func -> FUNCTION tipo_func ID addfunc . L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc

    L_PAREN         shift and go to state 49


state 45

    (2) vars -> VAR tipo COLON id_list SEMICOLON .

    VAR             reduce using rule 2 (vars -> VAR tipo COLON id_list SEMICOLON .)
    FUNCTION        reduce using rule 2 (vars -> VAR tipo COLON id_list SEMICOLON .)
    MAIN            reduce using rule 2 (vars -> VAR tipo COLON id_list SEMICOLON .)
    L_BRACE         reduce using rule 2 (vars -> VAR tipo COLON id_list SEMICOLON .)


state 46

    (5) id_list -> id_list COMMA . ID addvar array

    ID              shift and go to state 50


state 47

    (6) id_list -> ID addvar . array
    (7) array -> . L_BRACKET CTE_I R_BRACKET
    (8) array -> . empty
    (81) empty -> .

    L_BRACKET       shift and go to state 52
    SEMICOLON       reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

    array                          shift and go to state 51
    empty                          shift and go to state 53

state 48

    (25) principal -> MAIN start funcChange L_PAREN . R_PAREN bloque endProc

    R_PAREN         shift and go to state 54


state 49

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN . params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc
    (21) params -> . tipo ID addvar updateParams params2
    (22) params -> . empty
    (9) tipo -> . INT current_type
    (10) tipo -> . FLOAT current_type
    (11) tipo -> . BOOL current_type
    (12) tipo -> . CHAR current_type
    (81) empty -> .

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    CHAR            shift and go to state 19
    R_PAREN         reduce using rule 81 (empty -> .)

    params                         shift and go to state 55
    tipo                           shift and go to state 56
    empty                          shift and go to state 57

state 50

    (5) id_list -> id_list COMMA ID . addvar array
    (84) addvar -> .

    L_BRACKET       reduce using rule 84 (addvar -> .)
    SEMICOLON       reduce using rule 84 (addvar -> .)
    COMMA           reduce using rule 84 (addvar -> .)

    addvar                         shift and go to state 58

state 51

    (6) id_list -> ID addvar array .

    SEMICOLON       reduce using rule 6 (id_list -> ID addvar array .)
    COMMA           reduce using rule 6 (id_list -> ID addvar array .)


state 52

    (7) array -> L_BRACKET . CTE_I R_BRACKET

    CTE_I           shift and go to state 59


state 53

    (8) array -> empty .

    SEMICOLON       reduce using rule 8 (array -> empty .)
    COMMA           reduce using rule 8 (array -> empty .)
    EQUAL           reduce using rule 8 (array -> empty .)


state 54

    (25) principal -> MAIN start funcChange L_PAREN R_PAREN . bloque endProc
    (26) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 61

    bloque                         shift and go to state 60

state 55

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN params . R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc

    R_PAREN         shift and go to state 62


state 56

    (21) params -> tipo . ID addvar updateParams params2

    ID              shift and go to state 63


state 57

    (22) params -> empty .

    R_PAREN         reduce using rule 22 (params -> empty .)


state 58

    (5) id_list -> id_list COMMA ID addvar . array
    (7) array -> . L_BRACKET CTE_I R_BRACKET
    (8) array -> . empty
    (81) empty -> .

    L_BRACKET       shift and go to state 52
    SEMICOLON       reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

    array                          shift and go to state 64
    empty                          shift and go to state 53

state 59

    (7) array -> L_BRACKET CTE_I . R_BRACKET

    R_BRACKET       shift and go to state 65


state 60

    (25) principal -> MAIN start funcChange L_PAREN R_PAREN bloque . endProc
    (113) endProc -> .

    $end            reduce using rule 113 (endProc -> .)

    endProc                        shift and go to state 66

state 61

    (26) bloque -> L_BRACE . estatuto_rep R_BRACE
    (27) estatuto_rep -> . estatuto estatuto_rep
    (28) estatuto_rep -> . empty
    (29) estatuto -> . asignacion
    (30) estatuto -> . condicion
    (31) estatuto -> . escritura
    (32) estatuto -> . llamada
    (33) estatuto -> . retorno
    (34) estatuto -> . lectura
    (35) estatuto -> . repeticion
    (36) estatuto -> . repeticion2
    (81) empty -> .
    (37) asignacion -> . ID stack_operand_id array EQUAL stack_operator expOr np_asignacion SEMICOLON
    (46) condicion -> . IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux
    (41) escritura -> . WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (39) retorno -> . RETURN L_PAREN expOr np_return R_PAREN SEMICOLON
    (40) lectura -> . READ L_PAREN ID np_read R_PAREN SEMICOLON
    (49) repeticion -> . WHILE addJump L_PAREN expOr R_PAREN GotoF bloque end_while
    (50) repeticion2 -> . FOR ID EQUAL expOr TO expOr DO bloque

    R_BRACE         reduce using rule 81 (empty -> .)
    ID              shift and go to state 78
    IF              shift and go to state 79
    WRITE           shift and go to state 80
    RETURN          shift and go to state 81
    READ            shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84

    estatuto_rep                   shift and go to state 67
    estatuto                       shift and go to state 68
    empty                          shift and go to state 69
    asignacion                     shift and go to state 70
    condicion                      shift and go to state 71
    escritura                      shift and go to state 72
    llamada                        shift and go to state 73
    retorno                        shift and go to state 74
    lectura                        shift and go to state 75
    repeticion                     shift and go to state 76
    repeticion2                    shift and go to state 77

state 62

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN . vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc
    (3) vars2 -> . vars vars2
    (4) vars2 -> . empty
    (2) vars -> . VAR tipo COLON id_list SEMICOLON
    (81) empty -> .

    VAR             shift and go to state 9
    L_BRACE         reduce using rule 81 (empty -> .)

    vars2                          shift and go to state 85
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 63

    (21) params -> tipo ID . addvar updateParams params2
    (84) addvar -> .

    COMMA           reduce using rule 84 (addvar -> .)
    R_PAREN         reduce using rule 84 (addvar -> .)

    addvar                         shift and go to state 86

state 64

    (5) id_list -> id_list COMMA ID addvar array .

    SEMICOLON       reduce using rule 5 (id_list -> id_list COMMA ID addvar array .)
    COMMA           reduce using rule 5 (id_list -> id_list COMMA ID addvar array .)


state 65

    (7) array -> L_BRACKET CTE_I R_BRACKET .

    SEMICOLON       reduce using rule 7 (array -> L_BRACKET CTE_I R_BRACKET .)
    COMMA           reduce using rule 7 (array -> L_BRACKET CTE_I R_BRACKET .)
    EQUAL           reduce using rule 7 (array -> L_BRACKET CTE_I R_BRACKET .)


state 66

    (25) principal -> MAIN start funcChange L_PAREN R_PAREN bloque endProc .

    $end            reduce using rule 25 (principal -> MAIN start funcChange L_PAREN R_PAREN bloque endProc .)


state 67

    (26) bloque -> L_BRACE estatuto_rep . R_BRACE

    R_BRACE         shift and go to state 87


state 68

    (27) estatuto_rep -> estatuto . estatuto_rep
    (27) estatuto_rep -> . estatuto estatuto_rep
    (28) estatuto_rep -> . empty
    (29) estatuto -> . asignacion
    (30) estatuto -> . condicion
    (31) estatuto -> . escritura
    (32) estatuto -> . llamada
    (33) estatuto -> . retorno
    (34) estatuto -> . lectura
    (35) estatuto -> . repeticion
    (36) estatuto -> . repeticion2
    (81) empty -> .
    (37) asignacion -> . ID stack_operand_id array EQUAL stack_operator expOr np_asignacion SEMICOLON
    (46) condicion -> . IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux
    (41) escritura -> . WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (39) retorno -> . RETURN L_PAREN expOr np_return R_PAREN SEMICOLON
    (40) lectura -> . READ L_PAREN ID np_read R_PAREN SEMICOLON
    (49) repeticion -> . WHILE addJump L_PAREN expOr R_PAREN GotoF bloque end_while
    (50) repeticion2 -> . FOR ID EQUAL expOr TO expOr DO bloque

    R_BRACE         reduce using rule 81 (empty -> .)
    ID              shift and go to state 78
    IF              shift and go to state 79
    WRITE           shift and go to state 80
    RETURN          shift and go to state 81
    READ            shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84

    estatuto                       shift and go to state 68
    estatuto_rep                   shift and go to state 88
    empty                          shift and go to state 69
    asignacion                     shift and go to state 70
    condicion                      shift and go to state 71
    escritura                      shift and go to state 72
    llamada                        shift and go to state 73
    retorno                        shift and go to state 74
    lectura                        shift and go to state 75
    repeticion                     shift and go to state 76
    repeticion2                    shift and go to state 77

state 69

    (28) estatuto_rep -> empty .

    R_BRACE         reduce using rule 28 (estatuto_rep -> empty .)


state 70

    (29) estatuto -> asignacion .

    ID              reduce using rule 29 (estatuto -> asignacion .)
    IF              reduce using rule 29 (estatuto -> asignacion .)
    WRITE           reduce using rule 29 (estatuto -> asignacion .)
    RETURN          reduce using rule 29 (estatuto -> asignacion .)
    READ            reduce using rule 29 (estatuto -> asignacion .)
    WHILE           reduce using rule 29 (estatuto -> asignacion .)
    FOR             reduce using rule 29 (estatuto -> asignacion .)
    R_BRACE         reduce using rule 29 (estatuto -> asignacion .)


state 71

    (30) estatuto -> condicion .

    ID              reduce using rule 30 (estatuto -> condicion .)
    IF              reduce using rule 30 (estatuto -> condicion .)
    WRITE           reduce using rule 30 (estatuto -> condicion .)
    RETURN          reduce using rule 30 (estatuto -> condicion .)
    READ            reduce using rule 30 (estatuto -> condicion .)
    WHILE           reduce using rule 30 (estatuto -> condicion .)
    FOR             reduce using rule 30 (estatuto -> condicion .)
    R_BRACE         reduce using rule 30 (estatuto -> condicion .)


state 72

    (31) estatuto -> escritura .

    ID              reduce using rule 31 (estatuto -> escritura .)
    IF              reduce using rule 31 (estatuto -> escritura .)
    WRITE           reduce using rule 31 (estatuto -> escritura .)
    RETURN          reduce using rule 31 (estatuto -> escritura .)
    READ            reduce using rule 31 (estatuto -> escritura .)
    WHILE           reduce using rule 31 (estatuto -> escritura .)
    FOR             reduce using rule 31 (estatuto -> escritura .)
    R_BRACE         reduce using rule 31 (estatuto -> escritura .)


state 73

    (32) estatuto -> llamada .

    ID              reduce using rule 32 (estatuto -> llamada .)
    IF              reduce using rule 32 (estatuto -> llamada .)
    WRITE           reduce using rule 32 (estatuto -> llamada .)
    RETURN          reduce using rule 32 (estatuto -> llamada .)
    READ            reduce using rule 32 (estatuto -> llamada .)
    WHILE           reduce using rule 32 (estatuto -> llamada .)
    FOR             reduce using rule 32 (estatuto -> llamada .)
    R_BRACE         reduce using rule 32 (estatuto -> llamada .)


state 74

    (33) estatuto -> retorno .

    ID              reduce using rule 33 (estatuto -> retorno .)
    IF              reduce using rule 33 (estatuto -> retorno .)
    WRITE           reduce using rule 33 (estatuto -> retorno .)
    RETURN          reduce using rule 33 (estatuto -> retorno .)
    READ            reduce using rule 33 (estatuto -> retorno .)
    WHILE           reduce using rule 33 (estatuto -> retorno .)
    FOR             reduce using rule 33 (estatuto -> retorno .)
    R_BRACE         reduce using rule 33 (estatuto -> retorno .)


state 75

    (34) estatuto -> lectura .

    ID              reduce using rule 34 (estatuto -> lectura .)
    IF              reduce using rule 34 (estatuto -> lectura .)
    WRITE           reduce using rule 34 (estatuto -> lectura .)
    RETURN          reduce using rule 34 (estatuto -> lectura .)
    READ            reduce using rule 34 (estatuto -> lectura .)
    WHILE           reduce using rule 34 (estatuto -> lectura .)
    FOR             reduce using rule 34 (estatuto -> lectura .)
    R_BRACE         reduce using rule 34 (estatuto -> lectura .)


state 76

    (35) estatuto -> repeticion .

    ID              reduce using rule 35 (estatuto -> repeticion .)
    IF              reduce using rule 35 (estatuto -> repeticion .)
    WRITE           reduce using rule 35 (estatuto -> repeticion .)
    RETURN          reduce using rule 35 (estatuto -> repeticion .)
    READ            reduce using rule 35 (estatuto -> repeticion .)
    WHILE           reduce using rule 35 (estatuto -> repeticion .)
    FOR             reduce using rule 35 (estatuto -> repeticion .)
    R_BRACE         reduce using rule 35 (estatuto -> repeticion .)


state 77

    (36) estatuto -> repeticion2 .

    ID              reduce using rule 36 (estatuto -> repeticion2 .)
    IF              reduce using rule 36 (estatuto -> repeticion2 .)
    WRITE           reduce using rule 36 (estatuto -> repeticion2 .)
    RETURN          reduce using rule 36 (estatuto -> repeticion2 .)
    READ            reduce using rule 36 (estatuto -> repeticion2 .)
    WHILE           reduce using rule 36 (estatuto -> repeticion2 .)
    FOR             reduce using rule 36 (estatuto -> repeticion2 .)
    R_BRACE         reduce using rule 36 (estatuto -> repeticion2 .)


state 78

    (37) asignacion -> ID . stack_operand_id array EQUAL stack_operator expOr np_asignacion SEMICOLON
    (38) llamada -> ID . llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (86) stack_operand_id -> .
    (97) llamadaEra -> .

    L_BRACKET       reduce using rule 86 (stack_operand_id -> .)
    EQUAL           reduce using rule 86 (stack_operand_id -> .)
    L_PAREN         reduce using rule 97 (llamadaEra -> .)

    stack_operand_id               shift and go to state 89
    llamadaEra                     shift and go to state 90

state 79

    (46) condicion -> IF . L_PAREN expOr R_PAREN GotoF THEN bloque else_aux

    L_PAREN         shift and go to state 91


state 80

    (41) escritura -> WRITE . L_PAREN escritura_rep R_PAREN SEMICOLON

    L_PAREN         shift and go to state 92


state 81

    (39) retorno -> RETURN . L_PAREN expOr np_return R_PAREN SEMICOLON

    L_PAREN         shift and go to state 93


state 82

    (40) lectura -> READ . L_PAREN ID np_read R_PAREN SEMICOLON

    L_PAREN         shift and go to state 94


state 83

    (49) repeticion -> WHILE . addJump L_PAREN expOr R_PAREN GotoF bloque end_while
    (104) addJump -> .

    L_PAREN         reduce using rule 104 (addJump -> .)

    addJump                        shift and go to state 95

state 84

    (50) repeticion2 -> FOR . ID EQUAL expOr TO expOr DO bloque

    ID              shift and go to state 96


state 85

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 . L_BRACE funcJump estatuto_rep R_BRACE endFunc

    L_BRACE         shift and go to state 97


state 86

    (21) params -> tipo ID addvar . updateParams params2
    (106) updateParams -> .

    COMMA           reduce using rule 106 (updateParams -> .)
    R_PAREN         reduce using rule 106 (updateParams -> .)

    updateParams                   shift and go to state 98

state 87

    (26) bloque -> L_BRACE estatuto_rep R_BRACE .

    $end            reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    ELSE            reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    ID              reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    IF              reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    WRITE           reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    RETURN          reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    READ            reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    WHILE           reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    FOR             reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    R_BRACE         reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)


state 88

    (27) estatuto_rep -> estatuto estatuto_rep .

    R_BRACE         reduce using rule 27 (estatuto_rep -> estatuto estatuto_rep .)


state 89

    (37) asignacion -> ID stack_operand_id . array EQUAL stack_operator expOr np_asignacion SEMICOLON
    (7) array -> . L_BRACKET CTE_I R_BRACKET
    (8) array -> . empty
    (81) empty -> .

    L_BRACKET       shift and go to state 52
    EQUAL           reduce using rule 81 (empty -> .)

    array                          shift and go to state 99
    empty                          shift and go to state 53

state 90

    (38) llamada -> ID llamadaEra . L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 100


state 91

    (46) condicion -> IF L_PAREN . expOr R_PAREN GotoF THEN bloque else_aux
    (55) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (56) expOr -> . expAnd checkAndOr
    (57) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (58) expAnd -> . expresion checkAndOr
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    expOr                          shift and go to state 102
    expAnd                         shift and go to state 103
    expresion                      shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 92

    (41) escritura -> WRITE L_PAREN . escritura_rep R_PAREN SEMICOLON
    (42) escritura_rep -> . escritura_rep COMMA escritura_aux
    (43) escritura_rep -> . escritura_aux
    (44) escritura_aux -> . CTE_S printString
    (45) escritura_aux -> . expOr np_print
    (55) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (56) expOr -> . expAnd checkAndOr
    (57) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (58) expAnd -> . expresion checkAndOr
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    CTE_S           shift and go to state 116
    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    escritura_rep                  shift and go to state 114
    escritura_aux                  shift and go to state 115
    expOr                          shift and go to state 117
    expAnd                         shift and go to state 103
    expresion                      shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 93

    (39) retorno -> RETURN L_PAREN . expOr np_return R_PAREN SEMICOLON
    (55) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (56) expOr -> . expAnd checkAndOr
    (57) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (58) expAnd -> . expresion checkAndOr
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    expOr                          shift and go to state 118
    expAnd                         shift and go to state 103
    expresion                      shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 94

    (40) lectura -> READ L_PAREN . ID np_read R_PAREN SEMICOLON

    ID              shift and go to state 119


state 95

    (49) repeticion -> WHILE addJump . L_PAREN expOr R_PAREN GotoF bloque end_while

    L_PAREN         shift and go to state 120


state 96

    (50) repeticion2 -> FOR ID . EQUAL expOr TO expOr DO bloque

    EQUAL           shift and go to state 121


state 97

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE . funcJump estatuto_rep R_BRACE endFunc
    (107) funcJump -> .

    ID              reduce using rule 107 (funcJump -> .)
    IF              reduce using rule 107 (funcJump -> .)
    WRITE           reduce using rule 107 (funcJump -> .)
    RETURN          reduce using rule 107 (funcJump -> .)
    READ            reduce using rule 107 (funcJump -> .)
    WHILE           reduce using rule 107 (funcJump -> .)
    FOR             reduce using rule 107 (funcJump -> .)
    R_BRACE         reduce using rule 107 (funcJump -> .)

    funcJump                       shift and go to state 122

state 98

    (21) params -> tipo ID addvar updateParams . params2
    (23) params2 -> . COMMA tipo ID addvar updateParams params2
    (24) params2 -> . empty
    (81) empty -> .

    COMMA           shift and go to state 124
    R_PAREN         reduce using rule 81 (empty -> .)

    params2                        shift and go to state 123
    empty                          shift and go to state 125

state 99

    (37) asignacion -> ID stack_operand_id array . EQUAL stack_operator expOr np_asignacion SEMICOLON

    EQUAL           shift and go to state 126


state 100

    (38) llamada -> ID llamadaEra L_PAREN . fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (91) fakebottom -> .

    L_PAREN         reduce using rule 91 (fakebottom -> .)
    ID              reduce using rule 91 (fakebottom -> .)
    CTE_I           reduce using rule 91 (fakebottom -> .)
    CTE_F           reduce using rule 91 (fakebottom -> .)
    CTE_CHAR        reduce using rule 91 (fakebottom -> .)
    R_PAREN         reduce using rule 91 (fakebottom -> .)

    fakebottom                     shift and go to state 127

state 101

    (74) factor -> L_PAREN . fakebottom expOr R_PAREN checkparentesis
    (91) fakebottom -> .

    L_PAREN         reduce using rule 91 (fakebottom -> .)
    ID              reduce using rule 91 (fakebottom -> .)
    CTE_I           reduce using rule 91 (fakebottom -> .)
    CTE_F           reduce using rule 91 (fakebottom -> .)
    CTE_CHAR        reduce using rule 91 (fakebottom -> .)

    fakebottom                     shift and go to state 128

state 102

    (46) condicion -> IF L_PAREN expOr . R_PAREN GotoF THEN bloque else_aux

    R_PAREN         shift and go to state 129


state 103

    (55) expOr -> expAnd . checkAndOr OR stack_operator expOr
    (56) expOr -> expAnd . checkAndOr
    (93) checkAndOr -> .

    OR              reduce using rule 93 (checkAndOr -> .)
    R_PAREN         reduce using rule 93 (checkAndOr -> .)
    COMMA           reduce using rule 93 (checkAndOr -> .)
    TO              reduce using rule 93 (checkAndOr -> .)
    SEMICOLON       reduce using rule 93 (checkAndOr -> .)
    DO              reduce using rule 93 (checkAndOr -> .)

    checkAndOr                     shift and go to state 130

state 104

    (57) expAnd -> expresion . checkAndOr AND stack_operator expAnd
    (58) expAnd -> expresion . checkAndOr
    (93) checkAndOr -> .

    AND             reduce using rule 93 (checkAndOr -> .)
    OR              reduce using rule 93 (checkAndOr -> .)
    R_PAREN         reduce using rule 93 (checkAndOr -> .)
    COMMA           reduce using rule 93 (checkAndOr -> .)
    TO              reduce using rule 93 (checkAndOr -> .)
    SEMICOLON       reduce using rule 93 (checkAndOr -> .)
    DO              reduce using rule 93 (checkAndOr -> .)

    checkAndOr                     shift and go to state 131

state 105

    (59) expresion -> exp . checkrelop relop
    (96) checkrelop -> .

    GT              reduce using rule 96 (checkrelop -> .)
    LT              reduce using rule 96 (checkrelop -> .)
    EQ              reduce using rule 96 (checkrelop -> .)
    LEQ             reduce using rule 96 (checkrelop -> .)
    GEQ             reduce using rule 96 (checkrelop -> .)
    AND             reduce using rule 96 (checkrelop -> .)
    OR              reduce using rule 96 (checkrelop -> .)
    R_PAREN         reduce using rule 96 (checkrelop -> .)
    COMMA           reduce using rule 96 (checkrelop -> .)
    TO              reduce using rule 96 (checkrelop -> .)
    SEMICOLON       reduce using rule 96 (checkrelop -> .)
    DO              reduce using rule 96 (checkrelop -> .)

    checkrelop                     shift and go to state 132

state 106

    (66) exp -> termino . checkexp masmenos
    (95) checkexp -> .

    PLUS            reduce using rule 95 (checkexp -> .)
    MINUS           reduce using rule 95 (checkexp -> .)
    GT              reduce using rule 95 (checkexp -> .)
    LT              reduce using rule 95 (checkexp -> .)
    EQ              reduce using rule 95 (checkexp -> .)
    LEQ             reduce using rule 95 (checkexp -> .)
    GEQ             reduce using rule 95 (checkexp -> .)
    AND             reduce using rule 95 (checkexp -> .)
    OR              reduce using rule 95 (checkexp -> .)
    R_PAREN         reduce using rule 95 (checkexp -> .)
    COMMA           reduce using rule 95 (checkexp -> .)
    TO              reduce using rule 95 (checkexp -> .)
    SEMICOLON       reduce using rule 95 (checkexp -> .)
    DO              reduce using rule 95 (checkexp -> .)

    checkexp                       shift and go to state 133

state 107

    (70) termino -> factor . checkterm multdiv
    (94) checkterm -> .

    MULT            reduce using rule 94 (checkterm -> .)
    DIV             reduce using rule 94 (checkterm -> .)
    PLUS            reduce using rule 94 (checkterm -> .)
    MINUS           reduce using rule 94 (checkterm -> .)
    GT              reduce using rule 94 (checkterm -> .)
    LT              reduce using rule 94 (checkterm -> .)
    EQ              reduce using rule 94 (checkterm -> .)
    LEQ             reduce using rule 94 (checkterm -> .)
    GEQ             reduce using rule 94 (checkterm -> .)
    AND             reduce using rule 94 (checkterm -> .)
    OR              reduce using rule 94 (checkterm -> .)
    R_PAREN         reduce using rule 94 (checkterm -> .)
    COMMA           reduce using rule 94 (checkterm -> .)
    TO              reduce using rule 94 (checkterm -> .)
    SEMICOLON       reduce using rule 94 (checkterm -> .)
    DO              reduce using rule 94 (checkterm -> .)

    checkterm                      shift and go to state 134

state 108

    (75) factor -> var_cte .

    MULT            reduce using rule 75 (factor -> var_cte .)
    DIV             reduce using rule 75 (factor -> var_cte .)
    PLUS            reduce using rule 75 (factor -> var_cte .)
    MINUS           reduce using rule 75 (factor -> var_cte .)
    GT              reduce using rule 75 (factor -> var_cte .)
    LT              reduce using rule 75 (factor -> var_cte .)
    EQ              reduce using rule 75 (factor -> var_cte .)
    LEQ             reduce using rule 75 (factor -> var_cte .)
    GEQ             reduce using rule 75 (factor -> var_cte .)
    AND             reduce using rule 75 (factor -> var_cte .)
    OR              reduce using rule 75 (factor -> var_cte .)
    R_PAREN         reduce using rule 75 (factor -> var_cte .)
    COMMA           reduce using rule 75 (factor -> var_cte .)
    TO              reduce using rule 75 (factor -> var_cte .)
    SEMICOLON       reduce using rule 75 (factor -> var_cte .)
    DO              reduce using rule 75 (factor -> var_cte .)


state 109

    (76) var_cte -> ID . stack_operand_id
    (38) llamada -> ID . llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (86) stack_operand_id -> .
    (97) llamadaEra -> .

    MULT            reduce using rule 86 (stack_operand_id -> .)
    DIV             reduce using rule 86 (stack_operand_id -> .)
    PLUS            reduce using rule 86 (stack_operand_id -> .)
    MINUS           reduce using rule 86 (stack_operand_id -> .)
    GT              reduce using rule 86 (stack_operand_id -> .)
    LT              reduce using rule 86 (stack_operand_id -> .)
    EQ              reduce using rule 86 (stack_operand_id -> .)
    LEQ             reduce using rule 86 (stack_operand_id -> .)
    GEQ             reduce using rule 86 (stack_operand_id -> .)
    AND             reduce using rule 86 (stack_operand_id -> .)
    OR              reduce using rule 86 (stack_operand_id -> .)
    R_PAREN         reduce using rule 86 (stack_operand_id -> .)
    COMMA           reduce using rule 86 (stack_operand_id -> .)
    TO              reduce using rule 86 (stack_operand_id -> .)
    SEMICOLON       reduce using rule 86 (stack_operand_id -> .)
    DO              reduce using rule 86 (stack_operand_id -> .)
    L_PAREN         reduce using rule 97 (llamadaEra -> .)

    stack_operand_id               shift and go to state 135
    llamadaEra                     shift and go to state 90

state 110

    (77) var_cte -> llamada .

    MULT            reduce using rule 77 (var_cte -> llamada .)
    DIV             reduce using rule 77 (var_cte -> llamada .)
    PLUS            reduce using rule 77 (var_cte -> llamada .)
    MINUS           reduce using rule 77 (var_cte -> llamada .)
    GT              reduce using rule 77 (var_cte -> llamada .)
    LT              reduce using rule 77 (var_cte -> llamada .)
    EQ              reduce using rule 77 (var_cte -> llamada .)
    LEQ             reduce using rule 77 (var_cte -> llamada .)
    GEQ             reduce using rule 77 (var_cte -> llamada .)
    AND             reduce using rule 77 (var_cte -> llamada .)
    OR              reduce using rule 77 (var_cte -> llamada .)
    R_PAREN         reduce using rule 77 (var_cte -> llamada .)
    COMMA           reduce using rule 77 (var_cte -> llamada .)
    TO              reduce using rule 77 (var_cte -> llamada .)
    SEMICOLON       reduce using rule 77 (var_cte -> llamada .)
    DO              reduce using rule 77 (var_cte -> llamada .)


state 111

    (78) var_cte -> CTE_I . stack_operand_int
    (87) stack_operand_int -> .

    MULT            reduce using rule 87 (stack_operand_int -> .)
    DIV             reduce using rule 87 (stack_operand_int -> .)
    PLUS            reduce using rule 87 (stack_operand_int -> .)
    MINUS           reduce using rule 87 (stack_operand_int -> .)
    GT              reduce using rule 87 (stack_operand_int -> .)
    LT              reduce using rule 87 (stack_operand_int -> .)
    EQ              reduce using rule 87 (stack_operand_int -> .)
    LEQ             reduce using rule 87 (stack_operand_int -> .)
    GEQ             reduce using rule 87 (stack_operand_int -> .)
    AND             reduce using rule 87 (stack_operand_int -> .)
    OR              reduce using rule 87 (stack_operand_int -> .)
    R_PAREN         reduce using rule 87 (stack_operand_int -> .)
    COMMA           reduce using rule 87 (stack_operand_int -> .)
    TO              reduce using rule 87 (stack_operand_int -> .)
    SEMICOLON       reduce using rule 87 (stack_operand_int -> .)
    DO              reduce using rule 87 (stack_operand_int -> .)

    stack_operand_int              shift and go to state 136

state 112

    (79) var_cte -> CTE_F . stack_operand_float
    (88) stack_operand_float -> .

    MULT            reduce using rule 88 (stack_operand_float -> .)
    DIV             reduce using rule 88 (stack_operand_float -> .)
    PLUS            reduce using rule 88 (stack_operand_float -> .)
    MINUS           reduce using rule 88 (stack_operand_float -> .)
    GT              reduce using rule 88 (stack_operand_float -> .)
    LT              reduce using rule 88 (stack_operand_float -> .)
    EQ              reduce using rule 88 (stack_operand_float -> .)
    LEQ             reduce using rule 88 (stack_operand_float -> .)
    GEQ             reduce using rule 88 (stack_operand_float -> .)
    AND             reduce using rule 88 (stack_operand_float -> .)
    OR              reduce using rule 88 (stack_operand_float -> .)
    R_PAREN         reduce using rule 88 (stack_operand_float -> .)
    COMMA           reduce using rule 88 (stack_operand_float -> .)
    TO              reduce using rule 88 (stack_operand_float -> .)
    SEMICOLON       reduce using rule 88 (stack_operand_float -> .)
    DO              reduce using rule 88 (stack_operand_float -> .)

    stack_operand_float            shift and go to state 137

state 113

    (80) var_cte -> CTE_CHAR . stack_operand_char
    (89) stack_operand_char -> .

    MULT            reduce using rule 89 (stack_operand_char -> .)
    DIV             reduce using rule 89 (stack_operand_char -> .)
    PLUS            reduce using rule 89 (stack_operand_char -> .)
    MINUS           reduce using rule 89 (stack_operand_char -> .)
    GT              reduce using rule 89 (stack_operand_char -> .)
    LT              reduce using rule 89 (stack_operand_char -> .)
    EQ              reduce using rule 89 (stack_operand_char -> .)
    LEQ             reduce using rule 89 (stack_operand_char -> .)
    GEQ             reduce using rule 89 (stack_operand_char -> .)
    AND             reduce using rule 89 (stack_operand_char -> .)
    OR              reduce using rule 89 (stack_operand_char -> .)
    R_PAREN         reduce using rule 89 (stack_operand_char -> .)
    COMMA           reduce using rule 89 (stack_operand_char -> .)
    TO              reduce using rule 89 (stack_operand_char -> .)
    SEMICOLON       reduce using rule 89 (stack_operand_char -> .)
    DO              reduce using rule 89 (stack_operand_char -> .)

    stack_operand_char             shift and go to state 138

state 114

    (41) escritura -> WRITE L_PAREN escritura_rep . R_PAREN SEMICOLON
    (42) escritura_rep -> escritura_rep . COMMA escritura_aux

    R_PAREN         shift and go to state 139
    COMMA           shift and go to state 140


state 115

    (43) escritura_rep -> escritura_aux .

    R_PAREN         reduce using rule 43 (escritura_rep -> escritura_aux .)
    COMMA           reduce using rule 43 (escritura_rep -> escritura_aux .)


state 116

    (44) escritura_aux -> CTE_S . printString
    (110) printString -> .

    R_PAREN         reduce using rule 110 (printString -> .)
    COMMA           reduce using rule 110 (printString -> .)

    printString                    shift and go to state 141

state 117

    (45) escritura_aux -> expOr . np_print
    (109) np_print -> .

    R_PAREN         reduce using rule 109 (np_print -> .)
    COMMA           reduce using rule 109 (np_print -> .)

    np_print                       shift and go to state 142

state 118

    (39) retorno -> RETURN L_PAREN expOr . np_return R_PAREN SEMICOLON
    (99) np_return -> .

    R_PAREN         reduce using rule 99 (np_return -> .)

    np_return                      shift and go to state 143

state 119

    (40) lectura -> READ L_PAREN ID . np_read R_PAREN SEMICOLON
    (111) np_read -> .

    R_PAREN         reduce using rule 111 (np_read -> .)

    np_read                        shift and go to state 144

state 120

    (49) repeticion -> WHILE addJump L_PAREN . expOr R_PAREN GotoF bloque end_while
    (55) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (56) expOr -> . expAnd checkAndOr
    (57) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (58) expAnd -> . expresion checkAndOr
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    expOr                          shift and go to state 145
    expAnd                         shift and go to state 103
    expresion                      shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 121

    (50) repeticion2 -> FOR ID EQUAL . expOr TO expOr DO bloque
    (55) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (56) expOr -> . expAnd checkAndOr
    (57) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (58) expAnd -> . expresion checkAndOr
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    expOr                          shift and go to state 146
    expAnd                         shift and go to state 103
    expresion                      shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 122

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump . estatuto_rep R_BRACE endFunc
    (27) estatuto_rep -> . estatuto estatuto_rep
    (28) estatuto_rep -> . empty
    (29) estatuto -> . asignacion
    (30) estatuto -> . condicion
    (31) estatuto -> . escritura
    (32) estatuto -> . llamada
    (33) estatuto -> . retorno
    (34) estatuto -> . lectura
    (35) estatuto -> . repeticion
    (36) estatuto -> . repeticion2
    (81) empty -> .
    (37) asignacion -> . ID stack_operand_id array EQUAL stack_operator expOr np_asignacion SEMICOLON
    (46) condicion -> . IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux
    (41) escritura -> . WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (39) retorno -> . RETURN L_PAREN expOr np_return R_PAREN SEMICOLON
    (40) lectura -> . READ L_PAREN ID np_read R_PAREN SEMICOLON
    (49) repeticion -> . WHILE addJump L_PAREN expOr R_PAREN GotoF bloque end_while
    (50) repeticion2 -> . FOR ID EQUAL expOr TO expOr DO bloque

    R_BRACE         reduce using rule 81 (empty -> .)
    ID              shift and go to state 78
    IF              shift and go to state 79
    WRITE           shift and go to state 80
    RETURN          shift and go to state 81
    READ            shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84

    estatuto_rep                   shift and go to state 147
    estatuto                       shift and go to state 68
    empty                          shift and go to state 69
    asignacion                     shift and go to state 70
    condicion                      shift and go to state 71
    escritura                      shift and go to state 72
    llamada                        shift and go to state 73
    retorno                        shift and go to state 74
    lectura                        shift and go to state 75
    repeticion                     shift and go to state 76
    repeticion2                    shift and go to state 77

state 123

    (21) params -> tipo ID addvar updateParams params2 .

    R_PAREN         reduce using rule 21 (params -> tipo ID addvar updateParams params2 .)


state 124

    (23) params2 -> COMMA . tipo ID addvar updateParams params2
    (9) tipo -> . INT current_type
    (10) tipo -> . FLOAT current_type
    (11) tipo -> . BOOL current_type
    (12) tipo -> . CHAR current_type

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    CHAR            shift and go to state 19

    tipo                           shift and go to state 148

state 125

    (24) params2 -> empty .

    R_PAREN         reduce using rule 24 (params2 -> empty .)


state 126

    (37) asignacion -> ID stack_operand_id array EQUAL . stack_operator expOr np_asignacion SEMICOLON
    (90) stack_operator -> .

    L_PAREN         reduce using rule 90 (stack_operator -> .)
    ID              reduce using rule 90 (stack_operator -> .)
    CTE_I           reduce using rule 90 (stack_operator -> .)
    CTE_F           reduce using rule 90 (stack_operator -> .)
    CTE_CHAR        reduce using rule 90 (stack_operator -> .)

    stack_operator                 shift and go to state 149

state 127

    (38) llamada -> ID llamadaEra L_PAREN fakebottom . parm checkParamNum R_PAREN checkparentesis Gosub
    (51) parm -> . expOr checkParam parm2
    (52) parm -> . empty
    (55) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (56) expOr -> . expAnd checkAndOr
    (81) empty -> .
    (57) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (58) expAnd -> . expresion checkAndOr
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    R_PAREN         reduce using rule 81 (empty -> .)
    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    parm                           shift and go to state 150
    expOr                          shift and go to state 151
    empty                          shift and go to state 152
    expAnd                         shift and go to state 103
    expresion                      shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 128

    (74) factor -> L_PAREN fakebottom . expOr R_PAREN checkparentesis
    (55) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (56) expOr -> . expAnd checkAndOr
    (57) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (58) expAnd -> . expresion checkAndOr
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    expOr                          shift and go to state 153
    expAnd                         shift and go to state 103
    expresion                      shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 129

    (46) condicion -> IF L_PAREN expOr R_PAREN . GotoF THEN bloque else_aux
    (100) GotoF -> .

    THEN            reduce using rule 100 (GotoF -> .)

    GotoF                          shift and go to state 154

state 130

    (55) expOr -> expAnd checkAndOr . OR stack_operator expOr
    (56) expOr -> expAnd checkAndOr .

    OR              shift and go to state 155
    R_PAREN         reduce using rule 56 (expOr -> expAnd checkAndOr .)
    COMMA           reduce using rule 56 (expOr -> expAnd checkAndOr .)
    TO              reduce using rule 56 (expOr -> expAnd checkAndOr .)
    SEMICOLON       reduce using rule 56 (expOr -> expAnd checkAndOr .)
    DO              reduce using rule 56 (expOr -> expAnd checkAndOr .)


state 131

    (57) expAnd -> expresion checkAndOr . AND stack_operator expAnd
    (58) expAnd -> expresion checkAndOr .

    AND             shift and go to state 156
    OR              reduce using rule 58 (expAnd -> expresion checkAndOr .)
    R_PAREN         reduce using rule 58 (expAnd -> expresion checkAndOr .)
    COMMA           reduce using rule 58 (expAnd -> expresion checkAndOr .)
    TO              reduce using rule 58 (expAnd -> expresion checkAndOr .)
    SEMICOLON       reduce using rule 58 (expAnd -> expresion checkAndOr .)
    DO              reduce using rule 58 (expAnd -> expresion checkAndOr .)


state 132

    (59) expresion -> exp checkrelop . relop
    (60) relop -> . GT stack_operator expresion
    (61) relop -> . LT stack_operator expresion
    (62) relop -> . EQ stack_operator expresion
    (63) relop -> . LEQ stack_operator expresion
    (64) relop -> . GEQ stack_operator expresion
    (65) relop -> . empty
    (81) empty -> .

    GT              shift and go to state 158
    LT              shift and go to state 159
    EQ              shift and go to state 160
    LEQ             shift and go to state 161
    GEQ             shift and go to state 162
    AND             reduce using rule 81 (empty -> .)
    OR              reduce using rule 81 (empty -> .)
    R_PAREN         reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)
    TO              reduce using rule 81 (empty -> .)
    SEMICOLON       reduce using rule 81 (empty -> .)
    DO              reduce using rule 81 (empty -> .)

    relop                          shift and go to state 157
    empty                          shift and go to state 163

state 133

    (66) exp -> termino checkexp . masmenos
    (67) masmenos -> . PLUS stack_operator exp
    (68) masmenos -> . MINUS stack_operator exp
    (69) masmenos -> . empty
    (81) empty -> .

    PLUS            shift and go to state 165
    MINUS           shift and go to state 166
    GT              reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    LEQ             reduce using rule 81 (empty -> .)
    GEQ             reduce using rule 81 (empty -> .)
    AND             reduce using rule 81 (empty -> .)
    OR              reduce using rule 81 (empty -> .)
    R_PAREN         reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)
    TO              reduce using rule 81 (empty -> .)
    SEMICOLON       reduce using rule 81 (empty -> .)
    DO              reduce using rule 81 (empty -> .)

    masmenos                       shift and go to state 164
    empty                          shift and go to state 167

state 134

    (70) termino -> factor checkterm . multdiv
    (71) multdiv -> . MULT stack_operator termino
    (72) multdiv -> . DIV stack_operator termino
    (73) multdiv -> . empty
    (81) empty -> .

    MULT            shift and go to state 169
    DIV             shift and go to state 170
    PLUS            reduce using rule 81 (empty -> .)
    MINUS           reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    LEQ             reduce using rule 81 (empty -> .)
    GEQ             reduce using rule 81 (empty -> .)
    AND             reduce using rule 81 (empty -> .)
    OR              reduce using rule 81 (empty -> .)
    R_PAREN         reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)
    TO              reduce using rule 81 (empty -> .)
    SEMICOLON       reduce using rule 81 (empty -> .)
    DO              reduce using rule 81 (empty -> .)

    multdiv                        shift and go to state 168
    empty                          shift and go to state 171

state 135

    (76) var_cte -> ID stack_operand_id .

    MULT            reduce using rule 76 (var_cte -> ID stack_operand_id .)
    DIV             reduce using rule 76 (var_cte -> ID stack_operand_id .)
    PLUS            reduce using rule 76 (var_cte -> ID stack_operand_id .)
    MINUS           reduce using rule 76 (var_cte -> ID stack_operand_id .)
    GT              reduce using rule 76 (var_cte -> ID stack_operand_id .)
    LT              reduce using rule 76 (var_cte -> ID stack_operand_id .)
    EQ              reduce using rule 76 (var_cte -> ID stack_operand_id .)
    LEQ             reduce using rule 76 (var_cte -> ID stack_operand_id .)
    GEQ             reduce using rule 76 (var_cte -> ID stack_operand_id .)
    AND             reduce using rule 76 (var_cte -> ID stack_operand_id .)
    OR              reduce using rule 76 (var_cte -> ID stack_operand_id .)
    R_PAREN         reduce using rule 76 (var_cte -> ID stack_operand_id .)
    COMMA           reduce using rule 76 (var_cte -> ID stack_operand_id .)
    TO              reduce using rule 76 (var_cte -> ID stack_operand_id .)
    SEMICOLON       reduce using rule 76 (var_cte -> ID stack_operand_id .)
    DO              reduce using rule 76 (var_cte -> ID stack_operand_id .)


state 136

    (78) var_cte -> CTE_I stack_operand_int .

    MULT            reduce using rule 78 (var_cte -> CTE_I stack_operand_int .)
    DIV             reduce using rule 78 (var_cte -> CTE_I stack_operand_int .)
    PLUS            reduce using rule 78 (var_cte -> CTE_I stack_operand_int .)
    MINUS           reduce using rule 78 (var_cte -> CTE_I stack_operand_int .)
    GT              reduce using rule 78 (var_cte -> CTE_I stack_operand_int .)
    LT              reduce using rule 78 (var_cte -> CTE_I stack_operand_int .)
    EQ              reduce using rule 78 (var_cte -> CTE_I stack_operand_int .)
    LEQ             reduce using rule 78 (var_cte -> CTE_I stack_operand_int .)
    GEQ             reduce using rule 78 (var_cte -> CTE_I stack_operand_int .)
    AND             reduce using rule 78 (var_cte -> CTE_I stack_operand_int .)
    OR              reduce using rule 78 (var_cte -> CTE_I stack_operand_int .)
    R_PAREN         reduce using rule 78 (var_cte -> CTE_I stack_operand_int .)
    COMMA           reduce using rule 78 (var_cte -> CTE_I stack_operand_int .)
    TO              reduce using rule 78 (var_cte -> CTE_I stack_operand_int .)
    SEMICOLON       reduce using rule 78 (var_cte -> CTE_I stack_operand_int .)
    DO              reduce using rule 78 (var_cte -> CTE_I stack_operand_int .)


state 137

    (79) var_cte -> CTE_F stack_operand_float .

    MULT            reduce using rule 79 (var_cte -> CTE_F stack_operand_float .)
    DIV             reduce using rule 79 (var_cte -> CTE_F stack_operand_float .)
    PLUS            reduce using rule 79 (var_cte -> CTE_F stack_operand_float .)
    MINUS           reduce using rule 79 (var_cte -> CTE_F stack_operand_float .)
    GT              reduce using rule 79 (var_cte -> CTE_F stack_operand_float .)
    LT              reduce using rule 79 (var_cte -> CTE_F stack_operand_float .)
    EQ              reduce using rule 79 (var_cte -> CTE_F stack_operand_float .)
    LEQ             reduce using rule 79 (var_cte -> CTE_F stack_operand_float .)
    GEQ             reduce using rule 79 (var_cte -> CTE_F stack_operand_float .)
    AND             reduce using rule 79 (var_cte -> CTE_F stack_operand_float .)
    OR              reduce using rule 79 (var_cte -> CTE_F stack_operand_float .)
    R_PAREN         reduce using rule 79 (var_cte -> CTE_F stack_operand_float .)
    COMMA           reduce using rule 79 (var_cte -> CTE_F stack_operand_float .)
    TO              reduce using rule 79 (var_cte -> CTE_F stack_operand_float .)
    SEMICOLON       reduce using rule 79 (var_cte -> CTE_F stack_operand_float .)
    DO              reduce using rule 79 (var_cte -> CTE_F stack_operand_float .)


state 138

    (80) var_cte -> CTE_CHAR stack_operand_char .

    MULT            reduce using rule 80 (var_cte -> CTE_CHAR stack_operand_char .)
    DIV             reduce using rule 80 (var_cte -> CTE_CHAR stack_operand_char .)
    PLUS            reduce using rule 80 (var_cte -> CTE_CHAR stack_operand_char .)
    MINUS           reduce using rule 80 (var_cte -> CTE_CHAR stack_operand_char .)
    GT              reduce using rule 80 (var_cte -> CTE_CHAR stack_operand_char .)
    LT              reduce using rule 80 (var_cte -> CTE_CHAR stack_operand_char .)
    EQ              reduce using rule 80 (var_cte -> CTE_CHAR stack_operand_char .)
    LEQ             reduce using rule 80 (var_cte -> CTE_CHAR stack_operand_char .)
    GEQ             reduce using rule 80 (var_cte -> CTE_CHAR stack_operand_char .)
    AND             reduce using rule 80 (var_cte -> CTE_CHAR stack_operand_char .)
    OR              reduce using rule 80 (var_cte -> CTE_CHAR stack_operand_char .)
    R_PAREN         reduce using rule 80 (var_cte -> CTE_CHAR stack_operand_char .)
    COMMA           reduce using rule 80 (var_cte -> CTE_CHAR stack_operand_char .)
    TO              reduce using rule 80 (var_cte -> CTE_CHAR stack_operand_char .)
    SEMICOLON       reduce using rule 80 (var_cte -> CTE_CHAR stack_operand_char .)
    DO              reduce using rule 80 (var_cte -> CTE_CHAR stack_operand_char .)


state 139

    (41) escritura -> WRITE L_PAREN escritura_rep R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 172


state 140

    (42) escritura_rep -> escritura_rep COMMA . escritura_aux
    (44) escritura_aux -> . CTE_S printString
    (45) escritura_aux -> . expOr np_print
    (55) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (56) expOr -> . expAnd checkAndOr
    (57) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (58) expAnd -> . expresion checkAndOr
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    CTE_S           shift and go to state 116
    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    escritura_aux                  shift and go to state 173
    expOr                          shift and go to state 117
    expAnd                         shift and go to state 103
    expresion                      shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 141

    (44) escritura_aux -> CTE_S printString .

    R_PAREN         reduce using rule 44 (escritura_aux -> CTE_S printString .)
    COMMA           reduce using rule 44 (escritura_aux -> CTE_S printString .)


state 142

    (45) escritura_aux -> expOr np_print .

    R_PAREN         reduce using rule 45 (escritura_aux -> expOr np_print .)
    COMMA           reduce using rule 45 (escritura_aux -> expOr np_print .)


state 143

    (39) retorno -> RETURN L_PAREN expOr np_return . R_PAREN SEMICOLON

    R_PAREN         shift and go to state 174


state 144

    (40) lectura -> READ L_PAREN ID np_read . R_PAREN SEMICOLON

    R_PAREN         shift and go to state 175


state 145

    (49) repeticion -> WHILE addJump L_PAREN expOr . R_PAREN GotoF bloque end_while

    R_PAREN         shift and go to state 176


state 146

    (50) repeticion2 -> FOR ID EQUAL expOr . TO expOr DO bloque

    TO              shift and go to state 177


state 147

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep . R_BRACE endFunc

    R_BRACE         shift and go to state 178


state 148

    (23) params2 -> COMMA tipo . ID addvar updateParams params2

    ID              shift and go to state 179


state 149

    (37) asignacion -> ID stack_operand_id array EQUAL stack_operator . expOr np_asignacion SEMICOLON
    (55) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (56) expOr -> . expAnd checkAndOr
    (57) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (58) expAnd -> . expresion checkAndOr
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    expOr                          shift and go to state 180
    expAnd                         shift and go to state 103
    expresion                      shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 150

    (38) llamada -> ID llamadaEra L_PAREN fakebottom parm . checkParamNum R_PAREN checkparentesis Gosub
    (115) checkParamNum -> .

    R_PAREN         reduce using rule 115 (checkParamNum -> .)

    checkParamNum                  shift and go to state 181

state 151

    (51) parm -> expOr . checkParam parm2
    (114) checkParam -> .

    COMMA           reduce using rule 114 (checkParam -> .)
    R_PAREN         reduce using rule 114 (checkParam -> .)

    checkParam                     shift and go to state 182

state 152

    (52) parm -> empty .

    R_PAREN         reduce using rule 52 (parm -> empty .)


state 153

    (74) factor -> L_PAREN fakebottom expOr . R_PAREN checkparentesis

    R_PAREN         shift and go to state 183


state 154

    (46) condicion -> IF L_PAREN expOr R_PAREN GotoF . THEN bloque else_aux

    THEN            shift and go to state 184


state 155

    (55) expOr -> expAnd checkAndOr OR . stack_operator expOr
    (90) stack_operator -> .

    L_PAREN         reduce using rule 90 (stack_operator -> .)
    ID              reduce using rule 90 (stack_operator -> .)
    CTE_I           reduce using rule 90 (stack_operator -> .)
    CTE_F           reduce using rule 90 (stack_operator -> .)
    CTE_CHAR        reduce using rule 90 (stack_operator -> .)

    stack_operator                 shift and go to state 185

state 156

    (57) expAnd -> expresion checkAndOr AND . stack_operator expAnd
    (90) stack_operator -> .

    L_PAREN         reduce using rule 90 (stack_operator -> .)
    ID              reduce using rule 90 (stack_operator -> .)
    CTE_I           reduce using rule 90 (stack_operator -> .)
    CTE_F           reduce using rule 90 (stack_operator -> .)
    CTE_CHAR        reduce using rule 90 (stack_operator -> .)

    stack_operator                 shift and go to state 186

state 157

    (59) expresion -> exp checkrelop relop .

    AND             reduce using rule 59 (expresion -> exp checkrelop relop .)
    OR              reduce using rule 59 (expresion -> exp checkrelop relop .)
    R_PAREN         reduce using rule 59 (expresion -> exp checkrelop relop .)
    COMMA           reduce using rule 59 (expresion -> exp checkrelop relop .)
    TO              reduce using rule 59 (expresion -> exp checkrelop relop .)
    SEMICOLON       reduce using rule 59 (expresion -> exp checkrelop relop .)
    DO              reduce using rule 59 (expresion -> exp checkrelop relop .)


state 158

    (60) relop -> GT . stack_operator expresion
    (90) stack_operator -> .

    L_PAREN         reduce using rule 90 (stack_operator -> .)
    ID              reduce using rule 90 (stack_operator -> .)
    CTE_I           reduce using rule 90 (stack_operator -> .)
    CTE_F           reduce using rule 90 (stack_operator -> .)
    CTE_CHAR        reduce using rule 90 (stack_operator -> .)

    stack_operator                 shift and go to state 187

state 159

    (61) relop -> LT . stack_operator expresion
    (90) stack_operator -> .

    L_PAREN         reduce using rule 90 (stack_operator -> .)
    ID              reduce using rule 90 (stack_operator -> .)
    CTE_I           reduce using rule 90 (stack_operator -> .)
    CTE_F           reduce using rule 90 (stack_operator -> .)
    CTE_CHAR        reduce using rule 90 (stack_operator -> .)

    stack_operator                 shift and go to state 188

state 160

    (62) relop -> EQ . stack_operator expresion
    (90) stack_operator -> .

    L_PAREN         reduce using rule 90 (stack_operator -> .)
    ID              reduce using rule 90 (stack_operator -> .)
    CTE_I           reduce using rule 90 (stack_operator -> .)
    CTE_F           reduce using rule 90 (stack_operator -> .)
    CTE_CHAR        reduce using rule 90 (stack_operator -> .)

    stack_operator                 shift and go to state 189

state 161

    (63) relop -> LEQ . stack_operator expresion
    (90) stack_operator -> .

    L_PAREN         reduce using rule 90 (stack_operator -> .)
    ID              reduce using rule 90 (stack_operator -> .)
    CTE_I           reduce using rule 90 (stack_operator -> .)
    CTE_F           reduce using rule 90 (stack_operator -> .)
    CTE_CHAR        reduce using rule 90 (stack_operator -> .)

    stack_operator                 shift and go to state 190

state 162

    (64) relop -> GEQ . stack_operator expresion
    (90) stack_operator -> .

    L_PAREN         reduce using rule 90 (stack_operator -> .)
    ID              reduce using rule 90 (stack_operator -> .)
    CTE_I           reduce using rule 90 (stack_operator -> .)
    CTE_F           reduce using rule 90 (stack_operator -> .)
    CTE_CHAR        reduce using rule 90 (stack_operator -> .)

    stack_operator                 shift and go to state 191

state 163

    (65) relop -> empty .

    AND             reduce using rule 65 (relop -> empty .)
    OR              reduce using rule 65 (relop -> empty .)
    R_PAREN         reduce using rule 65 (relop -> empty .)
    COMMA           reduce using rule 65 (relop -> empty .)
    TO              reduce using rule 65 (relop -> empty .)
    SEMICOLON       reduce using rule 65 (relop -> empty .)
    DO              reduce using rule 65 (relop -> empty .)


state 164

    (66) exp -> termino checkexp masmenos .

    GT              reduce using rule 66 (exp -> termino checkexp masmenos .)
    LT              reduce using rule 66 (exp -> termino checkexp masmenos .)
    EQ              reduce using rule 66 (exp -> termino checkexp masmenos .)
    LEQ             reduce using rule 66 (exp -> termino checkexp masmenos .)
    GEQ             reduce using rule 66 (exp -> termino checkexp masmenos .)
    AND             reduce using rule 66 (exp -> termino checkexp masmenos .)
    OR              reduce using rule 66 (exp -> termino checkexp masmenos .)
    R_PAREN         reduce using rule 66 (exp -> termino checkexp masmenos .)
    COMMA           reduce using rule 66 (exp -> termino checkexp masmenos .)
    TO              reduce using rule 66 (exp -> termino checkexp masmenos .)
    SEMICOLON       reduce using rule 66 (exp -> termino checkexp masmenos .)
    DO              reduce using rule 66 (exp -> termino checkexp masmenos .)


state 165

    (67) masmenos -> PLUS . stack_operator exp
    (90) stack_operator -> .

    L_PAREN         reduce using rule 90 (stack_operator -> .)
    ID              reduce using rule 90 (stack_operator -> .)
    CTE_I           reduce using rule 90 (stack_operator -> .)
    CTE_F           reduce using rule 90 (stack_operator -> .)
    CTE_CHAR        reduce using rule 90 (stack_operator -> .)

    stack_operator                 shift and go to state 192

state 166

    (68) masmenos -> MINUS . stack_operator exp
    (90) stack_operator -> .

    L_PAREN         reduce using rule 90 (stack_operator -> .)
    ID              reduce using rule 90 (stack_operator -> .)
    CTE_I           reduce using rule 90 (stack_operator -> .)
    CTE_F           reduce using rule 90 (stack_operator -> .)
    CTE_CHAR        reduce using rule 90 (stack_operator -> .)

    stack_operator                 shift and go to state 193

state 167

    (69) masmenos -> empty .

    GT              reduce using rule 69 (masmenos -> empty .)
    LT              reduce using rule 69 (masmenos -> empty .)
    EQ              reduce using rule 69 (masmenos -> empty .)
    LEQ             reduce using rule 69 (masmenos -> empty .)
    GEQ             reduce using rule 69 (masmenos -> empty .)
    AND             reduce using rule 69 (masmenos -> empty .)
    OR              reduce using rule 69 (masmenos -> empty .)
    R_PAREN         reduce using rule 69 (masmenos -> empty .)
    COMMA           reduce using rule 69 (masmenos -> empty .)
    TO              reduce using rule 69 (masmenos -> empty .)
    SEMICOLON       reduce using rule 69 (masmenos -> empty .)
    DO              reduce using rule 69 (masmenos -> empty .)


state 168

    (70) termino -> factor checkterm multdiv .

    PLUS            reduce using rule 70 (termino -> factor checkterm multdiv .)
    MINUS           reduce using rule 70 (termino -> factor checkterm multdiv .)
    GT              reduce using rule 70 (termino -> factor checkterm multdiv .)
    LT              reduce using rule 70 (termino -> factor checkterm multdiv .)
    EQ              reduce using rule 70 (termino -> factor checkterm multdiv .)
    LEQ             reduce using rule 70 (termino -> factor checkterm multdiv .)
    GEQ             reduce using rule 70 (termino -> factor checkterm multdiv .)
    AND             reduce using rule 70 (termino -> factor checkterm multdiv .)
    OR              reduce using rule 70 (termino -> factor checkterm multdiv .)
    R_PAREN         reduce using rule 70 (termino -> factor checkterm multdiv .)
    COMMA           reduce using rule 70 (termino -> factor checkterm multdiv .)
    TO              reduce using rule 70 (termino -> factor checkterm multdiv .)
    SEMICOLON       reduce using rule 70 (termino -> factor checkterm multdiv .)
    DO              reduce using rule 70 (termino -> factor checkterm multdiv .)


state 169

    (71) multdiv -> MULT . stack_operator termino
    (90) stack_operator -> .

    L_PAREN         reduce using rule 90 (stack_operator -> .)
    ID              reduce using rule 90 (stack_operator -> .)
    CTE_I           reduce using rule 90 (stack_operator -> .)
    CTE_F           reduce using rule 90 (stack_operator -> .)
    CTE_CHAR        reduce using rule 90 (stack_operator -> .)

    stack_operator                 shift and go to state 194

state 170

    (72) multdiv -> DIV . stack_operator termino
    (90) stack_operator -> .

    L_PAREN         reduce using rule 90 (stack_operator -> .)
    ID              reduce using rule 90 (stack_operator -> .)
    CTE_I           reduce using rule 90 (stack_operator -> .)
    CTE_F           reduce using rule 90 (stack_operator -> .)
    CTE_CHAR        reduce using rule 90 (stack_operator -> .)

    stack_operator                 shift and go to state 195

state 171

    (73) multdiv -> empty .

    PLUS            reduce using rule 73 (multdiv -> empty .)
    MINUS           reduce using rule 73 (multdiv -> empty .)
    GT              reduce using rule 73 (multdiv -> empty .)
    LT              reduce using rule 73 (multdiv -> empty .)
    EQ              reduce using rule 73 (multdiv -> empty .)
    LEQ             reduce using rule 73 (multdiv -> empty .)
    GEQ             reduce using rule 73 (multdiv -> empty .)
    AND             reduce using rule 73 (multdiv -> empty .)
    OR              reduce using rule 73 (multdiv -> empty .)
    R_PAREN         reduce using rule 73 (multdiv -> empty .)
    COMMA           reduce using rule 73 (multdiv -> empty .)
    TO              reduce using rule 73 (multdiv -> empty .)
    SEMICOLON       reduce using rule 73 (multdiv -> empty .)
    DO              reduce using rule 73 (multdiv -> empty .)


state 172

    (41) escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .

    ID              reduce using rule 41 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    IF              reduce using rule 41 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    WRITE           reduce using rule 41 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    RETURN          reduce using rule 41 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    READ            reduce using rule 41 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    WHILE           reduce using rule 41 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    FOR             reduce using rule 41 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    R_BRACE         reduce using rule 41 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)


state 173

    (42) escritura_rep -> escritura_rep COMMA escritura_aux .

    R_PAREN         reduce using rule 42 (escritura_rep -> escritura_rep COMMA escritura_aux .)
    COMMA           reduce using rule 42 (escritura_rep -> escritura_rep COMMA escritura_aux .)


state 174

    (39) retorno -> RETURN L_PAREN expOr np_return R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 196


state 175

    (40) lectura -> READ L_PAREN ID np_read R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 197


state 176

    (49) repeticion -> WHILE addJump L_PAREN expOr R_PAREN . GotoF bloque end_while
    (100) GotoF -> .

    L_BRACE         reduce using rule 100 (GotoF -> .)

    GotoF                          shift and go to state 198

state 177

    (50) repeticion2 -> FOR ID EQUAL expOr TO . expOr DO bloque
    (55) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (56) expOr -> . expAnd checkAndOr
    (57) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (58) expAnd -> . expresion checkAndOr
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    expOr                          shift and go to state 199
    expAnd                         shift and go to state 103
    expresion                      shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 178

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE . endFunc
    (105) endFunc -> .

    FUNCTION        reduce using rule 105 (endFunc -> .)
    MAIN            reduce using rule 105 (endFunc -> .)

    endFunc                        shift and go to state 200

state 179

    (23) params2 -> COMMA tipo ID . addvar updateParams params2
    (84) addvar -> .

    COMMA           reduce using rule 84 (addvar -> .)
    R_PAREN         reduce using rule 84 (addvar -> .)

    addvar                         shift and go to state 201

state 180

    (37) asignacion -> ID stack_operand_id array EQUAL stack_operator expOr . np_asignacion SEMICOLON
    (98) np_asignacion -> .

    SEMICOLON       reduce using rule 98 (np_asignacion -> .)

    np_asignacion                  shift and go to state 202

state 181

    (38) llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum . R_PAREN checkparentesis Gosub

    R_PAREN         shift and go to state 203


state 182

    (51) parm -> expOr checkParam . parm2
    (53) parm2 -> . COMMA expOr checkParam parm2
    (54) parm2 -> . empty
    (81) empty -> .

    COMMA           shift and go to state 205
    R_PAREN         reduce using rule 81 (empty -> .)

    parm2                          shift and go to state 204
    empty                          shift and go to state 206

state 183

    (74) factor -> L_PAREN fakebottom expOr R_PAREN . checkparentesis
    (92) checkparentesis -> .

    MULT            reduce using rule 92 (checkparentesis -> .)
    DIV             reduce using rule 92 (checkparentesis -> .)
    PLUS            reduce using rule 92 (checkparentesis -> .)
    MINUS           reduce using rule 92 (checkparentesis -> .)
    GT              reduce using rule 92 (checkparentesis -> .)
    LT              reduce using rule 92 (checkparentesis -> .)
    EQ              reduce using rule 92 (checkparentesis -> .)
    LEQ             reduce using rule 92 (checkparentesis -> .)
    GEQ             reduce using rule 92 (checkparentesis -> .)
    AND             reduce using rule 92 (checkparentesis -> .)
    OR              reduce using rule 92 (checkparentesis -> .)
    R_PAREN         reduce using rule 92 (checkparentesis -> .)
    COMMA           reduce using rule 92 (checkparentesis -> .)
    TO              reduce using rule 92 (checkparentesis -> .)
    SEMICOLON       reduce using rule 92 (checkparentesis -> .)
    DO              reduce using rule 92 (checkparentesis -> .)

    checkparentesis                shift and go to state 207

state 184

    (46) condicion -> IF L_PAREN expOr R_PAREN GotoF THEN . bloque else_aux
    (26) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 61

    bloque                         shift and go to state 208

state 185

    (55) expOr -> expAnd checkAndOr OR stack_operator . expOr
    (55) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (56) expOr -> . expAnd checkAndOr
    (57) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (58) expAnd -> . expresion checkAndOr
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    expAnd                         shift and go to state 103
    expOr                          shift and go to state 209
    expresion                      shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 186

    (57) expAnd -> expresion checkAndOr AND stack_operator . expAnd
    (57) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (58) expAnd -> . expresion checkAndOr
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    expresion                      shift and go to state 104
    expAnd                         shift and go to state 210
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 187

    (60) relop -> GT stack_operator . expresion
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    expresion                      shift and go to state 211
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 188

    (61) relop -> LT stack_operator . expresion
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    expresion                      shift and go to state 212
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 189

    (62) relop -> EQ stack_operator . expresion
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    expresion                      shift and go to state 213
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 190

    (63) relop -> LEQ stack_operator . expresion
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    expresion                      shift and go to state 214
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 191

    (64) relop -> GEQ stack_operator . expresion
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    expresion                      shift and go to state 215
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 192

    (67) masmenos -> PLUS stack_operator . exp
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    exp                            shift and go to state 216
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 193

    (68) masmenos -> MINUS stack_operator . exp
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    exp                            shift and go to state 217
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 194

    (71) multdiv -> MULT stack_operator . termino
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    termino                        shift and go to state 218
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 195

    (72) multdiv -> DIV stack_operator . termino
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    termino                        shift and go to state 219
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 196

    (39) retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .

    ID              reduce using rule 39 (retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .)
    IF              reduce using rule 39 (retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .)
    WRITE           reduce using rule 39 (retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .)
    RETURN          reduce using rule 39 (retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .)
    READ            reduce using rule 39 (retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .)
    WHILE           reduce using rule 39 (retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .)
    FOR             reduce using rule 39 (retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .)
    R_BRACE         reduce using rule 39 (retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .)


state 197

    (40) lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .

    ID              reduce using rule 40 (lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .)
    IF              reduce using rule 40 (lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .)
    WRITE           reduce using rule 40 (lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .)
    RETURN          reduce using rule 40 (lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .)
    READ            reduce using rule 40 (lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .)
    WHILE           reduce using rule 40 (lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .)
    FOR             reduce using rule 40 (lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .)
    R_BRACE         reduce using rule 40 (lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .)


state 198

    (49) repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF . bloque end_while
    (26) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 61

    bloque                         shift and go to state 220

state 199

    (50) repeticion2 -> FOR ID EQUAL expOr TO expOr . DO bloque

    DO              shift and go to state 221


state 200

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc .

    FUNCTION        reduce using rule 13 (func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc .)
    MAIN            reduce using rule 13 (func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc .)


state 201

    (23) params2 -> COMMA tipo ID addvar . updateParams params2
    (106) updateParams -> .

    COMMA           reduce using rule 106 (updateParams -> .)
    R_PAREN         reduce using rule 106 (updateParams -> .)

    updateParams                   shift and go to state 222

state 202

    (37) asignacion -> ID stack_operand_id array EQUAL stack_operator expOr np_asignacion . SEMICOLON

    SEMICOLON       shift and go to state 223


state 203

    (38) llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN . checkparentesis Gosub
    (92) checkparentesis -> .

    ID              reduce using rule 92 (checkparentesis -> .)
    IF              reduce using rule 92 (checkparentesis -> .)
    WRITE           reduce using rule 92 (checkparentesis -> .)
    RETURN          reduce using rule 92 (checkparentesis -> .)
    READ            reduce using rule 92 (checkparentesis -> .)
    WHILE           reduce using rule 92 (checkparentesis -> .)
    FOR             reduce using rule 92 (checkparentesis -> .)
    R_BRACE         reduce using rule 92 (checkparentesis -> .)
    MULT            reduce using rule 92 (checkparentesis -> .)
    DIV             reduce using rule 92 (checkparentesis -> .)
    PLUS            reduce using rule 92 (checkparentesis -> .)
    MINUS           reduce using rule 92 (checkparentesis -> .)
    GT              reduce using rule 92 (checkparentesis -> .)
    LT              reduce using rule 92 (checkparentesis -> .)
    EQ              reduce using rule 92 (checkparentesis -> .)
    LEQ             reduce using rule 92 (checkparentesis -> .)
    GEQ             reduce using rule 92 (checkparentesis -> .)
    AND             reduce using rule 92 (checkparentesis -> .)
    OR              reduce using rule 92 (checkparentesis -> .)
    R_PAREN         reduce using rule 92 (checkparentesis -> .)
    COMMA           reduce using rule 92 (checkparentesis -> .)
    TO              reduce using rule 92 (checkparentesis -> .)
    SEMICOLON       reduce using rule 92 (checkparentesis -> .)
    DO              reduce using rule 92 (checkparentesis -> .)

    checkparentesis                shift and go to state 224

state 204

    (51) parm -> expOr checkParam parm2 .

    R_PAREN         reduce using rule 51 (parm -> expOr checkParam parm2 .)


state 205

    (53) parm2 -> COMMA . expOr checkParam parm2
    (55) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (56) expOr -> . expAnd checkAndOr
    (57) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (58) expAnd -> . expresion checkAndOr
    (59) expresion -> . exp checkrelop relop
    (66) exp -> . termino checkexp masmenos
    (70) termino -> . factor checkterm multdiv
    (74) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (75) factor -> . var_cte
    (76) var_cte -> . ID stack_operand_id
    (77) var_cte -> . llamada
    (78) var_cte -> . CTE_I stack_operand_int
    (79) var_cte -> . CTE_F stack_operand_float
    (80) var_cte -> . CTE_CHAR stack_operand_char
    (38) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 101
    ID              shift and go to state 109
    CTE_I           shift and go to state 111
    CTE_F           shift and go to state 112
    CTE_CHAR        shift and go to state 113

    expOr                          shift and go to state 225
    expAnd                         shift and go to state 103
    expresion                      shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    var_cte                        shift and go to state 108
    llamada                        shift and go to state 110

state 206

    (54) parm2 -> empty .

    R_PAREN         reduce using rule 54 (parm2 -> empty .)


state 207

    (74) factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .

    MULT            reduce using rule 74 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    DIV             reduce using rule 74 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    PLUS            reduce using rule 74 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    MINUS           reduce using rule 74 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    GT              reduce using rule 74 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    LT              reduce using rule 74 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    EQ              reduce using rule 74 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    LEQ             reduce using rule 74 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    GEQ             reduce using rule 74 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    AND             reduce using rule 74 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    OR              reduce using rule 74 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    R_PAREN         reduce using rule 74 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    COMMA           reduce using rule 74 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    TO              reduce using rule 74 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    SEMICOLON       reduce using rule 74 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    DO              reduce using rule 74 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)


state 208

    (46) condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque . else_aux
    (47) else_aux -> . ELSE Goto bloque end_if
    (48) else_aux -> . end_if
    (102) end_if -> .

    ELSE            shift and go to state 227
    ID              reduce using rule 102 (end_if -> .)
    IF              reduce using rule 102 (end_if -> .)
    WRITE           reduce using rule 102 (end_if -> .)
    RETURN          reduce using rule 102 (end_if -> .)
    READ            reduce using rule 102 (end_if -> .)
    WHILE           reduce using rule 102 (end_if -> .)
    FOR             reduce using rule 102 (end_if -> .)
    R_BRACE         reduce using rule 102 (end_if -> .)

    else_aux                       shift and go to state 226
    end_if                         shift and go to state 228

state 209

    (55) expOr -> expAnd checkAndOr OR stack_operator expOr .

    R_PAREN         reduce using rule 55 (expOr -> expAnd checkAndOr OR stack_operator expOr .)
    COMMA           reduce using rule 55 (expOr -> expAnd checkAndOr OR stack_operator expOr .)
    TO              reduce using rule 55 (expOr -> expAnd checkAndOr OR stack_operator expOr .)
    SEMICOLON       reduce using rule 55 (expOr -> expAnd checkAndOr OR stack_operator expOr .)
    DO              reduce using rule 55 (expOr -> expAnd checkAndOr OR stack_operator expOr .)


state 210

    (57) expAnd -> expresion checkAndOr AND stack_operator expAnd .

    OR              reduce using rule 57 (expAnd -> expresion checkAndOr AND stack_operator expAnd .)
    R_PAREN         reduce using rule 57 (expAnd -> expresion checkAndOr AND stack_operator expAnd .)
    COMMA           reduce using rule 57 (expAnd -> expresion checkAndOr AND stack_operator expAnd .)
    TO              reduce using rule 57 (expAnd -> expresion checkAndOr AND stack_operator expAnd .)
    SEMICOLON       reduce using rule 57 (expAnd -> expresion checkAndOr AND stack_operator expAnd .)
    DO              reduce using rule 57 (expAnd -> expresion checkAndOr AND stack_operator expAnd .)


state 211

    (60) relop -> GT stack_operator expresion .

    AND             reduce using rule 60 (relop -> GT stack_operator expresion .)
    OR              reduce using rule 60 (relop -> GT stack_operator expresion .)
    R_PAREN         reduce using rule 60 (relop -> GT stack_operator expresion .)
    COMMA           reduce using rule 60 (relop -> GT stack_operator expresion .)
    TO              reduce using rule 60 (relop -> GT stack_operator expresion .)
    SEMICOLON       reduce using rule 60 (relop -> GT stack_operator expresion .)
    DO              reduce using rule 60 (relop -> GT stack_operator expresion .)


state 212

    (61) relop -> LT stack_operator expresion .

    AND             reduce using rule 61 (relop -> LT stack_operator expresion .)
    OR              reduce using rule 61 (relop -> LT stack_operator expresion .)
    R_PAREN         reduce using rule 61 (relop -> LT stack_operator expresion .)
    COMMA           reduce using rule 61 (relop -> LT stack_operator expresion .)
    TO              reduce using rule 61 (relop -> LT stack_operator expresion .)
    SEMICOLON       reduce using rule 61 (relop -> LT stack_operator expresion .)
    DO              reduce using rule 61 (relop -> LT stack_operator expresion .)


state 213

    (62) relop -> EQ stack_operator expresion .

    AND             reduce using rule 62 (relop -> EQ stack_operator expresion .)
    OR              reduce using rule 62 (relop -> EQ stack_operator expresion .)
    R_PAREN         reduce using rule 62 (relop -> EQ stack_operator expresion .)
    COMMA           reduce using rule 62 (relop -> EQ stack_operator expresion .)
    TO              reduce using rule 62 (relop -> EQ stack_operator expresion .)
    SEMICOLON       reduce using rule 62 (relop -> EQ stack_operator expresion .)
    DO              reduce using rule 62 (relop -> EQ stack_operator expresion .)


state 214

    (63) relop -> LEQ stack_operator expresion .

    AND             reduce using rule 63 (relop -> LEQ stack_operator expresion .)
    OR              reduce using rule 63 (relop -> LEQ stack_operator expresion .)
    R_PAREN         reduce using rule 63 (relop -> LEQ stack_operator expresion .)
    COMMA           reduce using rule 63 (relop -> LEQ stack_operator expresion .)
    TO              reduce using rule 63 (relop -> LEQ stack_operator expresion .)
    SEMICOLON       reduce using rule 63 (relop -> LEQ stack_operator expresion .)
    DO              reduce using rule 63 (relop -> LEQ stack_operator expresion .)


state 215

    (64) relop -> GEQ stack_operator expresion .

    AND             reduce using rule 64 (relop -> GEQ stack_operator expresion .)
    OR              reduce using rule 64 (relop -> GEQ stack_operator expresion .)
    R_PAREN         reduce using rule 64 (relop -> GEQ stack_operator expresion .)
    COMMA           reduce using rule 64 (relop -> GEQ stack_operator expresion .)
    TO              reduce using rule 64 (relop -> GEQ stack_operator expresion .)
    SEMICOLON       reduce using rule 64 (relop -> GEQ stack_operator expresion .)
    DO              reduce using rule 64 (relop -> GEQ stack_operator expresion .)


state 216

    (67) masmenos -> PLUS stack_operator exp .

    GT              reduce using rule 67 (masmenos -> PLUS stack_operator exp .)
    LT              reduce using rule 67 (masmenos -> PLUS stack_operator exp .)
    EQ              reduce using rule 67 (masmenos -> PLUS stack_operator exp .)
    LEQ             reduce using rule 67 (masmenos -> PLUS stack_operator exp .)
    GEQ             reduce using rule 67 (masmenos -> PLUS stack_operator exp .)
    AND             reduce using rule 67 (masmenos -> PLUS stack_operator exp .)
    OR              reduce using rule 67 (masmenos -> PLUS stack_operator exp .)
    R_PAREN         reduce using rule 67 (masmenos -> PLUS stack_operator exp .)
    COMMA           reduce using rule 67 (masmenos -> PLUS stack_operator exp .)
    TO              reduce using rule 67 (masmenos -> PLUS stack_operator exp .)
    SEMICOLON       reduce using rule 67 (masmenos -> PLUS stack_operator exp .)
    DO              reduce using rule 67 (masmenos -> PLUS stack_operator exp .)


state 217

    (68) masmenos -> MINUS stack_operator exp .

    GT              reduce using rule 68 (masmenos -> MINUS stack_operator exp .)
    LT              reduce using rule 68 (masmenos -> MINUS stack_operator exp .)
    EQ              reduce using rule 68 (masmenos -> MINUS stack_operator exp .)
    LEQ             reduce using rule 68 (masmenos -> MINUS stack_operator exp .)
    GEQ             reduce using rule 68 (masmenos -> MINUS stack_operator exp .)
    AND             reduce using rule 68 (masmenos -> MINUS stack_operator exp .)
    OR              reduce using rule 68 (masmenos -> MINUS stack_operator exp .)
    R_PAREN         reduce using rule 68 (masmenos -> MINUS stack_operator exp .)
    COMMA           reduce using rule 68 (masmenos -> MINUS stack_operator exp .)
    TO              reduce using rule 68 (masmenos -> MINUS stack_operator exp .)
    SEMICOLON       reduce using rule 68 (masmenos -> MINUS stack_operator exp .)
    DO              reduce using rule 68 (masmenos -> MINUS stack_operator exp .)


state 218

    (71) multdiv -> MULT stack_operator termino .

    PLUS            reduce using rule 71 (multdiv -> MULT stack_operator termino .)
    MINUS           reduce using rule 71 (multdiv -> MULT stack_operator termino .)
    GT              reduce using rule 71 (multdiv -> MULT stack_operator termino .)
    LT              reduce using rule 71 (multdiv -> MULT stack_operator termino .)
    EQ              reduce using rule 71 (multdiv -> MULT stack_operator termino .)
    LEQ             reduce using rule 71 (multdiv -> MULT stack_operator termino .)
    GEQ             reduce using rule 71 (multdiv -> MULT stack_operator termino .)
    AND             reduce using rule 71 (multdiv -> MULT stack_operator termino .)
    OR              reduce using rule 71 (multdiv -> MULT stack_operator termino .)
    R_PAREN         reduce using rule 71 (multdiv -> MULT stack_operator termino .)
    COMMA           reduce using rule 71 (multdiv -> MULT stack_operator termino .)
    TO              reduce using rule 71 (multdiv -> MULT stack_operator termino .)
    SEMICOLON       reduce using rule 71 (multdiv -> MULT stack_operator termino .)
    DO              reduce using rule 71 (multdiv -> MULT stack_operator termino .)


state 219

    (72) multdiv -> DIV stack_operator termino .

    PLUS            reduce using rule 72 (multdiv -> DIV stack_operator termino .)
    MINUS           reduce using rule 72 (multdiv -> DIV stack_operator termino .)
    GT              reduce using rule 72 (multdiv -> DIV stack_operator termino .)
    LT              reduce using rule 72 (multdiv -> DIV stack_operator termino .)
    EQ              reduce using rule 72 (multdiv -> DIV stack_operator termino .)
    LEQ             reduce using rule 72 (multdiv -> DIV stack_operator termino .)
    GEQ             reduce using rule 72 (multdiv -> DIV stack_operator termino .)
    AND             reduce using rule 72 (multdiv -> DIV stack_operator termino .)
    OR              reduce using rule 72 (multdiv -> DIV stack_operator termino .)
    R_PAREN         reduce using rule 72 (multdiv -> DIV stack_operator termino .)
    COMMA           reduce using rule 72 (multdiv -> DIV stack_operator termino .)
    TO              reduce using rule 72 (multdiv -> DIV stack_operator termino .)
    SEMICOLON       reduce using rule 72 (multdiv -> DIV stack_operator termino .)
    DO              reduce using rule 72 (multdiv -> DIV stack_operator termino .)


state 220

    (49) repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF bloque . end_while
    (103) end_while -> .

    ID              reduce using rule 103 (end_while -> .)
    IF              reduce using rule 103 (end_while -> .)
    WRITE           reduce using rule 103 (end_while -> .)
    RETURN          reduce using rule 103 (end_while -> .)
    READ            reduce using rule 103 (end_while -> .)
    WHILE           reduce using rule 103 (end_while -> .)
    FOR             reduce using rule 103 (end_while -> .)
    R_BRACE         reduce using rule 103 (end_while -> .)

    end_while                      shift and go to state 229

state 221

    (50) repeticion2 -> FOR ID EQUAL expOr TO expOr DO . bloque
    (26) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 61

    bloque                         shift and go to state 230

state 222

    (23) params2 -> COMMA tipo ID addvar updateParams . params2
    (23) params2 -> . COMMA tipo ID addvar updateParams params2
    (24) params2 -> . empty
    (81) empty -> .

    COMMA           shift and go to state 124
    R_PAREN         reduce using rule 81 (empty -> .)

    params2                        shift and go to state 231
    empty                          shift and go to state 125

state 223

    (37) asignacion -> ID stack_operand_id array EQUAL stack_operator expOr np_asignacion SEMICOLON .

    ID              reduce using rule 37 (asignacion -> ID stack_operand_id array EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    IF              reduce using rule 37 (asignacion -> ID stack_operand_id array EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    WRITE           reduce using rule 37 (asignacion -> ID stack_operand_id array EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    RETURN          reduce using rule 37 (asignacion -> ID stack_operand_id array EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    READ            reduce using rule 37 (asignacion -> ID stack_operand_id array EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    WHILE           reduce using rule 37 (asignacion -> ID stack_operand_id array EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    FOR             reduce using rule 37 (asignacion -> ID stack_operand_id array EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    R_BRACE         reduce using rule 37 (asignacion -> ID stack_operand_id array EQUAL stack_operator expOr np_asignacion SEMICOLON .)


state 224

    (38) llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis . Gosub
    (116) Gosub -> .

    ID              reduce using rule 116 (Gosub -> .)
    IF              reduce using rule 116 (Gosub -> .)
    WRITE           reduce using rule 116 (Gosub -> .)
    RETURN          reduce using rule 116 (Gosub -> .)
    READ            reduce using rule 116 (Gosub -> .)
    WHILE           reduce using rule 116 (Gosub -> .)
    FOR             reduce using rule 116 (Gosub -> .)
    R_BRACE         reduce using rule 116 (Gosub -> .)
    MULT            reduce using rule 116 (Gosub -> .)
    DIV             reduce using rule 116 (Gosub -> .)
    PLUS            reduce using rule 116 (Gosub -> .)
    MINUS           reduce using rule 116 (Gosub -> .)
    GT              reduce using rule 116 (Gosub -> .)
    LT              reduce using rule 116 (Gosub -> .)
    EQ              reduce using rule 116 (Gosub -> .)
    LEQ             reduce using rule 116 (Gosub -> .)
    GEQ             reduce using rule 116 (Gosub -> .)
    AND             reduce using rule 116 (Gosub -> .)
    OR              reduce using rule 116 (Gosub -> .)
    R_PAREN         reduce using rule 116 (Gosub -> .)
    COMMA           reduce using rule 116 (Gosub -> .)
    TO              reduce using rule 116 (Gosub -> .)
    SEMICOLON       reduce using rule 116 (Gosub -> .)
    DO              reduce using rule 116 (Gosub -> .)

    Gosub                          shift and go to state 232

state 225

    (53) parm2 -> COMMA expOr . checkParam parm2
    (114) checkParam -> .

    COMMA           reduce using rule 114 (checkParam -> .)
    R_PAREN         reduce using rule 114 (checkParam -> .)

    checkParam                     shift and go to state 233

state 226

    (46) condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .

    ID              reduce using rule 46 (condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .)
    IF              reduce using rule 46 (condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .)
    WRITE           reduce using rule 46 (condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .)
    RETURN          reduce using rule 46 (condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .)
    READ            reduce using rule 46 (condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .)
    WHILE           reduce using rule 46 (condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .)
    FOR             reduce using rule 46 (condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .)
    R_BRACE         reduce using rule 46 (condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .)


state 227

    (47) else_aux -> ELSE . Goto bloque end_if
    (101) Goto -> .

    L_BRACE         reduce using rule 101 (Goto -> .)

    Goto                           shift and go to state 234

state 228

    (48) else_aux -> end_if .

    ID              reduce using rule 48 (else_aux -> end_if .)
    IF              reduce using rule 48 (else_aux -> end_if .)
    WRITE           reduce using rule 48 (else_aux -> end_if .)
    RETURN          reduce using rule 48 (else_aux -> end_if .)
    READ            reduce using rule 48 (else_aux -> end_if .)
    WHILE           reduce using rule 48 (else_aux -> end_if .)
    FOR             reduce using rule 48 (else_aux -> end_if .)
    R_BRACE         reduce using rule 48 (else_aux -> end_if .)


state 229

    (49) repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF bloque end_while .

    ID              reduce using rule 49 (repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF bloque end_while .)
    IF              reduce using rule 49 (repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF bloque end_while .)
    WRITE           reduce using rule 49 (repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF bloque end_while .)
    RETURN          reduce using rule 49 (repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF bloque end_while .)
    READ            reduce using rule 49 (repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF bloque end_while .)
    WHILE           reduce using rule 49 (repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF bloque end_while .)
    FOR             reduce using rule 49 (repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF bloque end_while .)
    R_BRACE         reduce using rule 49 (repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF bloque end_while .)


state 230

    (50) repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .

    ID              reduce using rule 50 (repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .)
    IF              reduce using rule 50 (repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .)
    WRITE           reduce using rule 50 (repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .)
    RETURN          reduce using rule 50 (repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .)
    READ            reduce using rule 50 (repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .)
    WHILE           reduce using rule 50 (repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .)
    FOR             reduce using rule 50 (repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .)
    R_BRACE         reduce using rule 50 (repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .)


state 231

    (23) params2 -> COMMA tipo ID addvar updateParams params2 .

    R_PAREN         reduce using rule 23 (params2 -> COMMA tipo ID addvar updateParams params2 .)


state 232

    (38) llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .

    ID              reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    IF              reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    WRITE           reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    RETURN          reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    READ            reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    WHILE           reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    FOR             reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    R_BRACE         reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    MULT            reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    DIV             reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    PLUS            reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    MINUS           reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    GT              reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    LT              reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    EQ              reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    LEQ             reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    GEQ             reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    AND             reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    OR              reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    R_PAREN         reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    COMMA           reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    TO              reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    SEMICOLON       reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    DO              reduce using rule 38 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)


state 233

    (53) parm2 -> COMMA expOr checkParam . parm2
    (53) parm2 -> . COMMA expOr checkParam parm2
    (54) parm2 -> . empty
    (81) empty -> .

    COMMA           shift and go to state 205
    R_PAREN         reduce using rule 81 (empty -> .)

    parm2                          shift and go to state 235
    empty                          shift and go to state 206

state 234

    (47) else_aux -> ELSE Goto . bloque end_if
    (26) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 61

    bloque                         shift and go to state 236

state 235

    (53) parm2 -> COMMA expOr checkParam parm2 .

    R_PAREN         reduce using rule 53 (parm2 -> COMMA expOr checkParam parm2 .)


state 236

    (47) else_aux -> ELSE Goto bloque . end_if
    (102) end_if -> .

    ID              reduce using rule 102 (end_if -> .)
    IF              reduce using rule 102 (end_if -> .)
    WRITE           reduce using rule 102 (end_if -> .)
    RETURN          reduce using rule 102 (end_if -> .)
    READ            reduce using rule 102 (end_if -> .)
    WHILE           reduce using rule 102 (end_if -> .)
    FOR             reduce using rule 102 (end_if -> .)
    R_BRACE         reduce using rule 102 (end_if -> .)

    end_if                         shift and go to state 237

state 237

    (47) else_aux -> ELSE Goto bloque end_if .

    ID              reduce using rule 47 (else_aux -> ELSE Goto bloque end_if .)
    IF              reduce using rule 47 (else_aux -> ELSE Goto bloque end_if .)
    WRITE           reduce using rule 47 (else_aux -> ELSE Goto bloque end_if .)
    RETURN          reduce using rule 47 (else_aux -> ELSE Goto bloque end_if .)
    READ            reduce using rule 47 (else_aux -> ELSE Goto bloque end_if .)
    WHILE           reduce using rule 47 (else_aux -> ELSE Goto bloque end_if .)
    FOR             reduce using rule 47 (else_aux -> ELSE Goto bloque end_if .)
    R_BRACE         reduce using rule 47 (else_aux -> ELSE Goto bloque end_if .)

