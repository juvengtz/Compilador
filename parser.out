Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DO
    FOR
    MEDIA
    MODA
    PLOTXY
    REG
    TO
    VARIANZA

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars2 func2 bloque
Rule 2     vars -> VAR tipo COLON id_list SEMICOLON
Rule 3     vars2 -> vars vars2
Rule 4     vars2 -> empty
Rule 5     id_list -> id_list COMMA ID addvar array
Rule 6     id_list -> ID addvar array
Rule 7     array -> L_BRACKET CTE_I R_BRACKET
Rule 8     array -> empty
Rule 9     tipo -> INT current_type
Rule 10    tipo -> FLOAT current_type
Rule 11    tipo -> BOOL current_type
Rule 12    tipo -> CHAR current_type
Rule 13    func -> FUNCTION tipo_func ID addfunc L_PAREN parms R_PAREN vars2 bloque endProc
Rule 14    func2 -> func func2
Rule 15    func2 -> empty
Rule 16    tipo_func -> INT current_type
Rule 17    tipo_func -> FLOAT current_type
Rule 18    tipo_func -> CHAR current_type
Rule 19    tipo_func -> BOOL current_type
Rule 20    tipo_func -> VOID current_type
Rule 21    parms -> tipo ID id_list
Rule 22    parms -> empty
Rule 23    bloque -> L_BRACE estatuto_rep R_BRACE
Rule 24    estatuto_rep -> estatuto_rep estatuto
Rule 25    estatuto_rep -> estatuto
Rule 26    estatuto -> asignacion
Rule 27    estatuto -> condicion
Rule 28    estatuto -> escritura
Rule 29    estatuto -> llamada
Rule 30    estatuto -> retorno
Rule 31    estatuto -> lectura
Rule 32    estatuto -> repeticion
Rule 33    asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON
Rule 34    llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON
Rule 35    exp_rep -> exp_rep COMMA expresion
Rule 36    exp_rep -> expresion
Rule 37    retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON
Rule 38    lectura -> READ L_PAREN id_list R_PAREN SEMICOLON
Rule 39    escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
Rule 40    escritura_rep -> escritura_rep COMMA escritura_aux
Rule 41    escritura_rep -> escritura_aux
Rule 42    escritura_aux -> CTE_S
Rule 43    escritura_aux -> expresion
Rule 44    condicion -> IF L_PAREN expresion R_PAREN GotoF bloque else_aux
Rule 45    else_aux -> ELSE Goto bloque end_if
Rule 46    else_aux -> end_if
Rule 47    repeticion -> WHILE addJump L_PAREN expresion R_PAREN GotoF bloque end_while
Rule 48    expresion -> exp checkrelop relop
Rule 49    relop -> GT stack_operator expresion
Rule 50    relop -> LT stack_operator expresion
Rule 51    relop -> EQ stack_operator expresion
Rule 52    relop -> LEQ stack_operator expresion
Rule 53    relop -> GEQ stack_operator expresion
Rule 54    relop -> empty
Rule 55    exp -> termino checkexp masmenos
Rule 56    masmenos -> PLUS stack_operator exp
Rule 57    masmenos -> MINUS stack_operator exp
Rule 58    masmenos -> empty
Rule 59    termino -> factor checkterm multdiv
Rule 60    multdiv -> MULT stack_operator termino
Rule 61    multdiv -> DIV stack_operator termino
Rule 62    multdiv -> empty
Rule 63    factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis
Rule 64    factor -> var_cte
Rule 65    var_cte -> ID stack_operand_id
Rule 66    var_cte -> CTE_I stack_operand_int
Rule 67    var_cte -> CTE_F stack_operand_float
Rule 68    var_cte -> CTE_CHAR stack_operand_char
Rule 69    empty -> <empty>
Rule 70    create_dirfunc -> <empty>
Rule 71    current_type -> <empty>
Rule 72    addvar -> <empty>
Rule 73    addfunc -> <empty>
Rule 74    stack_operand_id -> <empty>
Rule 75    stack_operand_int -> <empty>
Rule 76    stack_operand_float -> <empty>
Rule 77    stack_operand_char -> <empty>
Rule 78    stack_operator -> <empty>
Rule 79    fakebottom -> <empty>
Rule 80    checkparentesis -> <empty>
Rule 81    checkterm -> <empty>
Rule 82    checkexp -> <empty>
Rule 83    checkrelop -> <empty>
Rule 84    np_llamada -> <empty>
Rule 85    np_asignacion -> <empty>
Rule 86    return -> <empty>
Rule 87    GotoF -> <empty>
Rule 88    Goto -> <empty>
Rule 89    end_if -> <empty>
Rule 90    end_while -> <empty>
Rule 91    addJump -> <empty>
Rule 92    endProc -> <empty>

Terminals, with rules where they appear

BOOL                 : 11 19
CHAR                 : 12 18
COLON                : 2
COMMA                : 5 35 40
CTE_CHAR             : 68
CTE_F                : 67
CTE_I                : 7 66
CTE_S                : 42
DIV                  : 61
DO                   : 
ELSE                 : 45
EQ                   : 51
EQUAL                : 33
FLOAT                : 10 17
FOR                  : 
FUNCTION             : 13
GEQ                  : 53
GT                   : 49
ID                   : 1 5 6 13 21 33 34 65
IF                   : 44
INT                  : 9 16
LEQ                  : 52
LT                   : 50
L_BRACE              : 23
L_BRACKET            : 7
L_PAREN              : 13 34 37 38 39 44 47 63
MEDIA                : 
MINUS                : 57
MODA                 : 
MULT                 : 60
PLOTXY               : 
PLUS                 : 56
PROGRAM              : 1
READ                 : 38
REG                  : 
RETURN               : 37
R_BRACE              : 23
R_BRACKET            : 7
R_PAREN              : 13 34 37 38 39 44 47 63
SEMICOLON            : 1 2 33 34 37 38 39
TO                   : 
VAR                  : 2
VARIANZA             : 
VOID                 : 20
WHILE                : 47
WRITE                : 39
error                : 

Nonterminals, with rules where they appear

Goto                 : 45
GotoF                : 44 47
PROGRAMA             : 0
addJump              : 47
addfunc              : 13
addvar               : 5 6
array                : 5 6 33
asignacion           : 26
bloque               : 1 13 44 45 47
checkexp             : 55
checkparentesis      : 63
checkrelop           : 48
checkterm            : 59
condicion            : 27
create_dirfunc       : 1
current_type         : 9 10 11 12 16 17 18 19 20
else_aux             : 44
empty                : 4 8 15 22 54 58 62
endProc              : 13
end_if               : 45 46
end_while            : 47
escritura            : 28
escritura_aux        : 40 41
escritura_rep        : 39 40
estatuto             : 24 25
estatuto_rep         : 23 24
exp                  : 48 56 57
exp_rep              : 34 35
expresion            : 33 35 36 37 43 44 47 49 50 51 52 53 63
factor               : 59
fakebottom           : 63
func                 : 14
func2                : 1 14
id_list              : 2 5 21 38
lectura              : 31
llamada              : 29
masmenos             : 55
multdiv              : 59
np_asignacion        : 33
np_llamada           : 34
parms                : 13
relop                : 48
repeticion           : 32
retorno              : 30
return               : 37
stack_operand_char   : 68
stack_operand_float  : 67
stack_operand_id     : 33 65
stack_operand_int    : 66
stack_operator       : 33 49 50 51 52 53 56 57 60 61
termino              : 55 60 61
tipo                 : 2 21
tipo_func            : 13
var_cte              : 64
vars                 : 3
vars2                : 1 3 13

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . PROGRAM create_dirfunc ID SEMICOLON vars2 func2 bloque

    PROGRAM         shift and go to state 2

    PROGRAMA                       shift and go to state 1

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> PROGRAM . create_dirfunc ID SEMICOLON vars2 func2 bloque
    (70) create_dirfunc -> .

    ID              reduce using rule 70 (create_dirfunc -> .)

    create_dirfunc                 shift and go to state 3

state 3

    (1) PROGRAMA -> PROGRAM create_dirfunc . ID SEMICOLON vars2 func2 bloque

    ID              shift and go to state 4


state 4

    (1) PROGRAMA -> PROGRAM create_dirfunc ID . SEMICOLON vars2 func2 bloque

    SEMICOLON       shift and go to state 5


state 5

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON . vars2 func2 bloque
    (3) vars2 -> . vars vars2
    (4) vars2 -> . empty
    (2) vars -> . VAR tipo COLON id_list SEMICOLON
    (69) empty -> .

    VAR             shift and go to state 9
    FUNCTION        reduce using rule 69 (empty -> .)
    L_BRACE         reduce using rule 69 (empty -> .)

    vars2                          shift and go to state 6
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 6

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars2 . func2 bloque
    (14) func2 -> . func func2
    (15) func2 -> . empty
    (13) func -> . FUNCTION tipo_func ID addfunc L_PAREN parms R_PAREN vars2 bloque endProc
    (69) empty -> .

    FUNCTION        shift and go to state 13
    L_BRACE         reduce using rule 69 (empty -> .)

    func2                          shift and go to state 10
    func                           shift and go to state 11
    empty                          shift and go to state 12

state 7

    (3) vars2 -> vars . vars2
    (3) vars2 -> . vars vars2
    (4) vars2 -> . empty
    (2) vars -> . VAR tipo COLON id_list SEMICOLON
    (69) empty -> .

    VAR             shift and go to state 9
    FUNCTION        reduce using rule 69 (empty -> .)
    L_BRACE         reduce using rule 69 (empty -> .)

    vars                           shift and go to state 7
    vars2                          shift and go to state 14
    empty                          shift and go to state 8

state 8

    (4) vars2 -> empty .

    FUNCTION        reduce using rule 4 (vars2 -> empty .)
    L_BRACE         reduce using rule 4 (vars2 -> empty .)


state 9

    (2) vars -> VAR . tipo COLON id_list SEMICOLON
    (9) tipo -> . INT current_type
    (10) tipo -> . FLOAT current_type
    (11) tipo -> . BOOL current_type
    (12) tipo -> . CHAR current_type

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    CHAR            shift and go to state 19

    tipo                           shift and go to state 15

state 10

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars2 func2 . bloque
    (23) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 21

    bloque                         shift and go to state 20

state 11

    (14) func2 -> func . func2
    (14) func2 -> . func func2
    (15) func2 -> . empty
    (13) func -> . FUNCTION tipo_func ID addfunc L_PAREN parms R_PAREN vars2 bloque endProc
    (69) empty -> .

    FUNCTION        shift and go to state 13
    L_BRACE         reduce using rule 69 (empty -> .)

    func                           shift and go to state 11
    func2                          shift and go to state 22
    empty                          shift and go to state 12

state 12

    (15) func2 -> empty .

    L_BRACE         reduce using rule 15 (func2 -> empty .)


state 13

    (13) func -> FUNCTION . tipo_func ID addfunc L_PAREN parms R_PAREN vars2 bloque endProc
    (16) tipo_func -> . INT current_type
    (17) tipo_func -> . FLOAT current_type
    (18) tipo_func -> . CHAR current_type
    (19) tipo_func -> . BOOL current_type
    (20) tipo_func -> . VOID current_type

    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26
    BOOL            shift and go to state 27
    VOID            shift and go to state 28

    tipo_func                      shift and go to state 23

state 14

    (3) vars2 -> vars vars2 .

    FUNCTION        reduce using rule 3 (vars2 -> vars vars2 .)
    L_BRACE         reduce using rule 3 (vars2 -> vars vars2 .)


state 15

    (2) vars -> VAR tipo . COLON id_list SEMICOLON

    COLON           shift and go to state 29


state 16

    (9) tipo -> INT . current_type
    (71) current_type -> .

    COLON           reduce using rule 71 (current_type -> .)
    ID              reduce using rule 71 (current_type -> .)

    current_type                   shift and go to state 30

state 17

    (10) tipo -> FLOAT . current_type
    (71) current_type -> .

    COLON           reduce using rule 71 (current_type -> .)
    ID              reduce using rule 71 (current_type -> .)

    current_type                   shift and go to state 31

state 18

    (11) tipo -> BOOL . current_type
    (71) current_type -> .

    COLON           reduce using rule 71 (current_type -> .)
    ID              reduce using rule 71 (current_type -> .)

    current_type                   shift and go to state 32

state 19

    (12) tipo -> CHAR . current_type
    (71) current_type -> .

    COLON           reduce using rule 71 (current_type -> .)
    ID              reduce using rule 71 (current_type -> .)

    current_type                   shift and go to state 33

state 20

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars2 func2 bloque .

    $end            reduce using rule 1 (PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars2 func2 bloque .)


state 21

    (23) bloque -> L_BRACE . estatuto_rep R_BRACE
    (24) estatuto_rep -> . estatuto_rep estatuto
    (25) estatuto_rep -> . estatuto
    (26) estatuto -> . asignacion
    (27) estatuto -> . condicion
    (28) estatuto -> . escritura
    (29) estatuto -> . llamada
    (30) estatuto -> . retorno
    (31) estatuto -> . lectura
    (32) estatuto -> . repeticion
    (33) asignacion -> . ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON
    (44) condicion -> . IF L_PAREN expresion R_PAREN GotoF bloque else_aux
    (39) escritura -> . WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
    (34) llamada -> . ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON
    (37) retorno -> . RETURN L_PAREN expresion R_PAREN return SEMICOLON
    (38) lectura -> . READ L_PAREN id_list R_PAREN SEMICOLON
    (47) repeticion -> . WHILE addJump L_PAREN expresion R_PAREN GotoF bloque end_while

    ID              shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    RETURN          shift and go to state 46
    READ            shift and go to state 47
    WHILE           shift and go to state 48

    estatuto_rep                   shift and go to state 34
    estatuto                       shift and go to state 35
    asignacion                     shift and go to state 36
    condicion                      shift and go to state 37
    escritura                      shift and go to state 38
    llamada                        shift and go to state 39
    retorno                        shift and go to state 40
    lectura                        shift and go to state 41
    repeticion                     shift and go to state 42

state 22

    (14) func2 -> func func2 .

    L_BRACE         reduce using rule 14 (func2 -> func func2 .)


state 23

    (13) func -> FUNCTION tipo_func . ID addfunc L_PAREN parms R_PAREN vars2 bloque endProc

    ID              shift and go to state 49


state 24

    (16) tipo_func -> INT . current_type
    (71) current_type -> .

    ID              reduce using rule 71 (current_type -> .)

    current_type                   shift and go to state 50

state 25

    (17) tipo_func -> FLOAT . current_type
    (71) current_type -> .

    ID              reduce using rule 71 (current_type -> .)

    current_type                   shift and go to state 51

state 26

    (18) tipo_func -> CHAR . current_type
    (71) current_type -> .

    ID              reduce using rule 71 (current_type -> .)

    current_type                   shift and go to state 52

state 27

    (19) tipo_func -> BOOL . current_type
    (71) current_type -> .

    ID              reduce using rule 71 (current_type -> .)

    current_type                   shift and go to state 53

state 28

    (20) tipo_func -> VOID . current_type
    (71) current_type -> .

    ID              reduce using rule 71 (current_type -> .)

    current_type                   shift and go to state 54

state 29

    (2) vars -> VAR tipo COLON . id_list SEMICOLON
    (5) id_list -> . id_list COMMA ID addvar array
    (6) id_list -> . ID addvar array

    ID              shift and go to state 56

    id_list                        shift and go to state 55

state 30

    (9) tipo -> INT current_type .

    COLON           reduce using rule 9 (tipo -> INT current_type .)
    ID              reduce using rule 9 (tipo -> INT current_type .)


state 31

    (10) tipo -> FLOAT current_type .

    COLON           reduce using rule 10 (tipo -> FLOAT current_type .)
    ID              reduce using rule 10 (tipo -> FLOAT current_type .)


state 32

    (11) tipo -> BOOL current_type .

    COLON           reduce using rule 11 (tipo -> BOOL current_type .)
    ID              reduce using rule 11 (tipo -> BOOL current_type .)


state 33

    (12) tipo -> CHAR current_type .

    COLON           reduce using rule 12 (tipo -> CHAR current_type .)
    ID              reduce using rule 12 (tipo -> CHAR current_type .)


state 34

    (23) bloque -> L_BRACE estatuto_rep . R_BRACE
    (24) estatuto_rep -> estatuto_rep . estatuto
    (26) estatuto -> . asignacion
    (27) estatuto -> . condicion
    (28) estatuto -> . escritura
    (29) estatuto -> . llamada
    (30) estatuto -> . retorno
    (31) estatuto -> . lectura
    (32) estatuto -> . repeticion
    (33) asignacion -> . ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON
    (44) condicion -> . IF L_PAREN expresion R_PAREN GotoF bloque else_aux
    (39) escritura -> . WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
    (34) llamada -> . ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON
    (37) retorno -> . RETURN L_PAREN expresion R_PAREN return SEMICOLON
    (38) lectura -> . READ L_PAREN id_list R_PAREN SEMICOLON
    (47) repeticion -> . WHILE addJump L_PAREN expresion R_PAREN GotoF bloque end_while

    R_BRACE         shift and go to state 57
    ID              shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    RETURN          shift and go to state 46
    READ            shift and go to state 47
    WHILE           shift and go to state 48

    estatuto                       shift and go to state 58
    asignacion                     shift and go to state 36
    condicion                      shift and go to state 37
    escritura                      shift and go to state 38
    llamada                        shift and go to state 39
    retorno                        shift and go to state 40
    lectura                        shift and go to state 41
    repeticion                     shift and go to state 42

state 35

    (25) estatuto_rep -> estatuto .

    R_BRACE         reduce using rule 25 (estatuto_rep -> estatuto .)
    ID              reduce using rule 25 (estatuto_rep -> estatuto .)
    IF              reduce using rule 25 (estatuto_rep -> estatuto .)
    WRITE           reduce using rule 25 (estatuto_rep -> estatuto .)
    RETURN          reduce using rule 25 (estatuto_rep -> estatuto .)
    READ            reduce using rule 25 (estatuto_rep -> estatuto .)
    WHILE           reduce using rule 25 (estatuto_rep -> estatuto .)


state 36

    (26) estatuto -> asignacion .

    R_BRACE         reduce using rule 26 (estatuto -> asignacion .)
    ID              reduce using rule 26 (estatuto -> asignacion .)
    IF              reduce using rule 26 (estatuto -> asignacion .)
    WRITE           reduce using rule 26 (estatuto -> asignacion .)
    RETURN          reduce using rule 26 (estatuto -> asignacion .)
    READ            reduce using rule 26 (estatuto -> asignacion .)
    WHILE           reduce using rule 26 (estatuto -> asignacion .)


state 37

    (27) estatuto -> condicion .

    R_BRACE         reduce using rule 27 (estatuto -> condicion .)
    ID              reduce using rule 27 (estatuto -> condicion .)
    IF              reduce using rule 27 (estatuto -> condicion .)
    WRITE           reduce using rule 27 (estatuto -> condicion .)
    RETURN          reduce using rule 27 (estatuto -> condicion .)
    READ            reduce using rule 27 (estatuto -> condicion .)
    WHILE           reduce using rule 27 (estatuto -> condicion .)


state 38

    (28) estatuto -> escritura .

    R_BRACE         reduce using rule 28 (estatuto -> escritura .)
    ID              reduce using rule 28 (estatuto -> escritura .)
    IF              reduce using rule 28 (estatuto -> escritura .)
    WRITE           reduce using rule 28 (estatuto -> escritura .)
    RETURN          reduce using rule 28 (estatuto -> escritura .)
    READ            reduce using rule 28 (estatuto -> escritura .)
    WHILE           reduce using rule 28 (estatuto -> escritura .)


state 39

    (29) estatuto -> llamada .

    R_BRACE         reduce using rule 29 (estatuto -> llamada .)
    ID              reduce using rule 29 (estatuto -> llamada .)
    IF              reduce using rule 29 (estatuto -> llamada .)
    WRITE           reduce using rule 29 (estatuto -> llamada .)
    RETURN          reduce using rule 29 (estatuto -> llamada .)
    READ            reduce using rule 29 (estatuto -> llamada .)
    WHILE           reduce using rule 29 (estatuto -> llamada .)


state 40

    (30) estatuto -> retorno .

    R_BRACE         reduce using rule 30 (estatuto -> retorno .)
    ID              reduce using rule 30 (estatuto -> retorno .)
    IF              reduce using rule 30 (estatuto -> retorno .)
    WRITE           reduce using rule 30 (estatuto -> retorno .)
    RETURN          reduce using rule 30 (estatuto -> retorno .)
    READ            reduce using rule 30 (estatuto -> retorno .)
    WHILE           reduce using rule 30 (estatuto -> retorno .)


state 41

    (31) estatuto -> lectura .

    R_BRACE         reduce using rule 31 (estatuto -> lectura .)
    ID              reduce using rule 31 (estatuto -> lectura .)
    IF              reduce using rule 31 (estatuto -> lectura .)
    WRITE           reduce using rule 31 (estatuto -> lectura .)
    RETURN          reduce using rule 31 (estatuto -> lectura .)
    READ            reduce using rule 31 (estatuto -> lectura .)
    WHILE           reduce using rule 31 (estatuto -> lectura .)


state 42

    (32) estatuto -> repeticion .

    R_BRACE         reduce using rule 32 (estatuto -> repeticion .)
    ID              reduce using rule 32 (estatuto -> repeticion .)
    IF              reduce using rule 32 (estatuto -> repeticion .)
    WRITE           reduce using rule 32 (estatuto -> repeticion .)
    RETURN          reduce using rule 32 (estatuto -> repeticion .)
    READ            reduce using rule 32 (estatuto -> repeticion .)
    WHILE           reduce using rule 32 (estatuto -> repeticion .)


state 43

    (33) asignacion -> ID . stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON
    (34) llamada -> ID . L_PAREN exp_rep R_PAREN np_llamada SEMICOLON
    (74) stack_operand_id -> .

    L_PAREN         shift and go to state 60
    L_BRACKET       reduce using rule 74 (stack_operand_id -> .)
    EQUAL           reduce using rule 74 (stack_operand_id -> .)

    stack_operand_id               shift and go to state 59

state 44

    (44) condicion -> IF . L_PAREN expresion R_PAREN GotoF bloque else_aux

    L_PAREN         shift and go to state 61


state 45

    (39) escritura -> WRITE . L_PAREN escritura_rep R_PAREN SEMICOLON

    L_PAREN         shift and go to state 62


state 46

    (37) retorno -> RETURN . L_PAREN expresion R_PAREN return SEMICOLON

    L_PAREN         shift and go to state 63


state 47

    (38) lectura -> READ . L_PAREN id_list R_PAREN SEMICOLON

    L_PAREN         shift and go to state 64


state 48

    (47) repeticion -> WHILE . addJump L_PAREN expresion R_PAREN GotoF bloque end_while
    (91) addJump -> .

    L_PAREN         reduce using rule 91 (addJump -> .)

    addJump                        shift and go to state 65

state 49

    (13) func -> FUNCTION tipo_func ID . addfunc L_PAREN parms R_PAREN vars2 bloque endProc
    (73) addfunc -> .

    L_PAREN         reduce using rule 73 (addfunc -> .)

    addfunc                        shift and go to state 66

state 50

    (16) tipo_func -> INT current_type .

    ID              reduce using rule 16 (tipo_func -> INT current_type .)


state 51

    (17) tipo_func -> FLOAT current_type .

    ID              reduce using rule 17 (tipo_func -> FLOAT current_type .)


state 52

    (18) tipo_func -> CHAR current_type .

    ID              reduce using rule 18 (tipo_func -> CHAR current_type .)


state 53

    (19) tipo_func -> BOOL current_type .

    ID              reduce using rule 19 (tipo_func -> BOOL current_type .)


state 54

    (20) tipo_func -> VOID current_type .

    ID              reduce using rule 20 (tipo_func -> VOID current_type .)


state 55

    (2) vars -> VAR tipo COLON id_list . SEMICOLON
    (5) id_list -> id_list . COMMA ID addvar array

    SEMICOLON       shift and go to state 67
    COMMA           shift and go to state 68


state 56

    (6) id_list -> ID . addvar array
    (72) addvar -> .

    L_BRACKET       reduce using rule 72 (addvar -> .)
    SEMICOLON       reduce using rule 72 (addvar -> .)
    COMMA           reduce using rule 72 (addvar -> .)
    R_PAREN         reduce using rule 72 (addvar -> .)

    addvar                         shift and go to state 69

state 57

    (23) bloque -> L_BRACE estatuto_rep R_BRACE .

    $end            reduce using rule 23 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    ELSE            reduce using rule 23 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    R_BRACE         reduce using rule 23 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    ID              reduce using rule 23 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    IF              reduce using rule 23 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    WRITE           reduce using rule 23 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    RETURN          reduce using rule 23 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    READ            reduce using rule 23 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    WHILE           reduce using rule 23 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    FUNCTION        reduce using rule 23 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    L_BRACE         reduce using rule 23 (bloque -> L_BRACE estatuto_rep R_BRACE .)


state 58

    (24) estatuto_rep -> estatuto_rep estatuto .

    R_BRACE         reduce using rule 24 (estatuto_rep -> estatuto_rep estatuto .)
    ID              reduce using rule 24 (estatuto_rep -> estatuto_rep estatuto .)
    IF              reduce using rule 24 (estatuto_rep -> estatuto_rep estatuto .)
    WRITE           reduce using rule 24 (estatuto_rep -> estatuto_rep estatuto .)
    RETURN          reduce using rule 24 (estatuto_rep -> estatuto_rep estatuto .)
    READ            reduce using rule 24 (estatuto_rep -> estatuto_rep estatuto .)
    WHILE           reduce using rule 24 (estatuto_rep -> estatuto_rep estatuto .)


state 59

    (33) asignacion -> ID stack_operand_id . array EQUAL stack_operator expresion np_asignacion SEMICOLON
    (7) array -> . L_BRACKET CTE_I R_BRACKET
    (8) array -> . empty
    (69) empty -> .

    L_BRACKET       shift and go to state 71
    EQUAL           reduce using rule 69 (empty -> .)

    array                          shift and go to state 70
    empty                          shift and go to state 72

state 60

    (34) llamada -> ID L_PAREN . exp_rep R_PAREN np_llamada SEMICOLON
    (35) exp_rep -> . exp_rep COMMA expresion
    (36) exp_rep -> . expresion
    (48) expresion -> . exp checkrelop relop
    (55) exp -> . termino checkexp masmenos
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    exp_rep                        shift and go to state 75
    expresion                      shift and go to state 76
    exp                            shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 61

    (44) condicion -> IF L_PAREN . expresion R_PAREN GotoF bloque else_aux
    (48) expresion -> . exp checkrelop relop
    (55) exp -> . termino checkexp masmenos
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    expresion                      shift and go to state 84
    exp                            shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 62

    (39) escritura -> WRITE L_PAREN . escritura_rep R_PAREN SEMICOLON
    (40) escritura_rep -> . escritura_rep COMMA escritura_aux
    (41) escritura_rep -> . escritura_aux
    (42) escritura_aux -> . CTE_S
    (43) escritura_aux -> . expresion
    (48) expresion -> . exp checkrelop relop
    (55) exp -> . termino checkexp masmenos
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    CTE_S           shift and go to state 87
    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    escritura_rep                  shift and go to state 85
    escritura_aux                  shift and go to state 86
    expresion                      shift and go to state 88
    exp                            shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 63

    (37) retorno -> RETURN L_PAREN . expresion R_PAREN return SEMICOLON
    (48) expresion -> . exp checkrelop relop
    (55) exp -> . termino checkexp masmenos
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    expresion                      shift and go to state 89
    exp                            shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 64

    (38) lectura -> READ L_PAREN . id_list R_PAREN SEMICOLON
    (5) id_list -> . id_list COMMA ID addvar array
    (6) id_list -> . ID addvar array

    ID              shift and go to state 56

    id_list                        shift and go to state 90

state 65

    (47) repeticion -> WHILE addJump . L_PAREN expresion R_PAREN GotoF bloque end_while

    L_PAREN         shift and go to state 91


state 66

    (13) func -> FUNCTION tipo_func ID addfunc . L_PAREN parms R_PAREN vars2 bloque endProc

    L_PAREN         shift and go to state 92


state 67

    (2) vars -> VAR tipo COLON id_list SEMICOLON .

    VAR             reduce using rule 2 (vars -> VAR tipo COLON id_list SEMICOLON .)
    FUNCTION        reduce using rule 2 (vars -> VAR tipo COLON id_list SEMICOLON .)
    L_BRACE         reduce using rule 2 (vars -> VAR tipo COLON id_list SEMICOLON .)


state 68

    (5) id_list -> id_list COMMA . ID addvar array

    ID              shift and go to state 93


state 69

    (6) id_list -> ID addvar . array
    (7) array -> . L_BRACKET CTE_I R_BRACKET
    (8) array -> . empty
    (69) empty -> .

    L_BRACKET       shift and go to state 71
    SEMICOLON       reduce using rule 69 (empty -> .)
    COMMA           reduce using rule 69 (empty -> .)
    R_PAREN         reduce using rule 69 (empty -> .)

    array                          shift and go to state 94
    empty                          shift and go to state 72

state 70

    (33) asignacion -> ID stack_operand_id array . EQUAL stack_operator expresion np_asignacion SEMICOLON

    EQUAL           shift and go to state 95


state 71

    (7) array -> L_BRACKET . CTE_I R_BRACKET

    CTE_I           shift and go to state 96


state 72

    (8) array -> empty .

    EQUAL           reduce using rule 8 (array -> empty .)
    SEMICOLON       reduce using rule 8 (array -> empty .)
    COMMA           reduce using rule 8 (array -> empty .)
    R_PAREN         reduce using rule 8 (array -> empty .)


state 73

    (65) var_cte -> ID . stack_operand_id
    (74) stack_operand_id -> .

    MULT            reduce using rule 74 (stack_operand_id -> .)
    DIV             reduce using rule 74 (stack_operand_id -> .)
    PLUS            reduce using rule 74 (stack_operand_id -> .)
    MINUS           reduce using rule 74 (stack_operand_id -> .)
    GT              reduce using rule 74 (stack_operand_id -> .)
    LT              reduce using rule 74 (stack_operand_id -> .)
    EQ              reduce using rule 74 (stack_operand_id -> .)
    LEQ             reduce using rule 74 (stack_operand_id -> .)
    GEQ             reduce using rule 74 (stack_operand_id -> .)
    R_PAREN         reduce using rule 74 (stack_operand_id -> .)
    COMMA           reduce using rule 74 (stack_operand_id -> .)
    SEMICOLON       reduce using rule 74 (stack_operand_id -> .)

    stack_operand_id               shift and go to state 97

state 74

    (63) factor -> L_PAREN . fakebottom expresion R_PAREN checkparentesis
    (79) fakebottom -> .

    L_PAREN         reduce using rule 79 (fakebottom -> .)
    ID              reduce using rule 79 (fakebottom -> .)
    CTE_I           reduce using rule 79 (fakebottom -> .)
    CTE_F           reduce using rule 79 (fakebottom -> .)
    CTE_CHAR        reduce using rule 79 (fakebottom -> .)

    fakebottom                     shift and go to state 98

state 75

    (34) llamada -> ID L_PAREN exp_rep . R_PAREN np_llamada SEMICOLON
    (35) exp_rep -> exp_rep . COMMA expresion

    R_PAREN         shift and go to state 99
    COMMA           shift and go to state 100


state 76

    (36) exp_rep -> expresion .

    R_PAREN         reduce using rule 36 (exp_rep -> expresion .)
    COMMA           reduce using rule 36 (exp_rep -> expresion .)


state 77

    (48) expresion -> exp . checkrelop relop
    (83) checkrelop -> .

    GT              reduce using rule 83 (checkrelop -> .)
    LT              reduce using rule 83 (checkrelop -> .)
    EQ              reduce using rule 83 (checkrelop -> .)
    LEQ             reduce using rule 83 (checkrelop -> .)
    GEQ             reduce using rule 83 (checkrelop -> .)
    R_PAREN         reduce using rule 83 (checkrelop -> .)
    COMMA           reduce using rule 83 (checkrelop -> .)
    SEMICOLON       reduce using rule 83 (checkrelop -> .)

    checkrelop                     shift and go to state 101

state 78

    (55) exp -> termino . checkexp masmenos
    (82) checkexp -> .

    PLUS            reduce using rule 82 (checkexp -> .)
    MINUS           reduce using rule 82 (checkexp -> .)
    GT              reduce using rule 82 (checkexp -> .)
    LT              reduce using rule 82 (checkexp -> .)
    EQ              reduce using rule 82 (checkexp -> .)
    LEQ             reduce using rule 82 (checkexp -> .)
    GEQ             reduce using rule 82 (checkexp -> .)
    R_PAREN         reduce using rule 82 (checkexp -> .)
    COMMA           reduce using rule 82 (checkexp -> .)
    SEMICOLON       reduce using rule 82 (checkexp -> .)

    checkexp                       shift and go to state 102

state 79

    (59) termino -> factor . checkterm multdiv
    (81) checkterm -> .

    MULT            reduce using rule 81 (checkterm -> .)
    DIV             reduce using rule 81 (checkterm -> .)
    PLUS            reduce using rule 81 (checkterm -> .)
    MINUS           reduce using rule 81 (checkterm -> .)
    GT              reduce using rule 81 (checkterm -> .)
    LT              reduce using rule 81 (checkterm -> .)
    EQ              reduce using rule 81 (checkterm -> .)
    LEQ             reduce using rule 81 (checkterm -> .)
    GEQ             reduce using rule 81 (checkterm -> .)
    R_PAREN         reduce using rule 81 (checkterm -> .)
    COMMA           reduce using rule 81 (checkterm -> .)
    SEMICOLON       reduce using rule 81 (checkterm -> .)

    checkterm                      shift and go to state 103

state 80

    (64) factor -> var_cte .

    MULT            reduce using rule 64 (factor -> var_cte .)
    DIV             reduce using rule 64 (factor -> var_cte .)
    PLUS            reduce using rule 64 (factor -> var_cte .)
    MINUS           reduce using rule 64 (factor -> var_cte .)
    GT              reduce using rule 64 (factor -> var_cte .)
    LT              reduce using rule 64 (factor -> var_cte .)
    EQ              reduce using rule 64 (factor -> var_cte .)
    LEQ             reduce using rule 64 (factor -> var_cte .)
    GEQ             reduce using rule 64 (factor -> var_cte .)
    R_PAREN         reduce using rule 64 (factor -> var_cte .)
    COMMA           reduce using rule 64 (factor -> var_cte .)
    SEMICOLON       reduce using rule 64 (factor -> var_cte .)


state 81

    (66) var_cte -> CTE_I . stack_operand_int
    (75) stack_operand_int -> .

    MULT            reduce using rule 75 (stack_operand_int -> .)
    DIV             reduce using rule 75 (stack_operand_int -> .)
    PLUS            reduce using rule 75 (stack_operand_int -> .)
    MINUS           reduce using rule 75 (stack_operand_int -> .)
    GT              reduce using rule 75 (stack_operand_int -> .)
    LT              reduce using rule 75 (stack_operand_int -> .)
    EQ              reduce using rule 75 (stack_operand_int -> .)
    LEQ             reduce using rule 75 (stack_operand_int -> .)
    GEQ             reduce using rule 75 (stack_operand_int -> .)
    R_PAREN         reduce using rule 75 (stack_operand_int -> .)
    COMMA           reduce using rule 75 (stack_operand_int -> .)
    SEMICOLON       reduce using rule 75 (stack_operand_int -> .)

    stack_operand_int              shift and go to state 104

state 82

    (67) var_cte -> CTE_F . stack_operand_float
    (76) stack_operand_float -> .

    MULT            reduce using rule 76 (stack_operand_float -> .)
    DIV             reduce using rule 76 (stack_operand_float -> .)
    PLUS            reduce using rule 76 (stack_operand_float -> .)
    MINUS           reduce using rule 76 (stack_operand_float -> .)
    GT              reduce using rule 76 (stack_operand_float -> .)
    LT              reduce using rule 76 (stack_operand_float -> .)
    EQ              reduce using rule 76 (stack_operand_float -> .)
    LEQ             reduce using rule 76 (stack_operand_float -> .)
    GEQ             reduce using rule 76 (stack_operand_float -> .)
    R_PAREN         reduce using rule 76 (stack_operand_float -> .)
    COMMA           reduce using rule 76 (stack_operand_float -> .)
    SEMICOLON       reduce using rule 76 (stack_operand_float -> .)

    stack_operand_float            shift and go to state 105

state 83

    (68) var_cte -> CTE_CHAR . stack_operand_char
    (77) stack_operand_char -> .

    MULT            reduce using rule 77 (stack_operand_char -> .)
    DIV             reduce using rule 77 (stack_operand_char -> .)
    PLUS            reduce using rule 77 (stack_operand_char -> .)
    MINUS           reduce using rule 77 (stack_operand_char -> .)
    GT              reduce using rule 77 (stack_operand_char -> .)
    LT              reduce using rule 77 (stack_operand_char -> .)
    EQ              reduce using rule 77 (stack_operand_char -> .)
    LEQ             reduce using rule 77 (stack_operand_char -> .)
    GEQ             reduce using rule 77 (stack_operand_char -> .)
    R_PAREN         reduce using rule 77 (stack_operand_char -> .)
    COMMA           reduce using rule 77 (stack_operand_char -> .)
    SEMICOLON       reduce using rule 77 (stack_operand_char -> .)

    stack_operand_char             shift and go to state 106

state 84

    (44) condicion -> IF L_PAREN expresion . R_PAREN GotoF bloque else_aux

    R_PAREN         shift and go to state 107


state 85

    (39) escritura -> WRITE L_PAREN escritura_rep . R_PAREN SEMICOLON
    (40) escritura_rep -> escritura_rep . COMMA escritura_aux

    R_PAREN         shift and go to state 108
    COMMA           shift and go to state 109


state 86

    (41) escritura_rep -> escritura_aux .

    R_PAREN         reduce using rule 41 (escritura_rep -> escritura_aux .)
    COMMA           reduce using rule 41 (escritura_rep -> escritura_aux .)


state 87

    (42) escritura_aux -> CTE_S .

    R_PAREN         reduce using rule 42 (escritura_aux -> CTE_S .)
    COMMA           reduce using rule 42 (escritura_aux -> CTE_S .)


state 88

    (43) escritura_aux -> expresion .

    R_PAREN         reduce using rule 43 (escritura_aux -> expresion .)
    COMMA           reduce using rule 43 (escritura_aux -> expresion .)


state 89

    (37) retorno -> RETURN L_PAREN expresion . R_PAREN return SEMICOLON

    R_PAREN         shift and go to state 110


state 90

    (38) lectura -> READ L_PAREN id_list . R_PAREN SEMICOLON
    (5) id_list -> id_list . COMMA ID addvar array

    R_PAREN         shift and go to state 111
    COMMA           shift and go to state 68


state 91

    (47) repeticion -> WHILE addJump L_PAREN . expresion R_PAREN GotoF bloque end_while
    (48) expresion -> . exp checkrelop relop
    (55) exp -> . termino checkexp masmenos
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    expresion                      shift and go to state 112
    exp                            shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 92

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN . parms R_PAREN vars2 bloque endProc
    (21) parms -> . tipo ID id_list
    (22) parms -> . empty
    (9) tipo -> . INT current_type
    (10) tipo -> . FLOAT current_type
    (11) tipo -> . BOOL current_type
    (12) tipo -> . CHAR current_type
    (69) empty -> .

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    CHAR            shift and go to state 19
    R_PAREN         reduce using rule 69 (empty -> .)

    parms                          shift and go to state 113
    tipo                           shift and go to state 114
    empty                          shift and go to state 115

state 93

    (5) id_list -> id_list COMMA ID . addvar array
    (72) addvar -> .

    L_BRACKET       reduce using rule 72 (addvar -> .)
    SEMICOLON       reduce using rule 72 (addvar -> .)
    COMMA           reduce using rule 72 (addvar -> .)
    R_PAREN         reduce using rule 72 (addvar -> .)

    addvar                         shift and go to state 116

state 94

    (6) id_list -> ID addvar array .

    SEMICOLON       reduce using rule 6 (id_list -> ID addvar array .)
    COMMA           reduce using rule 6 (id_list -> ID addvar array .)
    R_PAREN         reduce using rule 6 (id_list -> ID addvar array .)


state 95

    (33) asignacion -> ID stack_operand_id array EQUAL . stack_operator expresion np_asignacion SEMICOLON
    (78) stack_operator -> .

    L_PAREN         reduce using rule 78 (stack_operator -> .)
    ID              reduce using rule 78 (stack_operator -> .)
    CTE_I           reduce using rule 78 (stack_operator -> .)
    CTE_F           reduce using rule 78 (stack_operator -> .)
    CTE_CHAR        reduce using rule 78 (stack_operator -> .)

    stack_operator                 shift and go to state 117

state 96

    (7) array -> L_BRACKET CTE_I . R_BRACKET

    R_BRACKET       shift and go to state 118


state 97

    (65) var_cte -> ID stack_operand_id .

    MULT            reduce using rule 65 (var_cte -> ID stack_operand_id .)
    DIV             reduce using rule 65 (var_cte -> ID stack_operand_id .)
    PLUS            reduce using rule 65 (var_cte -> ID stack_operand_id .)
    MINUS           reduce using rule 65 (var_cte -> ID stack_operand_id .)
    GT              reduce using rule 65 (var_cte -> ID stack_operand_id .)
    LT              reduce using rule 65 (var_cte -> ID stack_operand_id .)
    EQ              reduce using rule 65 (var_cte -> ID stack_operand_id .)
    LEQ             reduce using rule 65 (var_cte -> ID stack_operand_id .)
    GEQ             reduce using rule 65 (var_cte -> ID stack_operand_id .)
    R_PAREN         reduce using rule 65 (var_cte -> ID stack_operand_id .)
    COMMA           reduce using rule 65 (var_cte -> ID stack_operand_id .)
    SEMICOLON       reduce using rule 65 (var_cte -> ID stack_operand_id .)


state 98

    (63) factor -> L_PAREN fakebottom . expresion R_PAREN checkparentesis
    (48) expresion -> . exp checkrelop relop
    (55) exp -> . termino checkexp masmenos
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    expresion                      shift and go to state 119
    exp                            shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 99

    (34) llamada -> ID L_PAREN exp_rep R_PAREN . np_llamada SEMICOLON
    (84) np_llamada -> .

    SEMICOLON       reduce using rule 84 (np_llamada -> .)

    np_llamada                     shift and go to state 120

state 100

    (35) exp_rep -> exp_rep COMMA . expresion
    (48) expresion -> . exp checkrelop relop
    (55) exp -> . termino checkexp masmenos
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    expresion                      shift and go to state 121
    exp                            shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 101

    (48) expresion -> exp checkrelop . relop
    (49) relop -> . GT stack_operator expresion
    (50) relop -> . LT stack_operator expresion
    (51) relop -> . EQ stack_operator expresion
    (52) relop -> . LEQ stack_operator expresion
    (53) relop -> . GEQ stack_operator expresion
    (54) relop -> . empty
    (69) empty -> .

    GT              shift and go to state 123
    LT              shift and go to state 124
    EQ              shift and go to state 125
    LEQ             shift and go to state 126
    GEQ             shift and go to state 127
    R_PAREN         reduce using rule 69 (empty -> .)
    COMMA           reduce using rule 69 (empty -> .)
    SEMICOLON       reduce using rule 69 (empty -> .)

    relop                          shift and go to state 122
    empty                          shift and go to state 128

state 102

    (55) exp -> termino checkexp . masmenos
    (56) masmenos -> . PLUS stack_operator exp
    (57) masmenos -> . MINUS stack_operator exp
    (58) masmenos -> . empty
    (69) empty -> .

    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    GT              reduce using rule 69 (empty -> .)
    LT              reduce using rule 69 (empty -> .)
    EQ              reduce using rule 69 (empty -> .)
    LEQ             reduce using rule 69 (empty -> .)
    GEQ             reduce using rule 69 (empty -> .)
    R_PAREN         reduce using rule 69 (empty -> .)
    COMMA           reduce using rule 69 (empty -> .)
    SEMICOLON       reduce using rule 69 (empty -> .)

    masmenos                       shift and go to state 129
    empty                          shift and go to state 132

state 103

    (59) termino -> factor checkterm . multdiv
    (60) multdiv -> . MULT stack_operator termino
    (61) multdiv -> . DIV stack_operator termino
    (62) multdiv -> . empty
    (69) empty -> .

    MULT            shift and go to state 134
    DIV             shift and go to state 135
    PLUS            reduce using rule 69 (empty -> .)
    MINUS           reduce using rule 69 (empty -> .)
    GT              reduce using rule 69 (empty -> .)
    LT              reduce using rule 69 (empty -> .)
    EQ              reduce using rule 69 (empty -> .)
    LEQ             reduce using rule 69 (empty -> .)
    GEQ             reduce using rule 69 (empty -> .)
    R_PAREN         reduce using rule 69 (empty -> .)
    COMMA           reduce using rule 69 (empty -> .)
    SEMICOLON       reduce using rule 69 (empty -> .)

    multdiv                        shift and go to state 133
    empty                          shift and go to state 136

state 104

    (66) var_cte -> CTE_I stack_operand_int .

    MULT            reduce using rule 66 (var_cte -> CTE_I stack_operand_int .)
    DIV             reduce using rule 66 (var_cte -> CTE_I stack_operand_int .)
    PLUS            reduce using rule 66 (var_cte -> CTE_I stack_operand_int .)
    MINUS           reduce using rule 66 (var_cte -> CTE_I stack_operand_int .)
    GT              reduce using rule 66 (var_cte -> CTE_I stack_operand_int .)
    LT              reduce using rule 66 (var_cte -> CTE_I stack_operand_int .)
    EQ              reduce using rule 66 (var_cte -> CTE_I stack_operand_int .)
    LEQ             reduce using rule 66 (var_cte -> CTE_I stack_operand_int .)
    GEQ             reduce using rule 66 (var_cte -> CTE_I stack_operand_int .)
    R_PAREN         reduce using rule 66 (var_cte -> CTE_I stack_operand_int .)
    COMMA           reduce using rule 66 (var_cte -> CTE_I stack_operand_int .)
    SEMICOLON       reduce using rule 66 (var_cte -> CTE_I stack_operand_int .)


state 105

    (67) var_cte -> CTE_F stack_operand_float .

    MULT            reduce using rule 67 (var_cte -> CTE_F stack_operand_float .)
    DIV             reduce using rule 67 (var_cte -> CTE_F stack_operand_float .)
    PLUS            reduce using rule 67 (var_cte -> CTE_F stack_operand_float .)
    MINUS           reduce using rule 67 (var_cte -> CTE_F stack_operand_float .)
    GT              reduce using rule 67 (var_cte -> CTE_F stack_operand_float .)
    LT              reduce using rule 67 (var_cte -> CTE_F stack_operand_float .)
    EQ              reduce using rule 67 (var_cte -> CTE_F stack_operand_float .)
    LEQ             reduce using rule 67 (var_cte -> CTE_F stack_operand_float .)
    GEQ             reduce using rule 67 (var_cte -> CTE_F stack_operand_float .)
    R_PAREN         reduce using rule 67 (var_cte -> CTE_F stack_operand_float .)
    COMMA           reduce using rule 67 (var_cte -> CTE_F stack_operand_float .)
    SEMICOLON       reduce using rule 67 (var_cte -> CTE_F stack_operand_float .)


state 106

    (68) var_cte -> CTE_CHAR stack_operand_char .

    MULT            reduce using rule 68 (var_cte -> CTE_CHAR stack_operand_char .)
    DIV             reduce using rule 68 (var_cte -> CTE_CHAR stack_operand_char .)
    PLUS            reduce using rule 68 (var_cte -> CTE_CHAR stack_operand_char .)
    MINUS           reduce using rule 68 (var_cte -> CTE_CHAR stack_operand_char .)
    GT              reduce using rule 68 (var_cte -> CTE_CHAR stack_operand_char .)
    LT              reduce using rule 68 (var_cte -> CTE_CHAR stack_operand_char .)
    EQ              reduce using rule 68 (var_cte -> CTE_CHAR stack_operand_char .)
    LEQ             reduce using rule 68 (var_cte -> CTE_CHAR stack_operand_char .)
    GEQ             reduce using rule 68 (var_cte -> CTE_CHAR stack_operand_char .)
    R_PAREN         reduce using rule 68 (var_cte -> CTE_CHAR stack_operand_char .)
    COMMA           reduce using rule 68 (var_cte -> CTE_CHAR stack_operand_char .)
    SEMICOLON       reduce using rule 68 (var_cte -> CTE_CHAR stack_operand_char .)


state 107

    (44) condicion -> IF L_PAREN expresion R_PAREN . GotoF bloque else_aux
    (87) GotoF -> .

    L_BRACE         reduce using rule 87 (GotoF -> .)

    GotoF                          shift and go to state 137

state 108

    (39) escritura -> WRITE L_PAREN escritura_rep R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 138


state 109

    (40) escritura_rep -> escritura_rep COMMA . escritura_aux
    (42) escritura_aux -> . CTE_S
    (43) escritura_aux -> . expresion
    (48) expresion -> . exp checkrelop relop
    (55) exp -> . termino checkexp masmenos
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    CTE_S           shift and go to state 87
    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    escritura_aux                  shift and go to state 139
    expresion                      shift and go to state 88
    exp                            shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 110

    (37) retorno -> RETURN L_PAREN expresion R_PAREN . return SEMICOLON
    (86) return -> .

    SEMICOLON       reduce using rule 86 (return -> .)

    return                         shift and go to state 140

state 111

    (38) lectura -> READ L_PAREN id_list R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 141


state 112

    (47) repeticion -> WHILE addJump L_PAREN expresion . R_PAREN GotoF bloque end_while

    R_PAREN         shift and go to state 142


state 113

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN parms . R_PAREN vars2 bloque endProc

    R_PAREN         shift and go to state 143


state 114

    (21) parms -> tipo . ID id_list

    ID              shift and go to state 144


state 115

    (22) parms -> empty .

    R_PAREN         reduce using rule 22 (parms -> empty .)


state 116

    (5) id_list -> id_list COMMA ID addvar . array
    (7) array -> . L_BRACKET CTE_I R_BRACKET
    (8) array -> . empty
    (69) empty -> .

    L_BRACKET       shift and go to state 71
    SEMICOLON       reduce using rule 69 (empty -> .)
    COMMA           reduce using rule 69 (empty -> .)
    R_PAREN         reduce using rule 69 (empty -> .)

    array                          shift and go to state 145
    empty                          shift and go to state 72

state 117

    (33) asignacion -> ID stack_operand_id array EQUAL stack_operator . expresion np_asignacion SEMICOLON
    (48) expresion -> . exp checkrelop relop
    (55) exp -> . termino checkexp masmenos
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    expresion                      shift and go to state 146
    exp                            shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 118

    (7) array -> L_BRACKET CTE_I R_BRACKET .

    EQUAL           reduce using rule 7 (array -> L_BRACKET CTE_I R_BRACKET .)
    SEMICOLON       reduce using rule 7 (array -> L_BRACKET CTE_I R_BRACKET .)
    COMMA           reduce using rule 7 (array -> L_BRACKET CTE_I R_BRACKET .)
    R_PAREN         reduce using rule 7 (array -> L_BRACKET CTE_I R_BRACKET .)


state 119

    (63) factor -> L_PAREN fakebottom expresion . R_PAREN checkparentesis

    R_PAREN         shift and go to state 147


state 120

    (34) llamada -> ID L_PAREN exp_rep R_PAREN np_llamada . SEMICOLON

    SEMICOLON       shift and go to state 148


state 121

    (35) exp_rep -> exp_rep COMMA expresion .

    R_PAREN         reduce using rule 35 (exp_rep -> exp_rep COMMA expresion .)
    COMMA           reduce using rule 35 (exp_rep -> exp_rep COMMA expresion .)


state 122

    (48) expresion -> exp checkrelop relop .

    R_PAREN         reduce using rule 48 (expresion -> exp checkrelop relop .)
    COMMA           reduce using rule 48 (expresion -> exp checkrelop relop .)
    SEMICOLON       reduce using rule 48 (expresion -> exp checkrelop relop .)


state 123

    (49) relop -> GT . stack_operator expresion
    (78) stack_operator -> .

    L_PAREN         reduce using rule 78 (stack_operator -> .)
    ID              reduce using rule 78 (stack_operator -> .)
    CTE_I           reduce using rule 78 (stack_operator -> .)
    CTE_F           reduce using rule 78 (stack_operator -> .)
    CTE_CHAR        reduce using rule 78 (stack_operator -> .)

    stack_operator                 shift and go to state 149

state 124

    (50) relop -> LT . stack_operator expresion
    (78) stack_operator -> .

    L_PAREN         reduce using rule 78 (stack_operator -> .)
    ID              reduce using rule 78 (stack_operator -> .)
    CTE_I           reduce using rule 78 (stack_operator -> .)
    CTE_F           reduce using rule 78 (stack_operator -> .)
    CTE_CHAR        reduce using rule 78 (stack_operator -> .)

    stack_operator                 shift and go to state 150

state 125

    (51) relop -> EQ . stack_operator expresion
    (78) stack_operator -> .

    L_PAREN         reduce using rule 78 (stack_operator -> .)
    ID              reduce using rule 78 (stack_operator -> .)
    CTE_I           reduce using rule 78 (stack_operator -> .)
    CTE_F           reduce using rule 78 (stack_operator -> .)
    CTE_CHAR        reduce using rule 78 (stack_operator -> .)

    stack_operator                 shift and go to state 151

state 126

    (52) relop -> LEQ . stack_operator expresion
    (78) stack_operator -> .

    L_PAREN         reduce using rule 78 (stack_operator -> .)
    ID              reduce using rule 78 (stack_operator -> .)
    CTE_I           reduce using rule 78 (stack_operator -> .)
    CTE_F           reduce using rule 78 (stack_operator -> .)
    CTE_CHAR        reduce using rule 78 (stack_operator -> .)

    stack_operator                 shift and go to state 152

state 127

    (53) relop -> GEQ . stack_operator expresion
    (78) stack_operator -> .

    L_PAREN         reduce using rule 78 (stack_operator -> .)
    ID              reduce using rule 78 (stack_operator -> .)
    CTE_I           reduce using rule 78 (stack_operator -> .)
    CTE_F           reduce using rule 78 (stack_operator -> .)
    CTE_CHAR        reduce using rule 78 (stack_operator -> .)

    stack_operator                 shift and go to state 153

state 128

    (54) relop -> empty .

    R_PAREN         reduce using rule 54 (relop -> empty .)
    COMMA           reduce using rule 54 (relop -> empty .)
    SEMICOLON       reduce using rule 54 (relop -> empty .)


state 129

    (55) exp -> termino checkexp masmenos .

    GT              reduce using rule 55 (exp -> termino checkexp masmenos .)
    LT              reduce using rule 55 (exp -> termino checkexp masmenos .)
    EQ              reduce using rule 55 (exp -> termino checkexp masmenos .)
    LEQ             reduce using rule 55 (exp -> termino checkexp masmenos .)
    GEQ             reduce using rule 55 (exp -> termino checkexp masmenos .)
    R_PAREN         reduce using rule 55 (exp -> termino checkexp masmenos .)
    COMMA           reduce using rule 55 (exp -> termino checkexp masmenos .)
    SEMICOLON       reduce using rule 55 (exp -> termino checkexp masmenos .)


state 130

    (56) masmenos -> PLUS . stack_operator exp
    (78) stack_operator -> .

    L_PAREN         reduce using rule 78 (stack_operator -> .)
    ID              reduce using rule 78 (stack_operator -> .)
    CTE_I           reduce using rule 78 (stack_operator -> .)
    CTE_F           reduce using rule 78 (stack_operator -> .)
    CTE_CHAR        reduce using rule 78 (stack_operator -> .)

    stack_operator                 shift and go to state 154

state 131

    (57) masmenos -> MINUS . stack_operator exp
    (78) stack_operator -> .

    L_PAREN         reduce using rule 78 (stack_operator -> .)
    ID              reduce using rule 78 (stack_operator -> .)
    CTE_I           reduce using rule 78 (stack_operator -> .)
    CTE_F           reduce using rule 78 (stack_operator -> .)
    CTE_CHAR        reduce using rule 78 (stack_operator -> .)

    stack_operator                 shift and go to state 155

state 132

    (58) masmenos -> empty .

    GT              reduce using rule 58 (masmenos -> empty .)
    LT              reduce using rule 58 (masmenos -> empty .)
    EQ              reduce using rule 58 (masmenos -> empty .)
    LEQ             reduce using rule 58 (masmenos -> empty .)
    GEQ             reduce using rule 58 (masmenos -> empty .)
    R_PAREN         reduce using rule 58 (masmenos -> empty .)
    COMMA           reduce using rule 58 (masmenos -> empty .)
    SEMICOLON       reduce using rule 58 (masmenos -> empty .)


state 133

    (59) termino -> factor checkterm multdiv .

    PLUS            reduce using rule 59 (termino -> factor checkterm multdiv .)
    MINUS           reduce using rule 59 (termino -> factor checkterm multdiv .)
    GT              reduce using rule 59 (termino -> factor checkterm multdiv .)
    LT              reduce using rule 59 (termino -> factor checkterm multdiv .)
    EQ              reduce using rule 59 (termino -> factor checkterm multdiv .)
    LEQ             reduce using rule 59 (termino -> factor checkterm multdiv .)
    GEQ             reduce using rule 59 (termino -> factor checkterm multdiv .)
    R_PAREN         reduce using rule 59 (termino -> factor checkterm multdiv .)
    COMMA           reduce using rule 59 (termino -> factor checkterm multdiv .)
    SEMICOLON       reduce using rule 59 (termino -> factor checkterm multdiv .)


state 134

    (60) multdiv -> MULT . stack_operator termino
    (78) stack_operator -> .

    L_PAREN         reduce using rule 78 (stack_operator -> .)
    ID              reduce using rule 78 (stack_operator -> .)
    CTE_I           reduce using rule 78 (stack_operator -> .)
    CTE_F           reduce using rule 78 (stack_operator -> .)
    CTE_CHAR        reduce using rule 78 (stack_operator -> .)

    stack_operator                 shift and go to state 156

state 135

    (61) multdiv -> DIV . stack_operator termino
    (78) stack_operator -> .

    L_PAREN         reduce using rule 78 (stack_operator -> .)
    ID              reduce using rule 78 (stack_operator -> .)
    CTE_I           reduce using rule 78 (stack_operator -> .)
    CTE_F           reduce using rule 78 (stack_operator -> .)
    CTE_CHAR        reduce using rule 78 (stack_operator -> .)

    stack_operator                 shift and go to state 157

state 136

    (62) multdiv -> empty .

    PLUS            reduce using rule 62 (multdiv -> empty .)
    MINUS           reduce using rule 62 (multdiv -> empty .)
    GT              reduce using rule 62 (multdiv -> empty .)
    LT              reduce using rule 62 (multdiv -> empty .)
    EQ              reduce using rule 62 (multdiv -> empty .)
    LEQ             reduce using rule 62 (multdiv -> empty .)
    GEQ             reduce using rule 62 (multdiv -> empty .)
    R_PAREN         reduce using rule 62 (multdiv -> empty .)
    COMMA           reduce using rule 62 (multdiv -> empty .)
    SEMICOLON       reduce using rule 62 (multdiv -> empty .)


state 137

    (44) condicion -> IF L_PAREN expresion R_PAREN GotoF . bloque else_aux
    (23) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 21

    bloque                         shift and go to state 158

state 138

    (39) escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .

    R_BRACE         reduce using rule 39 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    ID              reduce using rule 39 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    IF              reduce using rule 39 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    WRITE           reduce using rule 39 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    RETURN          reduce using rule 39 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    READ            reduce using rule 39 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    WHILE           reduce using rule 39 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)


state 139

    (40) escritura_rep -> escritura_rep COMMA escritura_aux .

    R_PAREN         reduce using rule 40 (escritura_rep -> escritura_rep COMMA escritura_aux .)
    COMMA           reduce using rule 40 (escritura_rep -> escritura_rep COMMA escritura_aux .)


state 140

    (37) retorno -> RETURN L_PAREN expresion R_PAREN return . SEMICOLON

    SEMICOLON       shift and go to state 159


state 141

    (38) lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .

    R_BRACE         reduce using rule 38 (lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    ID              reduce using rule 38 (lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    IF              reduce using rule 38 (lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    WRITE           reduce using rule 38 (lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    RETURN          reduce using rule 38 (lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    READ            reduce using rule 38 (lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    WHILE           reduce using rule 38 (lectura -> READ L_PAREN id_list R_PAREN SEMICOLON .)


state 142

    (47) repeticion -> WHILE addJump L_PAREN expresion R_PAREN . GotoF bloque end_while
    (87) GotoF -> .

    L_BRACE         reduce using rule 87 (GotoF -> .)

    GotoF                          shift and go to state 160

state 143

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN parms R_PAREN . vars2 bloque endProc
    (3) vars2 -> . vars vars2
    (4) vars2 -> . empty
    (2) vars -> . VAR tipo COLON id_list SEMICOLON
    (69) empty -> .

    VAR             shift and go to state 9
    L_BRACE         reduce using rule 69 (empty -> .)

    vars2                          shift and go to state 161
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 144

    (21) parms -> tipo ID . id_list
    (5) id_list -> . id_list COMMA ID addvar array
    (6) id_list -> . ID addvar array

    ID              shift and go to state 56

    id_list                        shift and go to state 162

state 145

    (5) id_list -> id_list COMMA ID addvar array .

    SEMICOLON       reduce using rule 5 (id_list -> id_list COMMA ID addvar array .)
    COMMA           reduce using rule 5 (id_list -> id_list COMMA ID addvar array .)
    R_PAREN         reduce using rule 5 (id_list -> id_list COMMA ID addvar array .)


state 146

    (33) asignacion -> ID stack_operand_id array EQUAL stack_operator expresion . np_asignacion SEMICOLON
    (85) np_asignacion -> .

    SEMICOLON       reduce using rule 85 (np_asignacion -> .)

    np_asignacion                  shift and go to state 163

state 147

    (63) factor -> L_PAREN fakebottom expresion R_PAREN . checkparentesis
    (80) checkparentesis -> .

    MULT            reduce using rule 80 (checkparentesis -> .)
    DIV             reduce using rule 80 (checkparentesis -> .)
    PLUS            reduce using rule 80 (checkparentesis -> .)
    MINUS           reduce using rule 80 (checkparentesis -> .)
    GT              reduce using rule 80 (checkparentesis -> .)
    LT              reduce using rule 80 (checkparentesis -> .)
    EQ              reduce using rule 80 (checkparentesis -> .)
    LEQ             reduce using rule 80 (checkparentesis -> .)
    GEQ             reduce using rule 80 (checkparentesis -> .)
    R_PAREN         reduce using rule 80 (checkparentesis -> .)
    COMMA           reduce using rule 80 (checkparentesis -> .)
    SEMICOLON       reduce using rule 80 (checkparentesis -> .)

    checkparentesis                shift and go to state 164

state 148

    (34) llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .

    R_BRACE         reduce using rule 34 (llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    ID              reduce using rule 34 (llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    IF              reduce using rule 34 (llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    WRITE           reduce using rule 34 (llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    RETURN          reduce using rule 34 (llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    READ            reduce using rule 34 (llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    WHILE           reduce using rule 34 (llamada -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)


state 149

    (49) relop -> GT stack_operator . expresion
    (48) expresion -> . exp checkrelop relop
    (55) exp -> . termino checkexp masmenos
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    expresion                      shift and go to state 165
    exp                            shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 150

    (50) relop -> LT stack_operator . expresion
    (48) expresion -> . exp checkrelop relop
    (55) exp -> . termino checkexp masmenos
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    expresion                      shift and go to state 166
    exp                            shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 151

    (51) relop -> EQ stack_operator . expresion
    (48) expresion -> . exp checkrelop relop
    (55) exp -> . termino checkexp masmenos
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    expresion                      shift and go to state 167
    exp                            shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 152

    (52) relop -> LEQ stack_operator . expresion
    (48) expresion -> . exp checkrelop relop
    (55) exp -> . termino checkexp masmenos
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    expresion                      shift and go to state 168
    exp                            shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 153

    (53) relop -> GEQ stack_operator . expresion
    (48) expresion -> . exp checkrelop relop
    (55) exp -> . termino checkexp masmenos
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    expresion                      shift and go to state 169
    exp                            shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 154

    (56) masmenos -> PLUS stack_operator . exp
    (55) exp -> . termino checkexp masmenos
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    exp                            shift and go to state 170
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 155

    (57) masmenos -> MINUS stack_operator . exp
    (55) exp -> . termino checkexp masmenos
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    exp                            shift and go to state 171
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 156

    (60) multdiv -> MULT stack_operator . termino
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    termino                        shift and go to state 172
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 157

    (61) multdiv -> DIV stack_operator . termino
    (59) termino -> . factor checkterm multdiv
    (63) factor -> . L_PAREN fakebottom expresion R_PAREN checkparentesis
    (64) factor -> . var_cte
    (65) var_cte -> . ID stack_operand_id
    (66) var_cte -> . CTE_I stack_operand_int
    (67) var_cte -> . CTE_F stack_operand_float
    (68) var_cte -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 74
    ID              shift and go to state 73
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 82
    CTE_CHAR        shift and go to state 83

    termino                        shift and go to state 173
    factor                         shift and go to state 79
    var_cte                        shift and go to state 80

state 158

    (44) condicion -> IF L_PAREN expresion R_PAREN GotoF bloque . else_aux
    (45) else_aux -> . ELSE Goto bloque end_if
    (46) else_aux -> . end_if
    (89) end_if -> .

    ELSE            shift and go to state 175
    R_BRACE         reduce using rule 89 (end_if -> .)
    ID              reduce using rule 89 (end_if -> .)
    IF              reduce using rule 89 (end_if -> .)
    WRITE           reduce using rule 89 (end_if -> .)
    RETURN          reduce using rule 89 (end_if -> .)
    READ            reduce using rule 89 (end_if -> .)
    WHILE           reduce using rule 89 (end_if -> .)

    else_aux                       shift and go to state 174
    end_if                         shift and go to state 176

state 159

    (37) retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .

    R_BRACE         reduce using rule 37 (retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .)
    ID              reduce using rule 37 (retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .)
    IF              reduce using rule 37 (retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .)
    WRITE           reduce using rule 37 (retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .)
    RETURN          reduce using rule 37 (retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .)
    READ            reduce using rule 37 (retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .)
    WHILE           reduce using rule 37 (retorno -> RETURN L_PAREN expresion R_PAREN return SEMICOLON .)


state 160

    (47) repeticion -> WHILE addJump L_PAREN expresion R_PAREN GotoF . bloque end_while
    (23) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 21

    bloque                         shift and go to state 177

state 161

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN parms R_PAREN vars2 . bloque endProc
    (23) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 21

    bloque                         shift and go to state 178

state 162

    (21) parms -> tipo ID id_list .
    (5) id_list -> id_list . COMMA ID addvar array

    R_PAREN         reduce using rule 21 (parms -> tipo ID id_list .)
    COMMA           shift and go to state 68


state 163

    (33) asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion . SEMICOLON

    SEMICOLON       shift and go to state 179


state 164

    (63) factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .

    MULT            reduce using rule 63 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    DIV             reduce using rule 63 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    PLUS            reduce using rule 63 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    MINUS           reduce using rule 63 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    GT              reduce using rule 63 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    LT              reduce using rule 63 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    EQ              reduce using rule 63 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    LEQ             reduce using rule 63 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    GEQ             reduce using rule 63 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    R_PAREN         reduce using rule 63 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    COMMA           reduce using rule 63 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)
    SEMICOLON       reduce using rule 63 (factor -> L_PAREN fakebottom expresion R_PAREN checkparentesis .)


state 165

    (49) relop -> GT stack_operator expresion .

    R_PAREN         reduce using rule 49 (relop -> GT stack_operator expresion .)
    COMMA           reduce using rule 49 (relop -> GT stack_operator expresion .)
    SEMICOLON       reduce using rule 49 (relop -> GT stack_operator expresion .)


state 166

    (50) relop -> LT stack_operator expresion .

    R_PAREN         reduce using rule 50 (relop -> LT stack_operator expresion .)
    COMMA           reduce using rule 50 (relop -> LT stack_operator expresion .)
    SEMICOLON       reduce using rule 50 (relop -> LT stack_operator expresion .)


state 167

    (51) relop -> EQ stack_operator expresion .

    R_PAREN         reduce using rule 51 (relop -> EQ stack_operator expresion .)
    COMMA           reduce using rule 51 (relop -> EQ stack_operator expresion .)
    SEMICOLON       reduce using rule 51 (relop -> EQ stack_operator expresion .)


state 168

    (52) relop -> LEQ stack_operator expresion .

    R_PAREN         reduce using rule 52 (relop -> LEQ stack_operator expresion .)
    COMMA           reduce using rule 52 (relop -> LEQ stack_operator expresion .)
    SEMICOLON       reduce using rule 52 (relop -> LEQ stack_operator expresion .)


state 169

    (53) relop -> GEQ stack_operator expresion .

    R_PAREN         reduce using rule 53 (relop -> GEQ stack_operator expresion .)
    COMMA           reduce using rule 53 (relop -> GEQ stack_operator expresion .)
    SEMICOLON       reduce using rule 53 (relop -> GEQ stack_operator expresion .)


state 170

    (56) masmenos -> PLUS stack_operator exp .

    GT              reduce using rule 56 (masmenos -> PLUS stack_operator exp .)
    LT              reduce using rule 56 (masmenos -> PLUS stack_operator exp .)
    EQ              reduce using rule 56 (masmenos -> PLUS stack_operator exp .)
    LEQ             reduce using rule 56 (masmenos -> PLUS stack_operator exp .)
    GEQ             reduce using rule 56 (masmenos -> PLUS stack_operator exp .)
    R_PAREN         reduce using rule 56 (masmenos -> PLUS stack_operator exp .)
    COMMA           reduce using rule 56 (masmenos -> PLUS stack_operator exp .)
    SEMICOLON       reduce using rule 56 (masmenos -> PLUS stack_operator exp .)


state 171

    (57) masmenos -> MINUS stack_operator exp .

    GT              reduce using rule 57 (masmenos -> MINUS stack_operator exp .)
    LT              reduce using rule 57 (masmenos -> MINUS stack_operator exp .)
    EQ              reduce using rule 57 (masmenos -> MINUS stack_operator exp .)
    LEQ             reduce using rule 57 (masmenos -> MINUS stack_operator exp .)
    GEQ             reduce using rule 57 (masmenos -> MINUS stack_operator exp .)
    R_PAREN         reduce using rule 57 (masmenos -> MINUS stack_operator exp .)
    COMMA           reduce using rule 57 (masmenos -> MINUS stack_operator exp .)
    SEMICOLON       reduce using rule 57 (masmenos -> MINUS stack_operator exp .)


state 172

    (60) multdiv -> MULT stack_operator termino .

    PLUS            reduce using rule 60 (multdiv -> MULT stack_operator termino .)
    MINUS           reduce using rule 60 (multdiv -> MULT stack_operator termino .)
    GT              reduce using rule 60 (multdiv -> MULT stack_operator termino .)
    LT              reduce using rule 60 (multdiv -> MULT stack_operator termino .)
    EQ              reduce using rule 60 (multdiv -> MULT stack_operator termino .)
    LEQ             reduce using rule 60 (multdiv -> MULT stack_operator termino .)
    GEQ             reduce using rule 60 (multdiv -> MULT stack_operator termino .)
    R_PAREN         reduce using rule 60 (multdiv -> MULT stack_operator termino .)
    COMMA           reduce using rule 60 (multdiv -> MULT stack_operator termino .)
    SEMICOLON       reduce using rule 60 (multdiv -> MULT stack_operator termino .)


state 173

    (61) multdiv -> DIV stack_operator termino .

    PLUS            reduce using rule 61 (multdiv -> DIV stack_operator termino .)
    MINUS           reduce using rule 61 (multdiv -> DIV stack_operator termino .)
    GT              reduce using rule 61 (multdiv -> DIV stack_operator termino .)
    LT              reduce using rule 61 (multdiv -> DIV stack_operator termino .)
    EQ              reduce using rule 61 (multdiv -> DIV stack_operator termino .)
    LEQ             reduce using rule 61 (multdiv -> DIV stack_operator termino .)
    GEQ             reduce using rule 61 (multdiv -> DIV stack_operator termino .)
    R_PAREN         reduce using rule 61 (multdiv -> DIV stack_operator termino .)
    COMMA           reduce using rule 61 (multdiv -> DIV stack_operator termino .)
    SEMICOLON       reduce using rule 61 (multdiv -> DIV stack_operator termino .)


state 174

    (44) condicion -> IF L_PAREN expresion R_PAREN GotoF bloque else_aux .

    R_BRACE         reduce using rule 44 (condicion -> IF L_PAREN expresion R_PAREN GotoF bloque else_aux .)
    ID              reduce using rule 44 (condicion -> IF L_PAREN expresion R_PAREN GotoF bloque else_aux .)
    IF              reduce using rule 44 (condicion -> IF L_PAREN expresion R_PAREN GotoF bloque else_aux .)
    WRITE           reduce using rule 44 (condicion -> IF L_PAREN expresion R_PAREN GotoF bloque else_aux .)
    RETURN          reduce using rule 44 (condicion -> IF L_PAREN expresion R_PAREN GotoF bloque else_aux .)
    READ            reduce using rule 44 (condicion -> IF L_PAREN expresion R_PAREN GotoF bloque else_aux .)
    WHILE           reduce using rule 44 (condicion -> IF L_PAREN expresion R_PAREN GotoF bloque else_aux .)


state 175

    (45) else_aux -> ELSE . Goto bloque end_if
    (88) Goto -> .

    L_BRACE         reduce using rule 88 (Goto -> .)

    Goto                           shift and go to state 180

state 176

    (46) else_aux -> end_if .

    R_BRACE         reduce using rule 46 (else_aux -> end_if .)
    ID              reduce using rule 46 (else_aux -> end_if .)
    IF              reduce using rule 46 (else_aux -> end_if .)
    WRITE           reduce using rule 46 (else_aux -> end_if .)
    RETURN          reduce using rule 46 (else_aux -> end_if .)
    READ            reduce using rule 46 (else_aux -> end_if .)
    WHILE           reduce using rule 46 (else_aux -> end_if .)


state 177

    (47) repeticion -> WHILE addJump L_PAREN expresion R_PAREN GotoF bloque . end_while
    (90) end_while -> .

    R_BRACE         reduce using rule 90 (end_while -> .)
    ID              reduce using rule 90 (end_while -> .)
    IF              reduce using rule 90 (end_while -> .)
    WRITE           reduce using rule 90 (end_while -> .)
    RETURN          reduce using rule 90 (end_while -> .)
    READ            reduce using rule 90 (end_while -> .)
    WHILE           reduce using rule 90 (end_while -> .)

    end_while                      shift and go to state 181

state 178

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN parms R_PAREN vars2 bloque . endProc
    (92) endProc -> .

    FUNCTION        reduce using rule 92 (endProc -> .)
    L_BRACE         reduce using rule 92 (endProc -> .)

    endProc                        shift and go to state 182

state 179

    (33) asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .

    R_BRACE         reduce using rule 33 (asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .)
    ID              reduce using rule 33 (asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .)
    IF              reduce using rule 33 (asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .)
    WRITE           reduce using rule 33 (asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .)
    RETURN          reduce using rule 33 (asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .)
    READ            reduce using rule 33 (asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .)
    WHILE           reduce using rule 33 (asignacion -> ID stack_operand_id array EQUAL stack_operator expresion np_asignacion SEMICOLON .)


state 180

    (45) else_aux -> ELSE Goto . bloque end_if
    (23) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 21

    bloque                         shift and go to state 183

state 181

    (47) repeticion -> WHILE addJump L_PAREN expresion R_PAREN GotoF bloque end_while .

    R_BRACE         reduce using rule 47 (repeticion -> WHILE addJump L_PAREN expresion R_PAREN GotoF bloque end_while .)
    ID              reduce using rule 47 (repeticion -> WHILE addJump L_PAREN expresion R_PAREN GotoF bloque end_while .)
    IF              reduce using rule 47 (repeticion -> WHILE addJump L_PAREN expresion R_PAREN GotoF bloque end_while .)
    WRITE           reduce using rule 47 (repeticion -> WHILE addJump L_PAREN expresion R_PAREN GotoF bloque end_while .)
    RETURN          reduce using rule 47 (repeticion -> WHILE addJump L_PAREN expresion R_PAREN GotoF bloque end_while .)
    READ            reduce using rule 47 (repeticion -> WHILE addJump L_PAREN expresion R_PAREN GotoF bloque end_while .)
    WHILE           reduce using rule 47 (repeticion -> WHILE addJump L_PAREN expresion R_PAREN GotoF bloque end_while .)


state 182

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN parms R_PAREN vars2 bloque endProc .

    FUNCTION        reduce using rule 13 (func -> FUNCTION tipo_func ID addfunc L_PAREN parms R_PAREN vars2 bloque endProc .)
    L_BRACE         reduce using rule 13 (func -> FUNCTION tipo_func ID addfunc L_PAREN parms R_PAREN vars2 bloque endProc .)


state 183

    (45) else_aux -> ELSE Goto bloque . end_if
    (89) end_if -> .

    R_BRACE         reduce using rule 89 (end_if -> .)
    ID              reduce using rule 89 (end_if -> .)
    IF              reduce using rule 89 (end_if -> .)
    WRITE           reduce using rule 89 (end_if -> .)
    RETURN          reduce using rule 89 (end_if -> .)
    READ            reduce using rule 89 (end_if -> .)
    WHILE           reduce using rule 89 (end_if -> .)

    end_if                         shift and go to state 184

state 184

    (45) else_aux -> ELSE Goto bloque end_if .

    R_BRACE         reduce using rule 45 (else_aux -> ELSE Goto bloque end_if .)
    ID              reduce using rule 45 (else_aux -> ELSE Goto bloque end_if .)
    IF              reduce using rule 45 (else_aux -> ELSE Goto bloque end_if .)
    WRITE           reduce using rule 45 (else_aux -> ELSE Goto bloque end_if .)
    RETURN          reduce using rule 45 (else_aux -> ELSE Goto bloque end_if .)
    READ            reduce using rule 45 (else_aux -> ELSE Goto bloque end_if .)
    WHILE           reduce using rule 45 (else_aux -> ELSE Goto bloque end_if .)

