Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON VARS FUNC BLOQUE
Rule 2     PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON FUNC BLOQUE
Rule 3     VARS -> VAR addvar id_list COLON TIPO SEMICOLON
Rule 4     VARS -> empty
Rule 5     id_list -> id_list COMMA ID array
Rule 6     id_list -> ID array
Rule 7     array -> L_BRACKET CTE_I R_BRACKET
Rule 8     array -> empty
Rule 9     TIPO -> INT current_type
Rule 10    TIPO -> FLOAT current_type
Rule 11    TIPO -> CHAR current_type
Rule 12    FUNC -> FUNCTION TIPO ID L_PAREN PARMS R_PAREN VARS BLOQUE
Rule 13    PARMS -> TIPO ID id_list
Rule 14    PARMS -> empty
Rule 15    BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE
Rule 16    ESTATUTO_rep -> ESTATUTO_rep ESTATUTO
Rule 17    ESTATUTO_rep -> ESTATUTO
Rule 18    ESTATUTO -> ASIGNACION
Rule 19    ESTATUTO -> CONDICION
Rule 20    ESTATUTO -> ESCRITURA
Rule 21    ESTATUTO -> LLAMADA
Rule 22    ESTATUTO -> RETORNO
Rule 23    ESTATUTO -> LECTURA
Rule 24    ESTATUTO -> REPETICION
Rule 25    ASIGNACION -> ID array EQUAL EXPRESION np_asignacion SEMICOLON
Rule 26    LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON
Rule 27    LLAMADA -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON
Rule 28    exp_rep -> exp_rep COMMA EXPRESION
Rule 29    exp_rep -> EXPRESION
Rule 30    FUNC_ESPECIAL -> MEDIA
Rule 31    FUNC_ESPECIAL -> MODA
Rule 32    FUNC_ESPECIAL -> VARIANZA
Rule 33    FUNC_ESPECIAL -> REG
Rule 34    FUNC_ESPECIAL -> PLOTXY
Rule 35    RETORNO -> RETURN L_PAREN EXPRESION R_PAREN SEMICOLON
Rule 36    LECTURA -> READ L_PAREN id_list R_PAREN SEMICOLON
Rule 37    ESCRITURA -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
Rule 38    escritura_rep -> escritura_rep COMMA escritura_aux
Rule 39    escritura_rep -> escritura_aux
Rule 40    escritura_aux -> CTE_S
Rule 41    escritura_aux -> EXPRESION
Rule 42    CONDICION -> IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux
Rule 43    else_aux -> ELSE BLOQUE
Rule 44    else_aux -> empty
Rule 45    REPETICION -> WHILE L_PAREN EXPRESION R_PAREN BLOQUE
Rule 46    REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE
Rule 47    EXPRESION -> EXP
Rule 48    EXPRESION -> EXP RELOP EXP
Rule 49    RELOP -> GT stack_operator
Rule 50    RELOP -> LT stack_operator
Rule 51    RELOP -> EQ stack_operator
Rule 52    RELOP -> LEQ stack_operator
Rule 53    RELOP -> GEQ stack_operator
Rule 54    EXP -> TERMINO
Rule 55    EXP -> TERMINO MASMENOS TERMINO
Rule 56    MASMENOS -> PLUS stack_operator
Rule 57    MASMENOS -> MINUS stack_operator
Rule 58    TERMINO -> FACTOR
Rule 59    TERMINO -> FACTOR MULTDIV FACTOR
Rule 60    MULTDIV -> MULT stack_operator
Rule 61    MULTDIV -> DIV stack_operator
Rule 62    FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN stack_operator
Rule 63    FACTOR -> MASMENOS VAR_CTE
Rule 64    FACTOR -> VAR_CTE
Rule 65    VAR_CTE -> ID stack_operand_id
Rule 66    VAR_CTE -> CTE_I stack_operand_int
Rule 67    VAR_CTE -> CTE_F stack_operand_float
Rule 68    VAR_CTE -> CTE_CHAR stack_operand_char
Rule 69    empty -> <empty>
Rule 70    create_dirfunc -> <empty>
Rule 71    current_type -> <empty>
Rule 72    addvar -> <empty>
Rule 73    stack_operand_id -> <empty>
Rule 74    stack_operand_int -> <empty>
Rule 75    stack_operand_float -> <empty>
Rule 76    stack_operand_char -> <empty>
Rule 77    stack_operator -> <empty>
Rule 78    np_llamada -> <empty>
Rule 79    np_asignacion -> <empty>
Rule 80    np_condicion -> <empty>
Rule 81    np_condicion2 -> <empty>

Terminals, with rules where they appear

CHAR                 : 11
COLON                : 3
COMMA                : 5 28 38
CTE_CHAR             : 68
CTE_F                : 67
CTE_I                : 7 66
CTE_S                : 40
DIV                  : 61
DO                   : 46
ELSE                 : 43
EQ                   : 51
EQUAL                : 25 46
FLOAT                : 10
FOR                  : 46
FUNCTION             : 12
GEQ                  : 53
GT                   : 49
ID                   : 1 2 5 6 12 13 25 27 46 65
IF                   : 42
INT                  : 9
LEQ                  : 52
LT                   : 50
L_BRACE              : 15
L_BRACKET            : 7
L_PAREN              : 12 26 27 35 36 37 42 45 62
MEDIA                : 30
MINUS                : 57
MODA                 : 31
MULT                 : 60
PLOTXY               : 34
PLUS                 : 56
PROGRAM              : 1 2
READ                 : 36
REG                  : 33
RETURN               : 35
R_BRACE              : 15
R_BRACKET            : 7
R_PAREN              : 12 26 27 35 36 37 42 45 62
SEMICOLON            : 1 2 3 25 26 27 35 36 37
TO                   : 46
VAR                  : 3
VARIANZA             : 32
WHILE                : 45
WRITE                : 37
error                : 

Nonterminals, with rules where they appear

ASIGNACION           : 18
BLOQUE               : 1 2 12 42 43 45 46
CONDICION            : 19
ESCRITURA            : 20
ESTATUTO             : 16 17
ESTATUTO_rep         : 15 16
EXP                  : 47 48 48
EXPRESION            : 25 28 29 35 41 42 45 46 46 62
FACTOR               : 58 59 59
FUNC                 : 1 2
FUNC_ESPECIAL        : 26
LECTURA              : 23
LLAMADA              : 21
MASMENOS             : 55 63
MULTDIV              : 59
PARMS                : 12
PROGRAMA             : 0
RELOP                : 48
REPETICION           : 24
RETORNO              : 22
TERMINO              : 54 55 55
TIPO                 : 3 12 13
VARS                 : 1 12
VAR_CTE              : 63 64
addvar               : 3
array                : 5 6 25
create_dirfunc       : 1 2
current_type         : 9 10 11
else_aux             : 42
empty                : 4 8 14 44
escritura_aux        : 38 39
escritura_rep        : 37 38
exp_rep              : 26 27 28
id_list              : 3 5 13 36
np_asignacion        : 25
np_condicion         : 
np_condicion2        : 
np_llamada           : 27
stack_operand_char   : 68
stack_operand_float  : 67
stack_operand_id     : 65
stack_operand_int    : 66
stack_operator       : 49 50 51 52 53 56 57 60 61 62 62

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . PROGRAM create_dirfunc ID SEMICOLON VARS FUNC BLOQUE
    (2) PROGRAMA -> . PROGRAM create_dirfunc ID SEMICOLON FUNC BLOQUE

    PROGRAM         shift and go to state 2

    PROGRAMA                       shift and go to state 1

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> PROGRAM . create_dirfunc ID SEMICOLON VARS FUNC BLOQUE
    (2) PROGRAMA -> PROGRAM . create_dirfunc ID SEMICOLON FUNC BLOQUE
    (70) create_dirfunc -> .

    ID              reduce using rule 70 (create_dirfunc -> .)

    create_dirfunc                 shift and go to state 3

state 3

    (1) PROGRAMA -> PROGRAM create_dirfunc . ID SEMICOLON VARS FUNC BLOQUE
    (2) PROGRAMA -> PROGRAM create_dirfunc . ID SEMICOLON FUNC BLOQUE

    ID              shift and go to state 4


state 4

    (1) PROGRAMA -> PROGRAM create_dirfunc ID . SEMICOLON VARS FUNC BLOQUE
    (2) PROGRAMA -> PROGRAM create_dirfunc ID . SEMICOLON FUNC BLOQUE

    SEMICOLON       shift and go to state 5


state 5

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON . VARS FUNC BLOQUE
    (2) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON . FUNC BLOQUE
    (3) VARS -> . VAR addvar id_list COLON TIPO SEMICOLON
    (4) VARS -> . empty
    (12) FUNC -> . FUNCTION TIPO ID L_PAREN PARMS R_PAREN VARS BLOQUE
    (69) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    VAR             shift and go to state 8
    FUNCTION        shift and go to state 10

  ! FUNCTION        [ reduce using rule 69 (empty -> .) ]

    VARS                           shift and go to state 6
    FUNC                           shift and go to state 7
    empty                          shift and go to state 9

state 6

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON VARS . FUNC BLOQUE
    (12) FUNC -> . FUNCTION TIPO ID L_PAREN PARMS R_PAREN VARS BLOQUE

    FUNCTION        shift and go to state 10

    FUNC                           shift and go to state 11

state 7

    (2) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON FUNC . BLOQUE
    (15) BLOQUE -> . L_BRACE ESTATUTO_rep R_BRACE

    L_BRACE         shift and go to state 13

    BLOQUE                         shift and go to state 12

state 8

    (3) VARS -> VAR . addvar id_list COLON TIPO SEMICOLON
    (72) addvar -> .

    ID              reduce using rule 72 (addvar -> .)

    addvar                         shift and go to state 14

state 9

    (4) VARS -> empty .

    FUNCTION        reduce using rule 4 (VARS -> empty .)
    L_BRACE         reduce using rule 4 (VARS -> empty .)


state 10

    (12) FUNC -> FUNCTION . TIPO ID L_PAREN PARMS R_PAREN VARS BLOQUE
    (9) TIPO -> . INT current_type
    (10) TIPO -> . FLOAT current_type
    (11) TIPO -> . CHAR current_type

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    TIPO                           shift and go to state 15

state 11

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON VARS FUNC . BLOQUE
    (15) BLOQUE -> . L_BRACE ESTATUTO_rep R_BRACE

    L_BRACE         shift and go to state 13

    BLOQUE                         shift and go to state 19

state 12

    (2) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON FUNC BLOQUE .

    $end            reduce using rule 2 (PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON FUNC BLOQUE .)


state 13

    (15) BLOQUE -> L_BRACE . ESTATUTO_rep R_BRACE
    (16) ESTATUTO_rep -> . ESTATUTO_rep ESTATUTO
    (17) ESTATUTO_rep -> . ESTATUTO
    (18) ESTATUTO -> . ASIGNACION
    (19) ESTATUTO -> . CONDICION
    (20) ESTATUTO -> . ESCRITURA
    (21) ESTATUTO -> . LLAMADA
    (22) ESTATUTO -> . RETORNO
    (23) ESTATUTO -> . LECTURA
    (24) ESTATUTO -> . REPETICION
    (25) ASIGNACION -> . ID array EQUAL EXPRESION np_asignacion SEMICOLON
    (42) CONDICION -> . IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux
    (37) ESCRITURA -> . WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
    (26) LLAMADA -> . FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON
    (27) LLAMADA -> . ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON
    (35) RETORNO -> . RETURN L_PAREN EXPRESION R_PAREN SEMICOLON
    (36) LECTURA -> . READ L_PAREN id_list R_PAREN SEMICOLON
    (45) REPETICION -> . WHILE L_PAREN EXPRESION R_PAREN BLOQUE
    (46) REPETICION -> . FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE
    (30) FUNC_ESPECIAL -> . MEDIA
    (31) FUNC_ESPECIAL -> . MODA
    (32) FUNC_ESPECIAL -> . VARIANZA
    (33) FUNC_ESPECIAL -> . REG
    (34) FUNC_ESPECIAL -> . PLOTXY

    ID              shift and go to state 29
    IF              shift and go to state 30
    WRITE           shift and go to state 31
    RETURN          shift and go to state 33
    READ            shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    MEDIA           shift and go to state 37
    MODA            shift and go to state 38
    VARIANZA        shift and go to state 39
    REG             shift and go to state 40
    PLOTXY          shift and go to state 41

    ESTATUTO_rep                   shift and go to state 20
    ESTATUTO                       shift and go to state 21
    ASIGNACION                     shift and go to state 22
    CONDICION                      shift and go to state 23
    ESCRITURA                      shift and go to state 24
    LLAMADA                        shift and go to state 25
    RETORNO                        shift and go to state 26
    LECTURA                        shift and go to state 27
    REPETICION                     shift and go to state 28
    FUNC_ESPECIAL                  shift and go to state 32

state 14

    (3) VARS -> VAR addvar . id_list COLON TIPO SEMICOLON
    (5) id_list -> . id_list COMMA ID array
    (6) id_list -> . ID array

    ID              shift and go to state 43

    id_list                        shift and go to state 42

state 15

    (12) FUNC -> FUNCTION TIPO . ID L_PAREN PARMS R_PAREN VARS BLOQUE

    ID              shift and go to state 44


state 16

    (9) TIPO -> INT . current_type
    (71) current_type -> .

    ID              reduce using rule 71 (current_type -> .)
    SEMICOLON       reduce using rule 71 (current_type -> .)

    current_type                   shift and go to state 45

state 17

    (10) TIPO -> FLOAT . current_type
    (71) current_type -> .

    ID              reduce using rule 71 (current_type -> .)
    SEMICOLON       reduce using rule 71 (current_type -> .)

    current_type                   shift and go to state 46

state 18

    (11) TIPO -> CHAR . current_type
    (71) current_type -> .

    ID              reduce using rule 71 (current_type -> .)
    SEMICOLON       reduce using rule 71 (current_type -> .)

    current_type                   shift and go to state 47

state 19

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON VARS FUNC BLOQUE .

    $end            reduce using rule 1 (PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON VARS FUNC BLOQUE .)


state 20

    (15) BLOQUE -> L_BRACE ESTATUTO_rep . R_BRACE
    (16) ESTATUTO_rep -> ESTATUTO_rep . ESTATUTO
    (18) ESTATUTO -> . ASIGNACION
    (19) ESTATUTO -> . CONDICION
    (20) ESTATUTO -> . ESCRITURA
    (21) ESTATUTO -> . LLAMADA
    (22) ESTATUTO -> . RETORNO
    (23) ESTATUTO -> . LECTURA
    (24) ESTATUTO -> . REPETICION
    (25) ASIGNACION -> . ID array EQUAL EXPRESION np_asignacion SEMICOLON
    (42) CONDICION -> . IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux
    (37) ESCRITURA -> . WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
    (26) LLAMADA -> . FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON
    (27) LLAMADA -> . ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON
    (35) RETORNO -> . RETURN L_PAREN EXPRESION R_PAREN SEMICOLON
    (36) LECTURA -> . READ L_PAREN id_list R_PAREN SEMICOLON
    (45) REPETICION -> . WHILE L_PAREN EXPRESION R_PAREN BLOQUE
    (46) REPETICION -> . FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE
    (30) FUNC_ESPECIAL -> . MEDIA
    (31) FUNC_ESPECIAL -> . MODA
    (32) FUNC_ESPECIAL -> . VARIANZA
    (33) FUNC_ESPECIAL -> . REG
    (34) FUNC_ESPECIAL -> . PLOTXY

    R_BRACE         shift and go to state 48
    ID              shift and go to state 29
    IF              shift and go to state 30
    WRITE           shift and go to state 31
    RETURN          shift and go to state 33
    READ            shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    MEDIA           shift and go to state 37
    MODA            shift and go to state 38
    VARIANZA        shift and go to state 39
    REG             shift and go to state 40
    PLOTXY          shift and go to state 41

    ESTATUTO                       shift and go to state 49
    ASIGNACION                     shift and go to state 22
    CONDICION                      shift and go to state 23
    ESCRITURA                      shift and go to state 24
    LLAMADA                        shift and go to state 25
    RETORNO                        shift and go to state 26
    LECTURA                        shift and go to state 27
    REPETICION                     shift and go to state 28
    FUNC_ESPECIAL                  shift and go to state 32

state 21

    (17) ESTATUTO_rep -> ESTATUTO .

    R_BRACE         reduce using rule 17 (ESTATUTO_rep -> ESTATUTO .)
    ID              reduce using rule 17 (ESTATUTO_rep -> ESTATUTO .)
    IF              reduce using rule 17 (ESTATUTO_rep -> ESTATUTO .)
    WRITE           reduce using rule 17 (ESTATUTO_rep -> ESTATUTO .)
    RETURN          reduce using rule 17 (ESTATUTO_rep -> ESTATUTO .)
    READ            reduce using rule 17 (ESTATUTO_rep -> ESTATUTO .)
    WHILE           reduce using rule 17 (ESTATUTO_rep -> ESTATUTO .)
    FOR             reduce using rule 17 (ESTATUTO_rep -> ESTATUTO .)
    MEDIA           reduce using rule 17 (ESTATUTO_rep -> ESTATUTO .)
    MODA            reduce using rule 17 (ESTATUTO_rep -> ESTATUTO .)
    VARIANZA        reduce using rule 17 (ESTATUTO_rep -> ESTATUTO .)
    REG             reduce using rule 17 (ESTATUTO_rep -> ESTATUTO .)
    PLOTXY          reduce using rule 17 (ESTATUTO_rep -> ESTATUTO .)


state 22

    (18) ESTATUTO -> ASIGNACION .

    R_BRACE         reduce using rule 18 (ESTATUTO -> ASIGNACION .)
    ID              reduce using rule 18 (ESTATUTO -> ASIGNACION .)
    IF              reduce using rule 18 (ESTATUTO -> ASIGNACION .)
    WRITE           reduce using rule 18 (ESTATUTO -> ASIGNACION .)
    RETURN          reduce using rule 18 (ESTATUTO -> ASIGNACION .)
    READ            reduce using rule 18 (ESTATUTO -> ASIGNACION .)
    WHILE           reduce using rule 18 (ESTATUTO -> ASIGNACION .)
    FOR             reduce using rule 18 (ESTATUTO -> ASIGNACION .)
    MEDIA           reduce using rule 18 (ESTATUTO -> ASIGNACION .)
    MODA            reduce using rule 18 (ESTATUTO -> ASIGNACION .)
    VARIANZA        reduce using rule 18 (ESTATUTO -> ASIGNACION .)
    REG             reduce using rule 18 (ESTATUTO -> ASIGNACION .)
    PLOTXY          reduce using rule 18 (ESTATUTO -> ASIGNACION .)


state 23

    (19) ESTATUTO -> CONDICION .

    R_BRACE         reduce using rule 19 (ESTATUTO -> CONDICION .)
    ID              reduce using rule 19 (ESTATUTO -> CONDICION .)
    IF              reduce using rule 19 (ESTATUTO -> CONDICION .)
    WRITE           reduce using rule 19 (ESTATUTO -> CONDICION .)
    RETURN          reduce using rule 19 (ESTATUTO -> CONDICION .)
    READ            reduce using rule 19 (ESTATUTO -> CONDICION .)
    WHILE           reduce using rule 19 (ESTATUTO -> CONDICION .)
    FOR             reduce using rule 19 (ESTATUTO -> CONDICION .)
    MEDIA           reduce using rule 19 (ESTATUTO -> CONDICION .)
    MODA            reduce using rule 19 (ESTATUTO -> CONDICION .)
    VARIANZA        reduce using rule 19 (ESTATUTO -> CONDICION .)
    REG             reduce using rule 19 (ESTATUTO -> CONDICION .)
    PLOTXY          reduce using rule 19 (ESTATUTO -> CONDICION .)


state 24

    (20) ESTATUTO -> ESCRITURA .

    R_BRACE         reduce using rule 20 (ESTATUTO -> ESCRITURA .)
    ID              reduce using rule 20 (ESTATUTO -> ESCRITURA .)
    IF              reduce using rule 20 (ESTATUTO -> ESCRITURA .)
    WRITE           reduce using rule 20 (ESTATUTO -> ESCRITURA .)
    RETURN          reduce using rule 20 (ESTATUTO -> ESCRITURA .)
    READ            reduce using rule 20 (ESTATUTO -> ESCRITURA .)
    WHILE           reduce using rule 20 (ESTATUTO -> ESCRITURA .)
    FOR             reduce using rule 20 (ESTATUTO -> ESCRITURA .)
    MEDIA           reduce using rule 20 (ESTATUTO -> ESCRITURA .)
    MODA            reduce using rule 20 (ESTATUTO -> ESCRITURA .)
    VARIANZA        reduce using rule 20 (ESTATUTO -> ESCRITURA .)
    REG             reduce using rule 20 (ESTATUTO -> ESCRITURA .)
    PLOTXY          reduce using rule 20 (ESTATUTO -> ESCRITURA .)


state 25

    (21) ESTATUTO -> LLAMADA .

    R_BRACE         reduce using rule 21 (ESTATUTO -> LLAMADA .)
    ID              reduce using rule 21 (ESTATUTO -> LLAMADA .)
    IF              reduce using rule 21 (ESTATUTO -> LLAMADA .)
    WRITE           reduce using rule 21 (ESTATUTO -> LLAMADA .)
    RETURN          reduce using rule 21 (ESTATUTO -> LLAMADA .)
    READ            reduce using rule 21 (ESTATUTO -> LLAMADA .)
    WHILE           reduce using rule 21 (ESTATUTO -> LLAMADA .)
    FOR             reduce using rule 21 (ESTATUTO -> LLAMADA .)
    MEDIA           reduce using rule 21 (ESTATUTO -> LLAMADA .)
    MODA            reduce using rule 21 (ESTATUTO -> LLAMADA .)
    VARIANZA        reduce using rule 21 (ESTATUTO -> LLAMADA .)
    REG             reduce using rule 21 (ESTATUTO -> LLAMADA .)
    PLOTXY          reduce using rule 21 (ESTATUTO -> LLAMADA .)


state 26

    (22) ESTATUTO -> RETORNO .

    R_BRACE         reduce using rule 22 (ESTATUTO -> RETORNO .)
    ID              reduce using rule 22 (ESTATUTO -> RETORNO .)
    IF              reduce using rule 22 (ESTATUTO -> RETORNO .)
    WRITE           reduce using rule 22 (ESTATUTO -> RETORNO .)
    RETURN          reduce using rule 22 (ESTATUTO -> RETORNO .)
    READ            reduce using rule 22 (ESTATUTO -> RETORNO .)
    WHILE           reduce using rule 22 (ESTATUTO -> RETORNO .)
    FOR             reduce using rule 22 (ESTATUTO -> RETORNO .)
    MEDIA           reduce using rule 22 (ESTATUTO -> RETORNO .)
    MODA            reduce using rule 22 (ESTATUTO -> RETORNO .)
    VARIANZA        reduce using rule 22 (ESTATUTO -> RETORNO .)
    REG             reduce using rule 22 (ESTATUTO -> RETORNO .)
    PLOTXY          reduce using rule 22 (ESTATUTO -> RETORNO .)


state 27

    (23) ESTATUTO -> LECTURA .

    R_BRACE         reduce using rule 23 (ESTATUTO -> LECTURA .)
    ID              reduce using rule 23 (ESTATUTO -> LECTURA .)
    IF              reduce using rule 23 (ESTATUTO -> LECTURA .)
    WRITE           reduce using rule 23 (ESTATUTO -> LECTURA .)
    RETURN          reduce using rule 23 (ESTATUTO -> LECTURA .)
    READ            reduce using rule 23 (ESTATUTO -> LECTURA .)
    WHILE           reduce using rule 23 (ESTATUTO -> LECTURA .)
    FOR             reduce using rule 23 (ESTATUTO -> LECTURA .)
    MEDIA           reduce using rule 23 (ESTATUTO -> LECTURA .)
    MODA            reduce using rule 23 (ESTATUTO -> LECTURA .)
    VARIANZA        reduce using rule 23 (ESTATUTO -> LECTURA .)
    REG             reduce using rule 23 (ESTATUTO -> LECTURA .)
    PLOTXY          reduce using rule 23 (ESTATUTO -> LECTURA .)


state 28

    (24) ESTATUTO -> REPETICION .

    R_BRACE         reduce using rule 24 (ESTATUTO -> REPETICION .)
    ID              reduce using rule 24 (ESTATUTO -> REPETICION .)
    IF              reduce using rule 24 (ESTATUTO -> REPETICION .)
    WRITE           reduce using rule 24 (ESTATUTO -> REPETICION .)
    RETURN          reduce using rule 24 (ESTATUTO -> REPETICION .)
    READ            reduce using rule 24 (ESTATUTO -> REPETICION .)
    WHILE           reduce using rule 24 (ESTATUTO -> REPETICION .)
    FOR             reduce using rule 24 (ESTATUTO -> REPETICION .)
    MEDIA           reduce using rule 24 (ESTATUTO -> REPETICION .)
    MODA            reduce using rule 24 (ESTATUTO -> REPETICION .)
    VARIANZA        reduce using rule 24 (ESTATUTO -> REPETICION .)
    REG             reduce using rule 24 (ESTATUTO -> REPETICION .)
    PLOTXY          reduce using rule 24 (ESTATUTO -> REPETICION .)


state 29

    (25) ASIGNACION -> ID . array EQUAL EXPRESION np_asignacion SEMICOLON
    (27) LLAMADA -> ID . L_PAREN exp_rep R_PAREN np_llamada SEMICOLON
    (7) array -> . L_BRACKET CTE_I R_BRACKET
    (8) array -> . empty
    (69) empty -> .

    L_PAREN         shift and go to state 51
    L_BRACKET       shift and go to state 52
    EQUAL           reduce using rule 69 (empty -> .)

    array                          shift and go to state 50
    empty                          shift and go to state 53

state 30

    (42) CONDICION -> IF . L_PAREN EXPRESION R_PAREN BLOQUE else_aux

    L_PAREN         shift and go to state 54


state 31

    (37) ESCRITURA -> WRITE . L_PAREN escritura_rep R_PAREN SEMICOLON

    L_PAREN         shift and go to state 55


state 32

    (26) LLAMADA -> FUNC_ESPECIAL . L_PAREN exp_rep R_PAREN SEMICOLON

    L_PAREN         shift and go to state 56


state 33

    (35) RETORNO -> RETURN . L_PAREN EXPRESION R_PAREN SEMICOLON

    L_PAREN         shift and go to state 57


state 34

    (36) LECTURA -> READ . L_PAREN id_list R_PAREN SEMICOLON

    L_PAREN         shift and go to state 58


state 35

    (45) REPETICION -> WHILE . L_PAREN EXPRESION R_PAREN BLOQUE

    L_PAREN         shift and go to state 59


state 36

    (46) REPETICION -> FOR . ID EQUAL EXPRESION TO EXPRESION DO BLOQUE

    ID              shift and go to state 60


state 37

    (30) FUNC_ESPECIAL -> MEDIA .

    L_PAREN         reduce using rule 30 (FUNC_ESPECIAL -> MEDIA .)


state 38

    (31) FUNC_ESPECIAL -> MODA .

    L_PAREN         reduce using rule 31 (FUNC_ESPECIAL -> MODA .)


state 39

    (32) FUNC_ESPECIAL -> VARIANZA .

    L_PAREN         reduce using rule 32 (FUNC_ESPECIAL -> VARIANZA .)


state 40

    (33) FUNC_ESPECIAL -> REG .

    L_PAREN         reduce using rule 33 (FUNC_ESPECIAL -> REG .)


state 41

    (34) FUNC_ESPECIAL -> PLOTXY .

    L_PAREN         reduce using rule 34 (FUNC_ESPECIAL -> PLOTXY .)


state 42

    (3) VARS -> VAR addvar id_list . COLON TIPO SEMICOLON
    (5) id_list -> id_list . COMMA ID array

    COLON           shift and go to state 61
    COMMA           shift and go to state 62


state 43

    (6) id_list -> ID . array
    (7) array -> . L_BRACKET CTE_I R_BRACKET
    (8) array -> . empty
    (69) empty -> .

    L_BRACKET       shift and go to state 52
    COLON           reduce using rule 69 (empty -> .)
    COMMA           reduce using rule 69 (empty -> .)
    R_PAREN         reduce using rule 69 (empty -> .)

    array                          shift and go to state 63
    empty                          shift and go to state 53

state 44

    (12) FUNC -> FUNCTION TIPO ID . L_PAREN PARMS R_PAREN VARS BLOQUE

    L_PAREN         shift and go to state 64


state 45

    (9) TIPO -> INT current_type .

    ID              reduce using rule 9 (TIPO -> INT current_type .)
    SEMICOLON       reduce using rule 9 (TIPO -> INT current_type .)


state 46

    (10) TIPO -> FLOAT current_type .

    ID              reduce using rule 10 (TIPO -> FLOAT current_type .)
    SEMICOLON       reduce using rule 10 (TIPO -> FLOAT current_type .)


state 47

    (11) TIPO -> CHAR current_type .

    ID              reduce using rule 11 (TIPO -> CHAR current_type .)
    SEMICOLON       reduce using rule 11 (TIPO -> CHAR current_type .)


state 48

    (15) BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .

    $end            reduce using rule 15 (BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .)
    ELSE            reduce using rule 15 (BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .)
    R_BRACE         reduce using rule 15 (BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .)
    ID              reduce using rule 15 (BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .)
    IF              reduce using rule 15 (BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .)
    WRITE           reduce using rule 15 (BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .)
    RETURN          reduce using rule 15 (BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .)
    READ            reduce using rule 15 (BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .)
    WHILE           reduce using rule 15 (BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .)
    FOR             reduce using rule 15 (BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .)
    MEDIA           reduce using rule 15 (BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .)
    MODA            reduce using rule 15 (BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .)
    VARIANZA        reduce using rule 15 (BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .)
    REG             reduce using rule 15 (BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .)
    PLOTXY          reduce using rule 15 (BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .)
    L_BRACE         reduce using rule 15 (BLOQUE -> L_BRACE ESTATUTO_rep R_BRACE .)


state 49

    (16) ESTATUTO_rep -> ESTATUTO_rep ESTATUTO .

    R_BRACE         reduce using rule 16 (ESTATUTO_rep -> ESTATUTO_rep ESTATUTO .)
    ID              reduce using rule 16 (ESTATUTO_rep -> ESTATUTO_rep ESTATUTO .)
    IF              reduce using rule 16 (ESTATUTO_rep -> ESTATUTO_rep ESTATUTO .)
    WRITE           reduce using rule 16 (ESTATUTO_rep -> ESTATUTO_rep ESTATUTO .)
    RETURN          reduce using rule 16 (ESTATUTO_rep -> ESTATUTO_rep ESTATUTO .)
    READ            reduce using rule 16 (ESTATUTO_rep -> ESTATUTO_rep ESTATUTO .)
    WHILE           reduce using rule 16 (ESTATUTO_rep -> ESTATUTO_rep ESTATUTO .)
    FOR             reduce using rule 16 (ESTATUTO_rep -> ESTATUTO_rep ESTATUTO .)
    MEDIA           reduce using rule 16 (ESTATUTO_rep -> ESTATUTO_rep ESTATUTO .)
    MODA            reduce using rule 16 (ESTATUTO_rep -> ESTATUTO_rep ESTATUTO .)
    VARIANZA        reduce using rule 16 (ESTATUTO_rep -> ESTATUTO_rep ESTATUTO .)
    REG             reduce using rule 16 (ESTATUTO_rep -> ESTATUTO_rep ESTATUTO .)
    PLOTXY          reduce using rule 16 (ESTATUTO_rep -> ESTATUTO_rep ESTATUTO .)


state 50

    (25) ASIGNACION -> ID array . EQUAL EXPRESION np_asignacion SEMICOLON

    EQUAL           shift and go to state 65


state 51

    (27) LLAMADA -> ID L_PAREN . exp_rep R_PAREN np_llamada SEMICOLON
    (28) exp_rep -> . exp_rep COMMA EXPRESION
    (29) exp_rep -> . EXPRESION
    (47) EXPRESION -> . EXP
    (48) EXPRESION -> . EXP RELOP EXP
    (54) EXP -> . TERMINO
    (55) EXP -> . TERMINO MASMENOS TERMINO
    (58) TERMINO -> . FACTOR
    (59) TERMINO -> . FACTOR MULTDIV FACTOR
    (62) FACTOR -> . L_PAREN stack_operator EXPRESION R_PAREN stack_operator
    (63) FACTOR -> . MASMENOS VAR_CTE
    (64) FACTOR -> . VAR_CTE
    (56) MASMENOS -> . PLUS stack_operator
    (57) MASMENOS -> . MINUS stack_operator
    (65) VAR_CTE -> . ID stack_operand_id
    (66) VAR_CTE -> . CTE_I stack_operand_int
    (67) VAR_CTE -> . CTE_F stack_operand_float
    (68) VAR_CTE -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 67
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 66
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 78
    CTE_CHAR        shift and go to state 79

    exp_rep                        shift and go to state 68
    EXPRESION                      shift and go to state 69
    EXP                            shift and go to state 70
    TERMINO                        shift and go to state 71
    MASMENOS                       shift and go to state 72
    FACTOR                         shift and go to state 73
    VAR_CTE                        shift and go to state 74

state 52

    (7) array -> L_BRACKET . CTE_I R_BRACKET

    CTE_I           shift and go to state 80


state 53

    (8) array -> empty .

    EQUAL           reduce using rule 8 (array -> empty .)
    COLON           reduce using rule 8 (array -> empty .)
    COMMA           reduce using rule 8 (array -> empty .)
    R_PAREN         reduce using rule 8 (array -> empty .)


state 54

    (42) CONDICION -> IF L_PAREN . EXPRESION R_PAREN BLOQUE else_aux
    (47) EXPRESION -> . EXP
    (48) EXPRESION -> . EXP RELOP EXP
    (54) EXP -> . TERMINO
    (55) EXP -> . TERMINO MASMENOS TERMINO
    (58) TERMINO -> . FACTOR
    (59) TERMINO -> . FACTOR MULTDIV FACTOR
    (62) FACTOR -> . L_PAREN stack_operator EXPRESION R_PAREN stack_operator
    (63) FACTOR -> . MASMENOS VAR_CTE
    (64) FACTOR -> . VAR_CTE
    (56) MASMENOS -> . PLUS stack_operator
    (57) MASMENOS -> . MINUS stack_operator
    (65) VAR_CTE -> . ID stack_operand_id
    (66) VAR_CTE -> . CTE_I stack_operand_int
    (67) VAR_CTE -> . CTE_F stack_operand_float
    (68) VAR_CTE -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 67
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 66
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 78
    CTE_CHAR        shift and go to state 79

    EXPRESION                      shift and go to state 81
    EXP                            shift and go to state 70
    TERMINO                        shift and go to state 71
    MASMENOS                       shift and go to state 72
    FACTOR                         shift and go to state 73
    VAR_CTE                        shift and go to state 74

state 55

    (37) ESCRITURA -> WRITE L_PAREN . escritura_rep R_PAREN SEMICOLON
    (38) escritura_rep -> . escritura_rep COMMA escritura_aux
    (39) escritura_rep -> . escritura_aux
    (40) escritura_aux -> . CTE_S
    (41) escritura_aux -> . EXPRESION
    (47) EXPRESION -> . EXP
    (48) EXPRESION -> . EXP RELOP EXP
    (54) EXP -> . TERMINO
    (55) EXP -> . TERMINO MASMENOS TERMINO
    (58) TERMINO -> . FACTOR
    (59) TERMINO -> . FACTOR MULTDIV FACTOR
    (62) FACTOR -> . L_PAREN stack_operator EXPRESION R_PAREN stack_operator
    (63) FACTOR -> . MASMENOS VAR_CTE
    (64) FACTOR -> . VAR_CTE
    (56) MASMENOS -> . PLUS stack_operator
    (57) MASMENOS -> . MINUS stack_operator
    (65) VAR_CTE -> . ID stack_operand_id
    (66) VAR_CTE -> . CTE_I stack_operand_int
    (67) VAR_CTE -> . CTE_F stack_operand_float
    (68) VAR_CTE -> . CTE_CHAR stack_operand_char

    CTE_S           shift and go to state 84
    L_PAREN         shift and go to state 67
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 66
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 78
    CTE_CHAR        shift and go to state 79

    escritura_rep                  shift and go to state 82
    escritura_aux                  shift and go to state 83
    EXPRESION                      shift and go to state 85
    EXP                            shift and go to state 70
    TERMINO                        shift and go to state 71
    MASMENOS                       shift and go to state 72
    FACTOR                         shift and go to state 73
    VAR_CTE                        shift and go to state 74

state 56

    (26) LLAMADA -> FUNC_ESPECIAL L_PAREN . exp_rep R_PAREN SEMICOLON
    (28) exp_rep -> . exp_rep COMMA EXPRESION
    (29) exp_rep -> . EXPRESION
    (47) EXPRESION -> . EXP
    (48) EXPRESION -> . EXP RELOP EXP
    (54) EXP -> . TERMINO
    (55) EXP -> . TERMINO MASMENOS TERMINO
    (58) TERMINO -> . FACTOR
    (59) TERMINO -> . FACTOR MULTDIV FACTOR
    (62) FACTOR -> . L_PAREN stack_operator EXPRESION R_PAREN stack_operator
    (63) FACTOR -> . MASMENOS VAR_CTE
    (64) FACTOR -> . VAR_CTE
    (56) MASMENOS -> . PLUS stack_operator
    (57) MASMENOS -> . MINUS stack_operator
    (65) VAR_CTE -> . ID stack_operand_id
    (66) VAR_CTE -> . CTE_I stack_operand_int
    (67) VAR_CTE -> . CTE_F stack_operand_float
    (68) VAR_CTE -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 67
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 66
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 78
    CTE_CHAR        shift and go to state 79

    exp_rep                        shift and go to state 86
    EXPRESION                      shift and go to state 69
    EXP                            shift and go to state 70
    TERMINO                        shift and go to state 71
    MASMENOS                       shift and go to state 72
    FACTOR                         shift and go to state 73
    VAR_CTE                        shift and go to state 74

state 57

    (35) RETORNO -> RETURN L_PAREN . EXPRESION R_PAREN SEMICOLON
    (47) EXPRESION -> . EXP
    (48) EXPRESION -> . EXP RELOP EXP
    (54) EXP -> . TERMINO
    (55) EXP -> . TERMINO MASMENOS TERMINO
    (58) TERMINO -> . FACTOR
    (59) TERMINO -> . FACTOR MULTDIV FACTOR
    (62) FACTOR -> . L_PAREN stack_operator EXPRESION R_PAREN stack_operator
    (63) FACTOR -> . MASMENOS VAR_CTE
    (64) FACTOR -> . VAR_CTE
    (56) MASMENOS -> . PLUS stack_operator
    (57) MASMENOS -> . MINUS stack_operator
    (65) VAR_CTE -> . ID stack_operand_id
    (66) VAR_CTE -> . CTE_I stack_operand_int
    (67) VAR_CTE -> . CTE_F stack_operand_float
    (68) VAR_CTE -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 67
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 66
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 78
    CTE_CHAR        shift and go to state 79

    EXPRESION                      shift and go to state 87
    EXP                            shift and go to state 70
    TERMINO                        shift and go to state 71
    MASMENOS                       shift and go to state 72
    FACTOR                         shift and go to state 73
    VAR_CTE                        shift and go to state 74

state 58

    (36) LECTURA -> READ L_PAREN . id_list R_PAREN SEMICOLON
    (5) id_list -> . id_list COMMA ID array
    (6) id_list -> . ID array

    ID              shift and go to state 43

    id_list                        shift and go to state 88

state 59

    (45) REPETICION -> WHILE L_PAREN . EXPRESION R_PAREN BLOQUE
    (47) EXPRESION -> . EXP
    (48) EXPRESION -> . EXP RELOP EXP
    (54) EXP -> . TERMINO
    (55) EXP -> . TERMINO MASMENOS TERMINO
    (58) TERMINO -> . FACTOR
    (59) TERMINO -> . FACTOR MULTDIV FACTOR
    (62) FACTOR -> . L_PAREN stack_operator EXPRESION R_PAREN stack_operator
    (63) FACTOR -> . MASMENOS VAR_CTE
    (64) FACTOR -> . VAR_CTE
    (56) MASMENOS -> . PLUS stack_operator
    (57) MASMENOS -> . MINUS stack_operator
    (65) VAR_CTE -> . ID stack_operand_id
    (66) VAR_CTE -> . CTE_I stack_operand_int
    (67) VAR_CTE -> . CTE_F stack_operand_float
    (68) VAR_CTE -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 67
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 66
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 78
    CTE_CHAR        shift and go to state 79

    EXPRESION                      shift and go to state 89
    EXP                            shift and go to state 70
    TERMINO                        shift and go to state 71
    MASMENOS                       shift and go to state 72
    FACTOR                         shift and go to state 73
    VAR_CTE                        shift and go to state 74

state 60

    (46) REPETICION -> FOR ID . EQUAL EXPRESION TO EXPRESION DO BLOQUE

    EQUAL           shift and go to state 90


state 61

    (3) VARS -> VAR addvar id_list COLON . TIPO SEMICOLON
    (9) TIPO -> . INT current_type
    (10) TIPO -> . FLOAT current_type
    (11) TIPO -> . CHAR current_type

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    TIPO                           shift and go to state 91

state 62

    (5) id_list -> id_list COMMA . ID array

    ID              shift and go to state 92


state 63

    (6) id_list -> ID array .

    COLON           reduce using rule 6 (id_list -> ID array .)
    COMMA           reduce using rule 6 (id_list -> ID array .)
    R_PAREN         reduce using rule 6 (id_list -> ID array .)


state 64

    (12) FUNC -> FUNCTION TIPO ID L_PAREN . PARMS R_PAREN VARS BLOQUE
    (13) PARMS -> . TIPO ID id_list
    (14) PARMS -> . empty
    (9) TIPO -> . INT current_type
    (10) TIPO -> . FLOAT current_type
    (11) TIPO -> . CHAR current_type
    (69) empty -> .

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18
    R_PAREN         reduce using rule 69 (empty -> .)

    TIPO                           shift and go to state 93
    PARMS                          shift and go to state 94
    empty                          shift and go to state 95

state 65

    (25) ASIGNACION -> ID array EQUAL . EXPRESION np_asignacion SEMICOLON
    (47) EXPRESION -> . EXP
    (48) EXPRESION -> . EXP RELOP EXP
    (54) EXP -> . TERMINO
    (55) EXP -> . TERMINO MASMENOS TERMINO
    (58) TERMINO -> . FACTOR
    (59) TERMINO -> . FACTOR MULTDIV FACTOR
    (62) FACTOR -> . L_PAREN stack_operator EXPRESION R_PAREN stack_operator
    (63) FACTOR -> . MASMENOS VAR_CTE
    (64) FACTOR -> . VAR_CTE
    (56) MASMENOS -> . PLUS stack_operator
    (57) MASMENOS -> . MINUS stack_operator
    (65) VAR_CTE -> . ID stack_operand_id
    (66) VAR_CTE -> . CTE_I stack_operand_int
    (67) VAR_CTE -> . CTE_F stack_operand_float
    (68) VAR_CTE -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 67
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 66
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 78
    CTE_CHAR        shift and go to state 79

    EXPRESION                      shift and go to state 96
    EXP                            shift and go to state 70
    TERMINO                        shift and go to state 71
    MASMENOS                       shift and go to state 72
    FACTOR                         shift and go to state 73
    VAR_CTE                        shift and go to state 74

state 66

    (65) VAR_CTE -> ID . stack_operand_id
    (73) stack_operand_id -> .

    MULT            reduce using rule 73 (stack_operand_id -> .)
    DIV             reduce using rule 73 (stack_operand_id -> .)
    PLUS            reduce using rule 73 (stack_operand_id -> .)
    MINUS           reduce using rule 73 (stack_operand_id -> .)
    GT              reduce using rule 73 (stack_operand_id -> .)
    LT              reduce using rule 73 (stack_operand_id -> .)
    EQ              reduce using rule 73 (stack_operand_id -> .)
    LEQ             reduce using rule 73 (stack_operand_id -> .)
    GEQ             reduce using rule 73 (stack_operand_id -> .)
    R_PAREN         reduce using rule 73 (stack_operand_id -> .)
    COMMA           reduce using rule 73 (stack_operand_id -> .)
    SEMICOLON       reduce using rule 73 (stack_operand_id -> .)
    TO              reduce using rule 73 (stack_operand_id -> .)
    DO              reduce using rule 73 (stack_operand_id -> .)

    stack_operand_id               shift and go to state 97

state 67

    (62) FACTOR -> L_PAREN . stack_operator EXPRESION R_PAREN stack_operator
    (77) stack_operator -> .

    L_PAREN         reduce using rule 77 (stack_operator -> .)
    PLUS            reduce using rule 77 (stack_operator -> .)
    MINUS           reduce using rule 77 (stack_operator -> .)
    ID              reduce using rule 77 (stack_operator -> .)
    CTE_I           reduce using rule 77 (stack_operator -> .)
    CTE_F           reduce using rule 77 (stack_operator -> .)
    CTE_CHAR        reduce using rule 77 (stack_operator -> .)

    stack_operator                 shift and go to state 98

state 68

    (27) LLAMADA -> ID L_PAREN exp_rep . R_PAREN np_llamada SEMICOLON
    (28) exp_rep -> exp_rep . COMMA EXPRESION

    R_PAREN         shift and go to state 99
    COMMA           shift and go to state 100


state 69

    (29) exp_rep -> EXPRESION .

    R_PAREN         reduce using rule 29 (exp_rep -> EXPRESION .)
    COMMA           reduce using rule 29 (exp_rep -> EXPRESION .)


state 70

    (47) EXPRESION -> EXP .
    (48) EXPRESION -> EXP . RELOP EXP
    (49) RELOP -> . GT stack_operator
    (50) RELOP -> . LT stack_operator
    (51) RELOP -> . EQ stack_operator
    (52) RELOP -> . LEQ stack_operator
    (53) RELOP -> . GEQ stack_operator

    R_PAREN         reduce using rule 47 (EXPRESION -> EXP .)
    COMMA           reduce using rule 47 (EXPRESION -> EXP .)
    SEMICOLON       reduce using rule 47 (EXPRESION -> EXP .)
    TO              reduce using rule 47 (EXPRESION -> EXP .)
    DO              reduce using rule 47 (EXPRESION -> EXP .)
    GT              shift and go to state 102
    LT              shift and go to state 103
    EQ              shift and go to state 104
    LEQ             shift and go to state 105
    GEQ             shift and go to state 106

    RELOP                          shift and go to state 101

state 71

    (54) EXP -> TERMINO .
    (55) EXP -> TERMINO . MASMENOS TERMINO
    (56) MASMENOS -> . PLUS stack_operator
    (57) MASMENOS -> . MINUS stack_operator

    GT              reduce using rule 54 (EXP -> TERMINO .)
    LT              reduce using rule 54 (EXP -> TERMINO .)
    EQ              reduce using rule 54 (EXP -> TERMINO .)
    LEQ             reduce using rule 54 (EXP -> TERMINO .)
    GEQ             reduce using rule 54 (EXP -> TERMINO .)
    R_PAREN         reduce using rule 54 (EXP -> TERMINO .)
    COMMA           reduce using rule 54 (EXP -> TERMINO .)
    SEMICOLON       reduce using rule 54 (EXP -> TERMINO .)
    TO              reduce using rule 54 (EXP -> TERMINO .)
    DO              reduce using rule 54 (EXP -> TERMINO .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76

    MASMENOS                       shift and go to state 107

state 72

    (63) FACTOR -> MASMENOS . VAR_CTE
    (65) VAR_CTE -> . ID stack_operand_id
    (66) VAR_CTE -> . CTE_I stack_operand_int
    (67) VAR_CTE -> . CTE_F stack_operand_float
    (68) VAR_CTE -> . CTE_CHAR stack_operand_char

    ID              shift and go to state 66
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 78
    CTE_CHAR        shift and go to state 79

    VAR_CTE                        shift and go to state 108

state 73

    (58) TERMINO -> FACTOR .
    (59) TERMINO -> FACTOR . MULTDIV FACTOR
    (60) MULTDIV -> . MULT stack_operator
    (61) MULTDIV -> . DIV stack_operator

    PLUS            reduce using rule 58 (TERMINO -> FACTOR .)
    MINUS           reduce using rule 58 (TERMINO -> FACTOR .)
    GT              reduce using rule 58 (TERMINO -> FACTOR .)
    LT              reduce using rule 58 (TERMINO -> FACTOR .)
    EQ              reduce using rule 58 (TERMINO -> FACTOR .)
    LEQ             reduce using rule 58 (TERMINO -> FACTOR .)
    GEQ             reduce using rule 58 (TERMINO -> FACTOR .)
    R_PAREN         reduce using rule 58 (TERMINO -> FACTOR .)
    COMMA           reduce using rule 58 (TERMINO -> FACTOR .)
    SEMICOLON       reduce using rule 58 (TERMINO -> FACTOR .)
    TO              reduce using rule 58 (TERMINO -> FACTOR .)
    DO              reduce using rule 58 (TERMINO -> FACTOR .)
    MULT            shift and go to state 110
    DIV             shift and go to state 111

    MULTDIV                        shift and go to state 109

state 74

    (64) FACTOR -> VAR_CTE .

    MULT            reduce using rule 64 (FACTOR -> VAR_CTE .)
    DIV             reduce using rule 64 (FACTOR -> VAR_CTE .)
    PLUS            reduce using rule 64 (FACTOR -> VAR_CTE .)
    MINUS           reduce using rule 64 (FACTOR -> VAR_CTE .)
    GT              reduce using rule 64 (FACTOR -> VAR_CTE .)
    LT              reduce using rule 64 (FACTOR -> VAR_CTE .)
    EQ              reduce using rule 64 (FACTOR -> VAR_CTE .)
    LEQ             reduce using rule 64 (FACTOR -> VAR_CTE .)
    GEQ             reduce using rule 64 (FACTOR -> VAR_CTE .)
    R_PAREN         reduce using rule 64 (FACTOR -> VAR_CTE .)
    COMMA           reduce using rule 64 (FACTOR -> VAR_CTE .)
    SEMICOLON       reduce using rule 64 (FACTOR -> VAR_CTE .)
    TO              reduce using rule 64 (FACTOR -> VAR_CTE .)
    DO              reduce using rule 64 (FACTOR -> VAR_CTE .)


state 75

    (56) MASMENOS -> PLUS . stack_operator
    (77) stack_operator -> .

    ID              reduce using rule 77 (stack_operator -> .)
    CTE_I           reduce using rule 77 (stack_operator -> .)
    CTE_F           reduce using rule 77 (stack_operator -> .)
    CTE_CHAR        reduce using rule 77 (stack_operator -> .)
    L_PAREN         reduce using rule 77 (stack_operator -> .)
    PLUS            reduce using rule 77 (stack_operator -> .)
    MINUS           reduce using rule 77 (stack_operator -> .)

    stack_operator                 shift and go to state 112

state 76

    (57) MASMENOS -> MINUS . stack_operator
    (77) stack_operator -> .

    ID              reduce using rule 77 (stack_operator -> .)
    CTE_I           reduce using rule 77 (stack_operator -> .)
    CTE_F           reduce using rule 77 (stack_operator -> .)
    CTE_CHAR        reduce using rule 77 (stack_operator -> .)
    L_PAREN         reduce using rule 77 (stack_operator -> .)
    PLUS            reduce using rule 77 (stack_operator -> .)
    MINUS           reduce using rule 77 (stack_operator -> .)

    stack_operator                 shift and go to state 113

state 77

    (66) VAR_CTE -> CTE_I . stack_operand_int
    (74) stack_operand_int -> .

    MULT            reduce using rule 74 (stack_operand_int -> .)
    DIV             reduce using rule 74 (stack_operand_int -> .)
    PLUS            reduce using rule 74 (stack_operand_int -> .)
    MINUS           reduce using rule 74 (stack_operand_int -> .)
    GT              reduce using rule 74 (stack_operand_int -> .)
    LT              reduce using rule 74 (stack_operand_int -> .)
    EQ              reduce using rule 74 (stack_operand_int -> .)
    LEQ             reduce using rule 74 (stack_operand_int -> .)
    GEQ             reduce using rule 74 (stack_operand_int -> .)
    R_PAREN         reduce using rule 74 (stack_operand_int -> .)
    COMMA           reduce using rule 74 (stack_operand_int -> .)
    SEMICOLON       reduce using rule 74 (stack_operand_int -> .)
    TO              reduce using rule 74 (stack_operand_int -> .)
    DO              reduce using rule 74 (stack_operand_int -> .)

    stack_operand_int              shift and go to state 114

state 78

    (67) VAR_CTE -> CTE_F . stack_operand_float
    (75) stack_operand_float -> .

    MULT            reduce using rule 75 (stack_operand_float -> .)
    DIV             reduce using rule 75 (stack_operand_float -> .)
    PLUS            reduce using rule 75 (stack_operand_float -> .)
    MINUS           reduce using rule 75 (stack_operand_float -> .)
    GT              reduce using rule 75 (stack_operand_float -> .)
    LT              reduce using rule 75 (stack_operand_float -> .)
    EQ              reduce using rule 75 (stack_operand_float -> .)
    LEQ             reduce using rule 75 (stack_operand_float -> .)
    GEQ             reduce using rule 75 (stack_operand_float -> .)
    R_PAREN         reduce using rule 75 (stack_operand_float -> .)
    COMMA           reduce using rule 75 (stack_operand_float -> .)
    SEMICOLON       reduce using rule 75 (stack_operand_float -> .)
    TO              reduce using rule 75 (stack_operand_float -> .)
    DO              reduce using rule 75 (stack_operand_float -> .)

    stack_operand_float            shift and go to state 115

state 79

    (68) VAR_CTE -> CTE_CHAR . stack_operand_char
    (76) stack_operand_char -> .

    MULT            reduce using rule 76 (stack_operand_char -> .)
    DIV             reduce using rule 76 (stack_operand_char -> .)
    PLUS            reduce using rule 76 (stack_operand_char -> .)
    MINUS           reduce using rule 76 (stack_operand_char -> .)
    GT              reduce using rule 76 (stack_operand_char -> .)
    LT              reduce using rule 76 (stack_operand_char -> .)
    EQ              reduce using rule 76 (stack_operand_char -> .)
    LEQ             reduce using rule 76 (stack_operand_char -> .)
    GEQ             reduce using rule 76 (stack_operand_char -> .)
    R_PAREN         reduce using rule 76 (stack_operand_char -> .)
    COMMA           reduce using rule 76 (stack_operand_char -> .)
    SEMICOLON       reduce using rule 76 (stack_operand_char -> .)
    TO              reduce using rule 76 (stack_operand_char -> .)
    DO              reduce using rule 76 (stack_operand_char -> .)

    stack_operand_char             shift and go to state 116

state 80

    (7) array -> L_BRACKET CTE_I . R_BRACKET

    R_BRACKET       shift and go to state 117


state 81

    (42) CONDICION -> IF L_PAREN EXPRESION . R_PAREN BLOQUE else_aux

    R_PAREN         shift and go to state 118


state 82

    (37) ESCRITURA -> WRITE L_PAREN escritura_rep . R_PAREN SEMICOLON
    (38) escritura_rep -> escritura_rep . COMMA escritura_aux

    R_PAREN         shift and go to state 119
    COMMA           shift and go to state 120


state 83

    (39) escritura_rep -> escritura_aux .

    R_PAREN         reduce using rule 39 (escritura_rep -> escritura_aux .)
    COMMA           reduce using rule 39 (escritura_rep -> escritura_aux .)


state 84

    (40) escritura_aux -> CTE_S .

    R_PAREN         reduce using rule 40 (escritura_aux -> CTE_S .)
    COMMA           reduce using rule 40 (escritura_aux -> CTE_S .)


state 85

    (41) escritura_aux -> EXPRESION .

    R_PAREN         reduce using rule 41 (escritura_aux -> EXPRESION .)
    COMMA           reduce using rule 41 (escritura_aux -> EXPRESION .)


state 86

    (26) LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep . R_PAREN SEMICOLON
    (28) exp_rep -> exp_rep . COMMA EXPRESION

    R_PAREN         shift and go to state 121
    COMMA           shift and go to state 100


state 87

    (35) RETORNO -> RETURN L_PAREN EXPRESION . R_PAREN SEMICOLON

    R_PAREN         shift and go to state 122


state 88

    (36) LECTURA -> READ L_PAREN id_list . R_PAREN SEMICOLON
    (5) id_list -> id_list . COMMA ID array

    R_PAREN         shift and go to state 123
    COMMA           shift and go to state 62


state 89

    (45) REPETICION -> WHILE L_PAREN EXPRESION . R_PAREN BLOQUE

    R_PAREN         shift and go to state 124


state 90

    (46) REPETICION -> FOR ID EQUAL . EXPRESION TO EXPRESION DO BLOQUE
    (47) EXPRESION -> . EXP
    (48) EXPRESION -> . EXP RELOP EXP
    (54) EXP -> . TERMINO
    (55) EXP -> . TERMINO MASMENOS TERMINO
    (58) TERMINO -> . FACTOR
    (59) TERMINO -> . FACTOR MULTDIV FACTOR
    (62) FACTOR -> . L_PAREN stack_operator EXPRESION R_PAREN stack_operator
    (63) FACTOR -> . MASMENOS VAR_CTE
    (64) FACTOR -> . VAR_CTE
    (56) MASMENOS -> . PLUS stack_operator
    (57) MASMENOS -> . MINUS stack_operator
    (65) VAR_CTE -> . ID stack_operand_id
    (66) VAR_CTE -> . CTE_I stack_operand_int
    (67) VAR_CTE -> . CTE_F stack_operand_float
    (68) VAR_CTE -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 67
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 66
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 78
    CTE_CHAR        shift and go to state 79

    EXPRESION                      shift and go to state 125
    EXP                            shift and go to state 70
    TERMINO                        shift and go to state 71
    MASMENOS                       shift and go to state 72
    FACTOR                         shift and go to state 73
    VAR_CTE                        shift and go to state 74

state 91

    (3) VARS -> VAR addvar id_list COLON TIPO . SEMICOLON

    SEMICOLON       shift and go to state 126


state 92

    (5) id_list -> id_list COMMA ID . array
    (7) array -> . L_BRACKET CTE_I R_BRACKET
    (8) array -> . empty
    (69) empty -> .

    L_BRACKET       shift and go to state 52
    COLON           reduce using rule 69 (empty -> .)
    COMMA           reduce using rule 69 (empty -> .)
    R_PAREN         reduce using rule 69 (empty -> .)

    array                          shift and go to state 127
    empty                          shift and go to state 53

state 93

    (13) PARMS -> TIPO . ID id_list

    ID              shift and go to state 128


state 94

    (12) FUNC -> FUNCTION TIPO ID L_PAREN PARMS . R_PAREN VARS BLOQUE

    R_PAREN         shift and go to state 129


state 95

    (14) PARMS -> empty .

    R_PAREN         reduce using rule 14 (PARMS -> empty .)


state 96

    (25) ASIGNACION -> ID array EQUAL EXPRESION . np_asignacion SEMICOLON
    (79) np_asignacion -> .

    SEMICOLON       reduce using rule 79 (np_asignacion -> .)

    np_asignacion                  shift and go to state 130

state 97

    (65) VAR_CTE -> ID stack_operand_id .

    MULT            reduce using rule 65 (VAR_CTE -> ID stack_operand_id .)
    DIV             reduce using rule 65 (VAR_CTE -> ID stack_operand_id .)
    PLUS            reduce using rule 65 (VAR_CTE -> ID stack_operand_id .)
    MINUS           reduce using rule 65 (VAR_CTE -> ID stack_operand_id .)
    GT              reduce using rule 65 (VAR_CTE -> ID stack_operand_id .)
    LT              reduce using rule 65 (VAR_CTE -> ID stack_operand_id .)
    EQ              reduce using rule 65 (VAR_CTE -> ID stack_operand_id .)
    LEQ             reduce using rule 65 (VAR_CTE -> ID stack_operand_id .)
    GEQ             reduce using rule 65 (VAR_CTE -> ID stack_operand_id .)
    R_PAREN         reduce using rule 65 (VAR_CTE -> ID stack_operand_id .)
    COMMA           reduce using rule 65 (VAR_CTE -> ID stack_operand_id .)
    SEMICOLON       reduce using rule 65 (VAR_CTE -> ID stack_operand_id .)
    TO              reduce using rule 65 (VAR_CTE -> ID stack_operand_id .)
    DO              reduce using rule 65 (VAR_CTE -> ID stack_operand_id .)


state 98

    (62) FACTOR -> L_PAREN stack_operator . EXPRESION R_PAREN stack_operator
    (47) EXPRESION -> . EXP
    (48) EXPRESION -> . EXP RELOP EXP
    (54) EXP -> . TERMINO
    (55) EXP -> . TERMINO MASMENOS TERMINO
    (58) TERMINO -> . FACTOR
    (59) TERMINO -> . FACTOR MULTDIV FACTOR
    (62) FACTOR -> . L_PAREN stack_operator EXPRESION R_PAREN stack_operator
    (63) FACTOR -> . MASMENOS VAR_CTE
    (64) FACTOR -> . VAR_CTE
    (56) MASMENOS -> . PLUS stack_operator
    (57) MASMENOS -> . MINUS stack_operator
    (65) VAR_CTE -> . ID stack_operand_id
    (66) VAR_CTE -> . CTE_I stack_operand_int
    (67) VAR_CTE -> . CTE_F stack_operand_float
    (68) VAR_CTE -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 67
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 66
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 78
    CTE_CHAR        shift and go to state 79

    EXPRESION                      shift and go to state 131
    EXP                            shift and go to state 70
    TERMINO                        shift and go to state 71
    MASMENOS                       shift and go to state 72
    FACTOR                         shift and go to state 73
    VAR_CTE                        shift and go to state 74

state 99

    (27) LLAMADA -> ID L_PAREN exp_rep R_PAREN . np_llamada SEMICOLON
    (78) np_llamada -> .

    SEMICOLON       reduce using rule 78 (np_llamada -> .)

    np_llamada                     shift and go to state 132

state 100

    (28) exp_rep -> exp_rep COMMA . EXPRESION
    (47) EXPRESION -> . EXP
    (48) EXPRESION -> . EXP RELOP EXP
    (54) EXP -> . TERMINO
    (55) EXP -> . TERMINO MASMENOS TERMINO
    (58) TERMINO -> . FACTOR
    (59) TERMINO -> . FACTOR MULTDIV FACTOR
    (62) FACTOR -> . L_PAREN stack_operator EXPRESION R_PAREN stack_operator
    (63) FACTOR -> . MASMENOS VAR_CTE
    (64) FACTOR -> . VAR_CTE
    (56) MASMENOS -> . PLUS stack_operator
    (57) MASMENOS -> . MINUS stack_operator
    (65) VAR_CTE -> . ID stack_operand_id
    (66) VAR_CTE -> . CTE_I stack_operand_int
    (67) VAR_CTE -> . CTE_F stack_operand_float
    (68) VAR_CTE -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 67
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 66
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 78
    CTE_CHAR        shift and go to state 79

    EXPRESION                      shift and go to state 133
    EXP                            shift and go to state 70
    TERMINO                        shift and go to state 71
    MASMENOS                       shift and go to state 72
    FACTOR                         shift and go to state 73
    VAR_CTE                        shift and go to state 74

state 101

    (48) EXPRESION -> EXP RELOP . EXP
    (54) EXP -> . TERMINO
    (55) EXP -> . TERMINO MASMENOS TERMINO
    (58) TERMINO -> . FACTOR
    (59) TERMINO -> . FACTOR MULTDIV FACTOR
    (62) FACTOR -> . L_PAREN stack_operator EXPRESION R_PAREN stack_operator
    (63) FACTOR -> . MASMENOS VAR_CTE
    (64) FACTOR -> . VAR_CTE
    (56) MASMENOS -> . PLUS stack_operator
    (57) MASMENOS -> . MINUS stack_operator
    (65) VAR_CTE -> . ID stack_operand_id
    (66) VAR_CTE -> . CTE_I stack_operand_int
    (67) VAR_CTE -> . CTE_F stack_operand_float
    (68) VAR_CTE -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 67
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 66
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 78
    CTE_CHAR        shift and go to state 79

    EXP                            shift and go to state 134
    TERMINO                        shift and go to state 71
    MASMENOS                       shift and go to state 72
    FACTOR                         shift and go to state 73
    VAR_CTE                        shift and go to state 74

state 102

    (49) RELOP -> GT . stack_operator
    (77) stack_operator -> .

    L_PAREN         reduce using rule 77 (stack_operator -> .)
    PLUS            reduce using rule 77 (stack_operator -> .)
    MINUS           reduce using rule 77 (stack_operator -> .)
    ID              reduce using rule 77 (stack_operator -> .)
    CTE_I           reduce using rule 77 (stack_operator -> .)
    CTE_F           reduce using rule 77 (stack_operator -> .)
    CTE_CHAR        reduce using rule 77 (stack_operator -> .)

    stack_operator                 shift and go to state 135

state 103

    (50) RELOP -> LT . stack_operator
    (77) stack_operator -> .

    L_PAREN         reduce using rule 77 (stack_operator -> .)
    PLUS            reduce using rule 77 (stack_operator -> .)
    MINUS           reduce using rule 77 (stack_operator -> .)
    ID              reduce using rule 77 (stack_operator -> .)
    CTE_I           reduce using rule 77 (stack_operator -> .)
    CTE_F           reduce using rule 77 (stack_operator -> .)
    CTE_CHAR        reduce using rule 77 (stack_operator -> .)

    stack_operator                 shift and go to state 136

state 104

    (51) RELOP -> EQ . stack_operator
    (77) stack_operator -> .

    L_PAREN         reduce using rule 77 (stack_operator -> .)
    PLUS            reduce using rule 77 (stack_operator -> .)
    MINUS           reduce using rule 77 (stack_operator -> .)
    ID              reduce using rule 77 (stack_operator -> .)
    CTE_I           reduce using rule 77 (stack_operator -> .)
    CTE_F           reduce using rule 77 (stack_operator -> .)
    CTE_CHAR        reduce using rule 77 (stack_operator -> .)

    stack_operator                 shift and go to state 137

state 105

    (52) RELOP -> LEQ . stack_operator
    (77) stack_operator -> .

    L_PAREN         reduce using rule 77 (stack_operator -> .)
    PLUS            reduce using rule 77 (stack_operator -> .)
    MINUS           reduce using rule 77 (stack_operator -> .)
    ID              reduce using rule 77 (stack_operator -> .)
    CTE_I           reduce using rule 77 (stack_operator -> .)
    CTE_F           reduce using rule 77 (stack_operator -> .)
    CTE_CHAR        reduce using rule 77 (stack_operator -> .)

    stack_operator                 shift and go to state 138

state 106

    (53) RELOP -> GEQ . stack_operator
    (77) stack_operator -> .

    L_PAREN         reduce using rule 77 (stack_operator -> .)
    PLUS            reduce using rule 77 (stack_operator -> .)
    MINUS           reduce using rule 77 (stack_operator -> .)
    ID              reduce using rule 77 (stack_operator -> .)
    CTE_I           reduce using rule 77 (stack_operator -> .)
    CTE_F           reduce using rule 77 (stack_operator -> .)
    CTE_CHAR        reduce using rule 77 (stack_operator -> .)

    stack_operator                 shift and go to state 139

state 107

    (55) EXP -> TERMINO MASMENOS . TERMINO
    (58) TERMINO -> . FACTOR
    (59) TERMINO -> . FACTOR MULTDIV FACTOR
    (62) FACTOR -> . L_PAREN stack_operator EXPRESION R_PAREN stack_operator
    (63) FACTOR -> . MASMENOS VAR_CTE
    (64) FACTOR -> . VAR_CTE
    (56) MASMENOS -> . PLUS stack_operator
    (57) MASMENOS -> . MINUS stack_operator
    (65) VAR_CTE -> . ID stack_operand_id
    (66) VAR_CTE -> . CTE_I stack_operand_int
    (67) VAR_CTE -> . CTE_F stack_operand_float
    (68) VAR_CTE -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 67
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 66
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 78
    CTE_CHAR        shift and go to state 79

    TERMINO                        shift and go to state 140
    MASMENOS                       shift and go to state 72
    FACTOR                         shift and go to state 73
    VAR_CTE                        shift and go to state 74

state 108

    (63) FACTOR -> MASMENOS VAR_CTE .

    MULT            reduce using rule 63 (FACTOR -> MASMENOS VAR_CTE .)
    DIV             reduce using rule 63 (FACTOR -> MASMENOS VAR_CTE .)
    PLUS            reduce using rule 63 (FACTOR -> MASMENOS VAR_CTE .)
    MINUS           reduce using rule 63 (FACTOR -> MASMENOS VAR_CTE .)
    GT              reduce using rule 63 (FACTOR -> MASMENOS VAR_CTE .)
    LT              reduce using rule 63 (FACTOR -> MASMENOS VAR_CTE .)
    EQ              reduce using rule 63 (FACTOR -> MASMENOS VAR_CTE .)
    LEQ             reduce using rule 63 (FACTOR -> MASMENOS VAR_CTE .)
    GEQ             reduce using rule 63 (FACTOR -> MASMENOS VAR_CTE .)
    R_PAREN         reduce using rule 63 (FACTOR -> MASMENOS VAR_CTE .)
    COMMA           reduce using rule 63 (FACTOR -> MASMENOS VAR_CTE .)
    SEMICOLON       reduce using rule 63 (FACTOR -> MASMENOS VAR_CTE .)
    TO              reduce using rule 63 (FACTOR -> MASMENOS VAR_CTE .)
    DO              reduce using rule 63 (FACTOR -> MASMENOS VAR_CTE .)


state 109

    (59) TERMINO -> FACTOR MULTDIV . FACTOR
    (62) FACTOR -> . L_PAREN stack_operator EXPRESION R_PAREN stack_operator
    (63) FACTOR -> . MASMENOS VAR_CTE
    (64) FACTOR -> . VAR_CTE
    (56) MASMENOS -> . PLUS stack_operator
    (57) MASMENOS -> . MINUS stack_operator
    (65) VAR_CTE -> . ID stack_operand_id
    (66) VAR_CTE -> . CTE_I stack_operand_int
    (67) VAR_CTE -> . CTE_F stack_operand_float
    (68) VAR_CTE -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 67
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 66
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 78
    CTE_CHAR        shift and go to state 79

    FACTOR                         shift and go to state 141
    MASMENOS                       shift and go to state 72
    VAR_CTE                        shift and go to state 74

state 110

    (60) MULTDIV -> MULT . stack_operator
    (77) stack_operator -> .

    L_PAREN         reduce using rule 77 (stack_operator -> .)
    PLUS            reduce using rule 77 (stack_operator -> .)
    MINUS           reduce using rule 77 (stack_operator -> .)
    ID              reduce using rule 77 (stack_operator -> .)
    CTE_I           reduce using rule 77 (stack_operator -> .)
    CTE_F           reduce using rule 77 (stack_operator -> .)
    CTE_CHAR        reduce using rule 77 (stack_operator -> .)

    stack_operator                 shift and go to state 142

state 111

    (61) MULTDIV -> DIV . stack_operator
    (77) stack_operator -> .

    L_PAREN         reduce using rule 77 (stack_operator -> .)
    PLUS            reduce using rule 77 (stack_operator -> .)
    MINUS           reduce using rule 77 (stack_operator -> .)
    ID              reduce using rule 77 (stack_operator -> .)
    CTE_I           reduce using rule 77 (stack_operator -> .)
    CTE_F           reduce using rule 77 (stack_operator -> .)
    CTE_CHAR        reduce using rule 77 (stack_operator -> .)

    stack_operator                 shift and go to state 143

state 112

    (56) MASMENOS -> PLUS stack_operator .

    ID              reduce using rule 56 (MASMENOS -> PLUS stack_operator .)
    CTE_I           reduce using rule 56 (MASMENOS -> PLUS stack_operator .)
    CTE_F           reduce using rule 56 (MASMENOS -> PLUS stack_operator .)
    CTE_CHAR        reduce using rule 56 (MASMENOS -> PLUS stack_operator .)
    L_PAREN         reduce using rule 56 (MASMENOS -> PLUS stack_operator .)
    PLUS            reduce using rule 56 (MASMENOS -> PLUS stack_operator .)
    MINUS           reduce using rule 56 (MASMENOS -> PLUS stack_operator .)


state 113

    (57) MASMENOS -> MINUS stack_operator .

    ID              reduce using rule 57 (MASMENOS -> MINUS stack_operator .)
    CTE_I           reduce using rule 57 (MASMENOS -> MINUS stack_operator .)
    CTE_F           reduce using rule 57 (MASMENOS -> MINUS stack_operator .)
    CTE_CHAR        reduce using rule 57 (MASMENOS -> MINUS stack_operator .)
    L_PAREN         reduce using rule 57 (MASMENOS -> MINUS stack_operator .)
    PLUS            reduce using rule 57 (MASMENOS -> MINUS stack_operator .)
    MINUS           reduce using rule 57 (MASMENOS -> MINUS stack_operator .)


state 114

    (66) VAR_CTE -> CTE_I stack_operand_int .

    MULT            reduce using rule 66 (VAR_CTE -> CTE_I stack_operand_int .)
    DIV             reduce using rule 66 (VAR_CTE -> CTE_I stack_operand_int .)
    PLUS            reduce using rule 66 (VAR_CTE -> CTE_I stack_operand_int .)
    MINUS           reduce using rule 66 (VAR_CTE -> CTE_I stack_operand_int .)
    GT              reduce using rule 66 (VAR_CTE -> CTE_I stack_operand_int .)
    LT              reduce using rule 66 (VAR_CTE -> CTE_I stack_operand_int .)
    EQ              reduce using rule 66 (VAR_CTE -> CTE_I stack_operand_int .)
    LEQ             reduce using rule 66 (VAR_CTE -> CTE_I stack_operand_int .)
    GEQ             reduce using rule 66 (VAR_CTE -> CTE_I stack_operand_int .)
    R_PAREN         reduce using rule 66 (VAR_CTE -> CTE_I stack_operand_int .)
    COMMA           reduce using rule 66 (VAR_CTE -> CTE_I stack_operand_int .)
    SEMICOLON       reduce using rule 66 (VAR_CTE -> CTE_I stack_operand_int .)
    TO              reduce using rule 66 (VAR_CTE -> CTE_I stack_operand_int .)
    DO              reduce using rule 66 (VAR_CTE -> CTE_I stack_operand_int .)


state 115

    (67) VAR_CTE -> CTE_F stack_operand_float .

    MULT            reduce using rule 67 (VAR_CTE -> CTE_F stack_operand_float .)
    DIV             reduce using rule 67 (VAR_CTE -> CTE_F stack_operand_float .)
    PLUS            reduce using rule 67 (VAR_CTE -> CTE_F stack_operand_float .)
    MINUS           reduce using rule 67 (VAR_CTE -> CTE_F stack_operand_float .)
    GT              reduce using rule 67 (VAR_CTE -> CTE_F stack_operand_float .)
    LT              reduce using rule 67 (VAR_CTE -> CTE_F stack_operand_float .)
    EQ              reduce using rule 67 (VAR_CTE -> CTE_F stack_operand_float .)
    LEQ             reduce using rule 67 (VAR_CTE -> CTE_F stack_operand_float .)
    GEQ             reduce using rule 67 (VAR_CTE -> CTE_F stack_operand_float .)
    R_PAREN         reduce using rule 67 (VAR_CTE -> CTE_F stack_operand_float .)
    COMMA           reduce using rule 67 (VAR_CTE -> CTE_F stack_operand_float .)
    SEMICOLON       reduce using rule 67 (VAR_CTE -> CTE_F stack_operand_float .)
    TO              reduce using rule 67 (VAR_CTE -> CTE_F stack_operand_float .)
    DO              reduce using rule 67 (VAR_CTE -> CTE_F stack_operand_float .)


state 116

    (68) VAR_CTE -> CTE_CHAR stack_operand_char .

    MULT            reduce using rule 68 (VAR_CTE -> CTE_CHAR stack_operand_char .)
    DIV             reduce using rule 68 (VAR_CTE -> CTE_CHAR stack_operand_char .)
    PLUS            reduce using rule 68 (VAR_CTE -> CTE_CHAR stack_operand_char .)
    MINUS           reduce using rule 68 (VAR_CTE -> CTE_CHAR stack_operand_char .)
    GT              reduce using rule 68 (VAR_CTE -> CTE_CHAR stack_operand_char .)
    LT              reduce using rule 68 (VAR_CTE -> CTE_CHAR stack_operand_char .)
    EQ              reduce using rule 68 (VAR_CTE -> CTE_CHAR stack_operand_char .)
    LEQ             reduce using rule 68 (VAR_CTE -> CTE_CHAR stack_operand_char .)
    GEQ             reduce using rule 68 (VAR_CTE -> CTE_CHAR stack_operand_char .)
    R_PAREN         reduce using rule 68 (VAR_CTE -> CTE_CHAR stack_operand_char .)
    COMMA           reduce using rule 68 (VAR_CTE -> CTE_CHAR stack_operand_char .)
    SEMICOLON       reduce using rule 68 (VAR_CTE -> CTE_CHAR stack_operand_char .)
    TO              reduce using rule 68 (VAR_CTE -> CTE_CHAR stack_operand_char .)
    DO              reduce using rule 68 (VAR_CTE -> CTE_CHAR stack_operand_char .)


state 117

    (7) array -> L_BRACKET CTE_I R_BRACKET .

    EQUAL           reduce using rule 7 (array -> L_BRACKET CTE_I R_BRACKET .)
    COLON           reduce using rule 7 (array -> L_BRACKET CTE_I R_BRACKET .)
    COMMA           reduce using rule 7 (array -> L_BRACKET CTE_I R_BRACKET .)
    R_PAREN         reduce using rule 7 (array -> L_BRACKET CTE_I R_BRACKET .)


state 118

    (42) CONDICION -> IF L_PAREN EXPRESION R_PAREN . BLOQUE else_aux
    (15) BLOQUE -> . L_BRACE ESTATUTO_rep R_BRACE

    L_BRACE         shift and go to state 13

    BLOQUE                         shift and go to state 144

state 119

    (37) ESCRITURA -> WRITE L_PAREN escritura_rep R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 145


state 120

    (38) escritura_rep -> escritura_rep COMMA . escritura_aux
    (40) escritura_aux -> . CTE_S
    (41) escritura_aux -> . EXPRESION
    (47) EXPRESION -> . EXP
    (48) EXPRESION -> . EXP RELOP EXP
    (54) EXP -> . TERMINO
    (55) EXP -> . TERMINO MASMENOS TERMINO
    (58) TERMINO -> . FACTOR
    (59) TERMINO -> . FACTOR MULTDIV FACTOR
    (62) FACTOR -> . L_PAREN stack_operator EXPRESION R_PAREN stack_operator
    (63) FACTOR -> . MASMENOS VAR_CTE
    (64) FACTOR -> . VAR_CTE
    (56) MASMENOS -> . PLUS stack_operator
    (57) MASMENOS -> . MINUS stack_operator
    (65) VAR_CTE -> . ID stack_operand_id
    (66) VAR_CTE -> . CTE_I stack_operand_int
    (67) VAR_CTE -> . CTE_F stack_operand_float
    (68) VAR_CTE -> . CTE_CHAR stack_operand_char

    CTE_S           shift and go to state 84
    L_PAREN         shift and go to state 67
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 66
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 78
    CTE_CHAR        shift and go to state 79

    escritura_aux                  shift and go to state 146
    EXPRESION                      shift and go to state 85
    EXP                            shift and go to state 70
    TERMINO                        shift and go to state 71
    MASMENOS                       shift and go to state 72
    FACTOR                         shift and go to state 73
    VAR_CTE                        shift and go to state 74

state 121

    (26) LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 147


state 122

    (35) RETORNO -> RETURN L_PAREN EXPRESION R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 148


state 123

    (36) LECTURA -> READ L_PAREN id_list R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 149


state 124

    (45) REPETICION -> WHILE L_PAREN EXPRESION R_PAREN . BLOQUE
    (15) BLOQUE -> . L_BRACE ESTATUTO_rep R_BRACE

    L_BRACE         shift and go to state 13

    BLOQUE                         shift and go to state 150

state 125

    (46) REPETICION -> FOR ID EQUAL EXPRESION . TO EXPRESION DO BLOQUE

    TO              shift and go to state 151


state 126

    (3) VARS -> VAR addvar id_list COLON TIPO SEMICOLON .

    FUNCTION        reduce using rule 3 (VARS -> VAR addvar id_list COLON TIPO SEMICOLON .)
    L_BRACE         reduce using rule 3 (VARS -> VAR addvar id_list COLON TIPO SEMICOLON .)


state 127

    (5) id_list -> id_list COMMA ID array .

    COLON           reduce using rule 5 (id_list -> id_list COMMA ID array .)
    COMMA           reduce using rule 5 (id_list -> id_list COMMA ID array .)
    R_PAREN         reduce using rule 5 (id_list -> id_list COMMA ID array .)


state 128

    (13) PARMS -> TIPO ID . id_list
    (5) id_list -> . id_list COMMA ID array
    (6) id_list -> . ID array

    ID              shift and go to state 43

    id_list                        shift and go to state 152

state 129

    (12) FUNC -> FUNCTION TIPO ID L_PAREN PARMS R_PAREN . VARS BLOQUE
    (3) VARS -> . VAR addvar id_list COLON TIPO SEMICOLON
    (4) VARS -> . empty
    (69) empty -> .

    VAR             shift and go to state 8
    L_BRACE         reduce using rule 69 (empty -> .)

    VARS                           shift and go to state 153
    empty                          shift and go to state 9

state 130

    (25) ASIGNACION -> ID array EQUAL EXPRESION np_asignacion . SEMICOLON

    SEMICOLON       shift and go to state 154


state 131

    (62) FACTOR -> L_PAREN stack_operator EXPRESION . R_PAREN stack_operator

    R_PAREN         shift and go to state 155


state 132

    (27) LLAMADA -> ID L_PAREN exp_rep R_PAREN np_llamada . SEMICOLON

    SEMICOLON       shift and go to state 156


state 133

    (28) exp_rep -> exp_rep COMMA EXPRESION .

    R_PAREN         reduce using rule 28 (exp_rep -> exp_rep COMMA EXPRESION .)
    COMMA           reduce using rule 28 (exp_rep -> exp_rep COMMA EXPRESION .)


state 134

    (48) EXPRESION -> EXP RELOP EXP .

    R_PAREN         reduce using rule 48 (EXPRESION -> EXP RELOP EXP .)
    COMMA           reduce using rule 48 (EXPRESION -> EXP RELOP EXP .)
    SEMICOLON       reduce using rule 48 (EXPRESION -> EXP RELOP EXP .)
    TO              reduce using rule 48 (EXPRESION -> EXP RELOP EXP .)
    DO              reduce using rule 48 (EXPRESION -> EXP RELOP EXP .)


state 135

    (49) RELOP -> GT stack_operator .

    L_PAREN         reduce using rule 49 (RELOP -> GT stack_operator .)
    PLUS            reduce using rule 49 (RELOP -> GT stack_operator .)
    MINUS           reduce using rule 49 (RELOP -> GT stack_operator .)
    ID              reduce using rule 49 (RELOP -> GT stack_operator .)
    CTE_I           reduce using rule 49 (RELOP -> GT stack_operator .)
    CTE_F           reduce using rule 49 (RELOP -> GT stack_operator .)
    CTE_CHAR        reduce using rule 49 (RELOP -> GT stack_operator .)


state 136

    (50) RELOP -> LT stack_operator .

    L_PAREN         reduce using rule 50 (RELOP -> LT stack_operator .)
    PLUS            reduce using rule 50 (RELOP -> LT stack_operator .)
    MINUS           reduce using rule 50 (RELOP -> LT stack_operator .)
    ID              reduce using rule 50 (RELOP -> LT stack_operator .)
    CTE_I           reduce using rule 50 (RELOP -> LT stack_operator .)
    CTE_F           reduce using rule 50 (RELOP -> LT stack_operator .)
    CTE_CHAR        reduce using rule 50 (RELOP -> LT stack_operator .)


state 137

    (51) RELOP -> EQ stack_operator .

    L_PAREN         reduce using rule 51 (RELOP -> EQ stack_operator .)
    PLUS            reduce using rule 51 (RELOP -> EQ stack_operator .)
    MINUS           reduce using rule 51 (RELOP -> EQ stack_operator .)
    ID              reduce using rule 51 (RELOP -> EQ stack_operator .)
    CTE_I           reduce using rule 51 (RELOP -> EQ stack_operator .)
    CTE_F           reduce using rule 51 (RELOP -> EQ stack_operator .)
    CTE_CHAR        reduce using rule 51 (RELOP -> EQ stack_operator .)


state 138

    (52) RELOP -> LEQ stack_operator .

    L_PAREN         reduce using rule 52 (RELOP -> LEQ stack_operator .)
    PLUS            reduce using rule 52 (RELOP -> LEQ stack_operator .)
    MINUS           reduce using rule 52 (RELOP -> LEQ stack_operator .)
    ID              reduce using rule 52 (RELOP -> LEQ stack_operator .)
    CTE_I           reduce using rule 52 (RELOP -> LEQ stack_operator .)
    CTE_F           reduce using rule 52 (RELOP -> LEQ stack_operator .)
    CTE_CHAR        reduce using rule 52 (RELOP -> LEQ stack_operator .)


state 139

    (53) RELOP -> GEQ stack_operator .

    L_PAREN         reduce using rule 53 (RELOP -> GEQ stack_operator .)
    PLUS            reduce using rule 53 (RELOP -> GEQ stack_operator .)
    MINUS           reduce using rule 53 (RELOP -> GEQ stack_operator .)
    ID              reduce using rule 53 (RELOP -> GEQ stack_operator .)
    CTE_I           reduce using rule 53 (RELOP -> GEQ stack_operator .)
    CTE_F           reduce using rule 53 (RELOP -> GEQ stack_operator .)
    CTE_CHAR        reduce using rule 53 (RELOP -> GEQ stack_operator .)


state 140

    (55) EXP -> TERMINO MASMENOS TERMINO .

    GT              reduce using rule 55 (EXP -> TERMINO MASMENOS TERMINO .)
    LT              reduce using rule 55 (EXP -> TERMINO MASMENOS TERMINO .)
    EQ              reduce using rule 55 (EXP -> TERMINO MASMENOS TERMINO .)
    LEQ             reduce using rule 55 (EXP -> TERMINO MASMENOS TERMINO .)
    GEQ             reduce using rule 55 (EXP -> TERMINO MASMENOS TERMINO .)
    R_PAREN         reduce using rule 55 (EXP -> TERMINO MASMENOS TERMINO .)
    COMMA           reduce using rule 55 (EXP -> TERMINO MASMENOS TERMINO .)
    SEMICOLON       reduce using rule 55 (EXP -> TERMINO MASMENOS TERMINO .)
    TO              reduce using rule 55 (EXP -> TERMINO MASMENOS TERMINO .)
    DO              reduce using rule 55 (EXP -> TERMINO MASMENOS TERMINO .)


state 141

    (59) TERMINO -> FACTOR MULTDIV FACTOR .

    PLUS            reduce using rule 59 (TERMINO -> FACTOR MULTDIV FACTOR .)
    MINUS           reduce using rule 59 (TERMINO -> FACTOR MULTDIV FACTOR .)
    GT              reduce using rule 59 (TERMINO -> FACTOR MULTDIV FACTOR .)
    LT              reduce using rule 59 (TERMINO -> FACTOR MULTDIV FACTOR .)
    EQ              reduce using rule 59 (TERMINO -> FACTOR MULTDIV FACTOR .)
    LEQ             reduce using rule 59 (TERMINO -> FACTOR MULTDIV FACTOR .)
    GEQ             reduce using rule 59 (TERMINO -> FACTOR MULTDIV FACTOR .)
    R_PAREN         reduce using rule 59 (TERMINO -> FACTOR MULTDIV FACTOR .)
    COMMA           reduce using rule 59 (TERMINO -> FACTOR MULTDIV FACTOR .)
    SEMICOLON       reduce using rule 59 (TERMINO -> FACTOR MULTDIV FACTOR .)
    TO              reduce using rule 59 (TERMINO -> FACTOR MULTDIV FACTOR .)
    DO              reduce using rule 59 (TERMINO -> FACTOR MULTDIV FACTOR .)


state 142

    (60) MULTDIV -> MULT stack_operator .

    L_PAREN         reduce using rule 60 (MULTDIV -> MULT stack_operator .)
    PLUS            reduce using rule 60 (MULTDIV -> MULT stack_operator .)
    MINUS           reduce using rule 60 (MULTDIV -> MULT stack_operator .)
    ID              reduce using rule 60 (MULTDIV -> MULT stack_operator .)
    CTE_I           reduce using rule 60 (MULTDIV -> MULT stack_operator .)
    CTE_F           reduce using rule 60 (MULTDIV -> MULT stack_operator .)
    CTE_CHAR        reduce using rule 60 (MULTDIV -> MULT stack_operator .)


state 143

    (61) MULTDIV -> DIV stack_operator .

    L_PAREN         reduce using rule 61 (MULTDIV -> DIV stack_operator .)
    PLUS            reduce using rule 61 (MULTDIV -> DIV stack_operator .)
    MINUS           reduce using rule 61 (MULTDIV -> DIV stack_operator .)
    ID              reduce using rule 61 (MULTDIV -> DIV stack_operator .)
    CTE_I           reduce using rule 61 (MULTDIV -> DIV stack_operator .)
    CTE_F           reduce using rule 61 (MULTDIV -> DIV stack_operator .)
    CTE_CHAR        reduce using rule 61 (MULTDIV -> DIV stack_operator .)


state 144

    (42) CONDICION -> IF L_PAREN EXPRESION R_PAREN BLOQUE . else_aux
    (43) else_aux -> . ELSE BLOQUE
    (44) else_aux -> . empty
    (69) empty -> .

    ELSE            shift and go to state 158
    R_BRACE         reduce using rule 69 (empty -> .)
    ID              reduce using rule 69 (empty -> .)
    IF              reduce using rule 69 (empty -> .)
    WRITE           reduce using rule 69 (empty -> .)
    RETURN          reduce using rule 69 (empty -> .)
    READ            reduce using rule 69 (empty -> .)
    WHILE           reduce using rule 69 (empty -> .)
    FOR             reduce using rule 69 (empty -> .)
    MEDIA           reduce using rule 69 (empty -> .)
    MODA            reduce using rule 69 (empty -> .)
    VARIANZA        reduce using rule 69 (empty -> .)
    REG             reduce using rule 69 (empty -> .)
    PLOTXY          reduce using rule 69 (empty -> .)

    else_aux                       shift and go to state 157
    empty                          shift and go to state 159

state 145

    (37) ESCRITURA -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .

    R_BRACE         reduce using rule 37 (ESCRITURA -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    ID              reduce using rule 37 (ESCRITURA -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    IF              reduce using rule 37 (ESCRITURA -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    WRITE           reduce using rule 37 (ESCRITURA -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    RETURN          reduce using rule 37 (ESCRITURA -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    READ            reduce using rule 37 (ESCRITURA -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    WHILE           reduce using rule 37 (ESCRITURA -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    FOR             reduce using rule 37 (ESCRITURA -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    MEDIA           reduce using rule 37 (ESCRITURA -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    MODA            reduce using rule 37 (ESCRITURA -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    VARIANZA        reduce using rule 37 (ESCRITURA -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    REG             reduce using rule 37 (ESCRITURA -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    PLOTXY          reduce using rule 37 (ESCRITURA -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)


state 146

    (38) escritura_rep -> escritura_rep COMMA escritura_aux .

    R_PAREN         reduce using rule 38 (escritura_rep -> escritura_rep COMMA escritura_aux .)
    COMMA           reduce using rule 38 (escritura_rep -> escritura_rep COMMA escritura_aux .)


state 147

    (26) LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON .

    R_BRACE         reduce using rule 26 (LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON .)
    ID              reduce using rule 26 (LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON .)
    IF              reduce using rule 26 (LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON .)
    WRITE           reduce using rule 26 (LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON .)
    RETURN          reduce using rule 26 (LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON .)
    READ            reduce using rule 26 (LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON .)
    WHILE           reduce using rule 26 (LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON .)
    FOR             reduce using rule 26 (LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON .)
    MEDIA           reduce using rule 26 (LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON .)
    MODA            reduce using rule 26 (LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON .)
    VARIANZA        reduce using rule 26 (LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON .)
    REG             reduce using rule 26 (LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON .)
    PLOTXY          reduce using rule 26 (LLAMADA -> FUNC_ESPECIAL L_PAREN exp_rep R_PAREN SEMICOLON .)


state 148

    (35) RETORNO -> RETURN L_PAREN EXPRESION R_PAREN SEMICOLON .

    R_BRACE         reduce using rule 35 (RETORNO -> RETURN L_PAREN EXPRESION R_PAREN SEMICOLON .)
    ID              reduce using rule 35 (RETORNO -> RETURN L_PAREN EXPRESION R_PAREN SEMICOLON .)
    IF              reduce using rule 35 (RETORNO -> RETURN L_PAREN EXPRESION R_PAREN SEMICOLON .)
    WRITE           reduce using rule 35 (RETORNO -> RETURN L_PAREN EXPRESION R_PAREN SEMICOLON .)
    RETURN          reduce using rule 35 (RETORNO -> RETURN L_PAREN EXPRESION R_PAREN SEMICOLON .)
    READ            reduce using rule 35 (RETORNO -> RETURN L_PAREN EXPRESION R_PAREN SEMICOLON .)
    WHILE           reduce using rule 35 (RETORNO -> RETURN L_PAREN EXPRESION R_PAREN SEMICOLON .)
    FOR             reduce using rule 35 (RETORNO -> RETURN L_PAREN EXPRESION R_PAREN SEMICOLON .)
    MEDIA           reduce using rule 35 (RETORNO -> RETURN L_PAREN EXPRESION R_PAREN SEMICOLON .)
    MODA            reduce using rule 35 (RETORNO -> RETURN L_PAREN EXPRESION R_PAREN SEMICOLON .)
    VARIANZA        reduce using rule 35 (RETORNO -> RETURN L_PAREN EXPRESION R_PAREN SEMICOLON .)
    REG             reduce using rule 35 (RETORNO -> RETURN L_PAREN EXPRESION R_PAREN SEMICOLON .)
    PLOTXY          reduce using rule 35 (RETORNO -> RETURN L_PAREN EXPRESION R_PAREN SEMICOLON .)


state 149

    (36) LECTURA -> READ L_PAREN id_list R_PAREN SEMICOLON .

    R_BRACE         reduce using rule 36 (LECTURA -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    ID              reduce using rule 36 (LECTURA -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    IF              reduce using rule 36 (LECTURA -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    WRITE           reduce using rule 36 (LECTURA -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    RETURN          reduce using rule 36 (LECTURA -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    READ            reduce using rule 36 (LECTURA -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    WHILE           reduce using rule 36 (LECTURA -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    FOR             reduce using rule 36 (LECTURA -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    MEDIA           reduce using rule 36 (LECTURA -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    MODA            reduce using rule 36 (LECTURA -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    VARIANZA        reduce using rule 36 (LECTURA -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    REG             reduce using rule 36 (LECTURA -> READ L_PAREN id_list R_PAREN SEMICOLON .)
    PLOTXY          reduce using rule 36 (LECTURA -> READ L_PAREN id_list R_PAREN SEMICOLON .)


state 150

    (45) REPETICION -> WHILE L_PAREN EXPRESION R_PAREN BLOQUE .

    R_BRACE         reduce using rule 45 (REPETICION -> WHILE L_PAREN EXPRESION R_PAREN BLOQUE .)
    ID              reduce using rule 45 (REPETICION -> WHILE L_PAREN EXPRESION R_PAREN BLOQUE .)
    IF              reduce using rule 45 (REPETICION -> WHILE L_PAREN EXPRESION R_PAREN BLOQUE .)
    WRITE           reduce using rule 45 (REPETICION -> WHILE L_PAREN EXPRESION R_PAREN BLOQUE .)
    RETURN          reduce using rule 45 (REPETICION -> WHILE L_PAREN EXPRESION R_PAREN BLOQUE .)
    READ            reduce using rule 45 (REPETICION -> WHILE L_PAREN EXPRESION R_PAREN BLOQUE .)
    WHILE           reduce using rule 45 (REPETICION -> WHILE L_PAREN EXPRESION R_PAREN BLOQUE .)
    FOR             reduce using rule 45 (REPETICION -> WHILE L_PAREN EXPRESION R_PAREN BLOQUE .)
    MEDIA           reduce using rule 45 (REPETICION -> WHILE L_PAREN EXPRESION R_PAREN BLOQUE .)
    MODA            reduce using rule 45 (REPETICION -> WHILE L_PAREN EXPRESION R_PAREN BLOQUE .)
    VARIANZA        reduce using rule 45 (REPETICION -> WHILE L_PAREN EXPRESION R_PAREN BLOQUE .)
    REG             reduce using rule 45 (REPETICION -> WHILE L_PAREN EXPRESION R_PAREN BLOQUE .)
    PLOTXY          reduce using rule 45 (REPETICION -> WHILE L_PAREN EXPRESION R_PAREN BLOQUE .)


state 151

    (46) REPETICION -> FOR ID EQUAL EXPRESION TO . EXPRESION DO BLOQUE
    (47) EXPRESION -> . EXP
    (48) EXPRESION -> . EXP RELOP EXP
    (54) EXP -> . TERMINO
    (55) EXP -> . TERMINO MASMENOS TERMINO
    (58) TERMINO -> . FACTOR
    (59) TERMINO -> . FACTOR MULTDIV FACTOR
    (62) FACTOR -> . L_PAREN stack_operator EXPRESION R_PAREN stack_operator
    (63) FACTOR -> . MASMENOS VAR_CTE
    (64) FACTOR -> . VAR_CTE
    (56) MASMENOS -> . PLUS stack_operator
    (57) MASMENOS -> . MINUS stack_operator
    (65) VAR_CTE -> . ID stack_operand_id
    (66) VAR_CTE -> . CTE_I stack_operand_int
    (67) VAR_CTE -> . CTE_F stack_operand_float
    (68) VAR_CTE -> . CTE_CHAR stack_operand_char

    L_PAREN         shift and go to state 67
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 66
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 78
    CTE_CHAR        shift and go to state 79

    EXPRESION                      shift and go to state 160
    EXP                            shift and go to state 70
    TERMINO                        shift and go to state 71
    MASMENOS                       shift and go to state 72
    FACTOR                         shift and go to state 73
    VAR_CTE                        shift and go to state 74

state 152

    (13) PARMS -> TIPO ID id_list .
    (5) id_list -> id_list . COMMA ID array

    R_PAREN         reduce using rule 13 (PARMS -> TIPO ID id_list .)
    COMMA           shift and go to state 62


state 153

    (12) FUNC -> FUNCTION TIPO ID L_PAREN PARMS R_PAREN VARS . BLOQUE
    (15) BLOQUE -> . L_BRACE ESTATUTO_rep R_BRACE

    L_BRACE         shift and go to state 13

    BLOQUE                         shift and go to state 161

state 154

    (25) ASIGNACION -> ID array EQUAL EXPRESION np_asignacion SEMICOLON .

    R_BRACE         reduce using rule 25 (ASIGNACION -> ID array EQUAL EXPRESION np_asignacion SEMICOLON .)
    ID              reduce using rule 25 (ASIGNACION -> ID array EQUAL EXPRESION np_asignacion SEMICOLON .)
    IF              reduce using rule 25 (ASIGNACION -> ID array EQUAL EXPRESION np_asignacion SEMICOLON .)
    WRITE           reduce using rule 25 (ASIGNACION -> ID array EQUAL EXPRESION np_asignacion SEMICOLON .)
    RETURN          reduce using rule 25 (ASIGNACION -> ID array EQUAL EXPRESION np_asignacion SEMICOLON .)
    READ            reduce using rule 25 (ASIGNACION -> ID array EQUAL EXPRESION np_asignacion SEMICOLON .)
    WHILE           reduce using rule 25 (ASIGNACION -> ID array EQUAL EXPRESION np_asignacion SEMICOLON .)
    FOR             reduce using rule 25 (ASIGNACION -> ID array EQUAL EXPRESION np_asignacion SEMICOLON .)
    MEDIA           reduce using rule 25 (ASIGNACION -> ID array EQUAL EXPRESION np_asignacion SEMICOLON .)
    MODA            reduce using rule 25 (ASIGNACION -> ID array EQUAL EXPRESION np_asignacion SEMICOLON .)
    VARIANZA        reduce using rule 25 (ASIGNACION -> ID array EQUAL EXPRESION np_asignacion SEMICOLON .)
    REG             reduce using rule 25 (ASIGNACION -> ID array EQUAL EXPRESION np_asignacion SEMICOLON .)
    PLOTXY          reduce using rule 25 (ASIGNACION -> ID array EQUAL EXPRESION np_asignacion SEMICOLON .)


state 155

    (62) FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN . stack_operator
    (77) stack_operator -> .

    MULT            reduce using rule 77 (stack_operator -> .)
    DIV             reduce using rule 77 (stack_operator -> .)
    PLUS            reduce using rule 77 (stack_operator -> .)
    MINUS           reduce using rule 77 (stack_operator -> .)
    GT              reduce using rule 77 (stack_operator -> .)
    LT              reduce using rule 77 (stack_operator -> .)
    EQ              reduce using rule 77 (stack_operator -> .)
    LEQ             reduce using rule 77 (stack_operator -> .)
    GEQ             reduce using rule 77 (stack_operator -> .)
    R_PAREN         reduce using rule 77 (stack_operator -> .)
    COMMA           reduce using rule 77 (stack_operator -> .)
    SEMICOLON       reduce using rule 77 (stack_operator -> .)
    TO              reduce using rule 77 (stack_operator -> .)
    DO              reduce using rule 77 (stack_operator -> .)

    stack_operator                 shift and go to state 162

state 156

    (27) LLAMADA -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .

    R_BRACE         reduce using rule 27 (LLAMADA -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    ID              reduce using rule 27 (LLAMADA -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    IF              reduce using rule 27 (LLAMADA -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    WRITE           reduce using rule 27 (LLAMADA -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    RETURN          reduce using rule 27 (LLAMADA -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    READ            reduce using rule 27 (LLAMADA -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    WHILE           reduce using rule 27 (LLAMADA -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    FOR             reduce using rule 27 (LLAMADA -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    MEDIA           reduce using rule 27 (LLAMADA -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    MODA            reduce using rule 27 (LLAMADA -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    VARIANZA        reduce using rule 27 (LLAMADA -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    REG             reduce using rule 27 (LLAMADA -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)
    PLOTXY          reduce using rule 27 (LLAMADA -> ID L_PAREN exp_rep R_PAREN np_llamada SEMICOLON .)


state 157

    (42) CONDICION -> IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux .

    R_BRACE         reduce using rule 42 (CONDICION -> IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux .)
    ID              reduce using rule 42 (CONDICION -> IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux .)
    IF              reduce using rule 42 (CONDICION -> IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux .)
    WRITE           reduce using rule 42 (CONDICION -> IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux .)
    RETURN          reduce using rule 42 (CONDICION -> IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux .)
    READ            reduce using rule 42 (CONDICION -> IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux .)
    WHILE           reduce using rule 42 (CONDICION -> IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux .)
    FOR             reduce using rule 42 (CONDICION -> IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux .)
    MEDIA           reduce using rule 42 (CONDICION -> IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux .)
    MODA            reduce using rule 42 (CONDICION -> IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux .)
    VARIANZA        reduce using rule 42 (CONDICION -> IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux .)
    REG             reduce using rule 42 (CONDICION -> IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux .)
    PLOTXY          reduce using rule 42 (CONDICION -> IF L_PAREN EXPRESION R_PAREN BLOQUE else_aux .)


state 158

    (43) else_aux -> ELSE . BLOQUE
    (15) BLOQUE -> . L_BRACE ESTATUTO_rep R_BRACE

    L_BRACE         shift and go to state 13

    BLOQUE                         shift and go to state 163

state 159

    (44) else_aux -> empty .

    R_BRACE         reduce using rule 44 (else_aux -> empty .)
    ID              reduce using rule 44 (else_aux -> empty .)
    IF              reduce using rule 44 (else_aux -> empty .)
    WRITE           reduce using rule 44 (else_aux -> empty .)
    RETURN          reduce using rule 44 (else_aux -> empty .)
    READ            reduce using rule 44 (else_aux -> empty .)
    WHILE           reduce using rule 44 (else_aux -> empty .)
    FOR             reduce using rule 44 (else_aux -> empty .)
    MEDIA           reduce using rule 44 (else_aux -> empty .)
    MODA            reduce using rule 44 (else_aux -> empty .)
    VARIANZA        reduce using rule 44 (else_aux -> empty .)
    REG             reduce using rule 44 (else_aux -> empty .)
    PLOTXY          reduce using rule 44 (else_aux -> empty .)


state 160

    (46) REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION . DO BLOQUE

    DO              shift and go to state 164


state 161

    (12) FUNC -> FUNCTION TIPO ID L_PAREN PARMS R_PAREN VARS BLOQUE .

    L_BRACE         reduce using rule 12 (FUNC -> FUNCTION TIPO ID L_PAREN PARMS R_PAREN VARS BLOQUE .)


state 162

    (62) FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN stack_operator .

    MULT            reduce using rule 62 (FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN stack_operator .)
    DIV             reduce using rule 62 (FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN stack_operator .)
    PLUS            reduce using rule 62 (FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN stack_operator .)
    MINUS           reduce using rule 62 (FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN stack_operator .)
    GT              reduce using rule 62 (FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN stack_operator .)
    LT              reduce using rule 62 (FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN stack_operator .)
    EQ              reduce using rule 62 (FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN stack_operator .)
    LEQ             reduce using rule 62 (FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN stack_operator .)
    GEQ             reduce using rule 62 (FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN stack_operator .)
    R_PAREN         reduce using rule 62 (FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN stack_operator .)
    COMMA           reduce using rule 62 (FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN stack_operator .)
    SEMICOLON       reduce using rule 62 (FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN stack_operator .)
    TO              reduce using rule 62 (FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN stack_operator .)
    DO              reduce using rule 62 (FACTOR -> L_PAREN stack_operator EXPRESION R_PAREN stack_operator .)


state 163

    (43) else_aux -> ELSE BLOQUE .

    R_BRACE         reduce using rule 43 (else_aux -> ELSE BLOQUE .)
    ID              reduce using rule 43 (else_aux -> ELSE BLOQUE .)
    IF              reduce using rule 43 (else_aux -> ELSE BLOQUE .)
    WRITE           reduce using rule 43 (else_aux -> ELSE BLOQUE .)
    RETURN          reduce using rule 43 (else_aux -> ELSE BLOQUE .)
    READ            reduce using rule 43 (else_aux -> ELSE BLOQUE .)
    WHILE           reduce using rule 43 (else_aux -> ELSE BLOQUE .)
    FOR             reduce using rule 43 (else_aux -> ELSE BLOQUE .)
    MEDIA           reduce using rule 43 (else_aux -> ELSE BLOQUE .)
    MODA            reduce using rule 43 (else_aux -> ELSE BLOQUE .)
    VARIANZA        reduce using rule 43 (else_aux -> ELSE BLOQUE .)
    REG             reduce using rule 43 (else_aux -> ELSE BLOQUE .)
    PLOTXY          reduce using rule 43 (else_aux -> ELSE BLOQUE .)


state 164

    (46) REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION DO . BLOQUE
    (15) BLOQUE -> . L_BRACE ESTATUTO_rep R_BRACE

    L_BRACE         shift and go to state 13

    BLOQUE                         shift and go to state 165

state 165

    (46) REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE .

    R_BRACE         reduce using rule 46 (REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE .)
    ID              reduce using rule 46 (REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE .)
    IF              reduce using rule 46 (REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE .)
    WRITE           reduce using rule 46 (REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE .)
    RETURN          reduce using rule 46 (REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE .)
    READ            reduce using rule 46 (REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE .)
    WHILE           reduce using rule 46 (REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE .)
    FOR             reduce using rule 46 (REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE .)
    MEDIA           reduce using rule 46 (REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE .)
    MODA            reduce using rule 46 (REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE .)
    VARIANZA        reduce using rule 46 (REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE .)
    REG             reduce using rule 46 (REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE .)
    PLOTXY          reduce using rule 46 (REPETICION -> FOR ID EQUAL EXPRESION TO EXPRESION DO BLOQUE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
