Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MEDIA
    MODA
    PLOTXY
    REG
    VARIANZA

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars2 func2 principal
Rule 2     vars -> VAR tipo COLON id_list SEMICOLON
Rule 3     vars2 -> vars vars2
Rule 4     vars2 -> empty
Rule 5     id_list -> id_list COMMA ID addvar array
Rule 6     id_list -> ID addvar array
Rule 7     array -> L_BRACKET CTE_I addDim R_BRACKET jumpAddr
Rule 8     array -> empty
Rule 9     tipo -> INT current_type
Rule 10    tipo -> FLOAT current_type
Rule 11    tipo -> BOOL current_type
Rule 12    tipo -> CHAR current_type
Rule 13    func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc
Rule 14    func2 -> func func2
Rule 15    func2 -> empty
Rule 16    tipo_func -> INT current_type
Rule 17    tipo_func -> FLOAT current_type
Rule 18    tipo_func -> CHAR current_type
Rule 19    tipo_func -> BOOL current_type
Rule 20    tipo_func -> VOID current_type
Rule 21    params -> tipo ID addvar updateParams params2
Rule 22    params -> empty
Rule 23    params2 -> COMMA tipo ID addvar updateParams params2
Rule 24    params2 -> empty
Rule 25    principal -> MAIN start funcChange L_PAREN R_PAREN bloque endProc
Rule 26    bloque -> L_BRACE estatuto_rep R_BRACE
Rule 27    estatuto_rep -> estatuto estatuto_rep
Rule 28    estatuto_rep -> empty
Rule 29    estatuto -> asignacion
Rule 30    estatuto -> condicion
Rule 31    estatuto -> escritura
Rule 32    estatuto -> llamada
Rule 33    estatuto -> retorno
Rule 34    estatuto -> lectura
Rule 35    estatuto -> repeticion
Rule 36    estatuto -> repeticion2
Rule 37    asignacion -> ID stack_operand_id EQUAL stack_operator expOr np_asignacion SEMICOLON
Rule 38    asignacion -> var_dim EQUAL stack_operator expOr np_asignacion SEMICOLON
Rule 39    llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
Rule 40    retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON
Rule 41    lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON
Rule 42    escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
Rule 43    escritura_rep -> escritura_rep COMMA escritura_aux
Rule 44    escritura_rep -> escritura_aux
Rule 45    escritura_aux -> CTE_S printString
Rule 46    escritura_aux -> expOr np_print
Rule 47    condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux
Rule 48    else_aux -> ELSE Goto bloque end_if
Rule 49    else_aux -> end_if
Rule 50    repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF DO bloque end_while
Rule 51    repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque
Rule 52    parm -> expOr checkParam parm2
Rule 53    parm -> empty
Rule 54    parm2 -> COMMA expOr checkParam parm2
Rule 55    parm2 -> empty
Rule 56    expOr -> expAnd checkAndOr OR stack_operator expOr
Rule 57    expOr -> expAnd checkAndOr
Rule 58    expAnd -> expresion checkAndOr AND stack_operator expAnd
Rule 59    expAnd -> expresion checkAndOr
Rule 60    expresion -> exp checkrelop relop
Rule 61    relop -> GT stack_operator expresion
Rule 62    relop -> LT stack_operator expresion
Rule 63    relop -> EQ stack_operator expresion
Rule 64    relop -> LEQ stack_operator expresion
Rule 65    relop -> GEQ stack_operator expresion
Rule 66    relop -> empty
Rule 67    exp -> termino checkexp masmenos
Rule 68    masmenos -> PLUS stack_operator exp
Rule 69    masmenos -> MINUS stack_operator exp
Rule 70    masmenos -> empty
Rule 71    termino -> factor checkterm multdiv
Rule 72    multdiv -> MULT stack_operator termino
Rule 73    multdiv -> DIV stack_operator termino
Rule 74    multdiv -> empty
Rule 75    factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis
Rule 76    factor -> var_cte
Rule 77    var_cte -> ID stack_operand_id
Rule 78    var_cte -> llamada
Rule 79    var_cte -> CTE_I stack_operand_int
Rule 80    var_cte -> CTE_F stack_operand_float
Rule 81    var_cte -> CTE_CHAR stack_operand_char
Rule 82    var_cte -> var_dim
Rule 83    var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim
Rule 84    empty -> <empty>
Rule 85    create_dirfunc -> <empty>
Rule 86    current_type -> <empty>
Rule 87    addvar -> <empty>
Rule 88    addfunc -> <empty>
Rule 89    stack_operand_id -> <empty>
Rule 90    stack_operand_int -> <empty>
Rule 91    stack_operand_float -> <empty>
Rule 92    stack_operand_char -> <empty>
Rule 93    stack_operator -> <empty>
Rule 94    fakebottom -> <empty>
Rule 95    checkparentesis -> <empty>
Rule 96    checkAndOr -> <empty>
Rule 97    checkterm -> <empty>
Rule 98    checkexp -> <empty>
Rule 99    checkrelop -> <empty>
Rule 100   llamadaEra -> <empty>
Rule 101   np_asignacion -> <empty>
Rule 102   np_return -> <empty>
Rule 103   GotoF -> <empty>
Rule 104   Goto -> <empty>
Rule 105   end_if -> <empty>
Rule 106   end_while -> <empty>
Rule 107   addJump -> <empty>
Rule 108   endFunc -> <empty>
Rule 109   updateParams -> <empty>
Rule 110   funcJump -> <empty>
Rule 111   funcChange -> <empty>
Rule 112   np_print -> <empty>
Rule 113   printString -> <empty>
Rule 114   np_read -> <empty>
Rule 115   start -> <empty>
Rule 116   endProc -> <empty>
Rule 117   checkParam -> <empty>
Rule 118   checkParamNum -> <empty>
Rule 119   Gosub -> <empty>
Rule 120   addDim -> <empty>
Rule 121   jumpAddr -> <empty>
Rule 122   verDim -> <empty>
Rule 123   verDimNum -> <empty>
Rule 124   cuadVer -> <empty>
Rule 125   cuadVarDim -> <empty>

Terminals, with rules where they appear

AND                  : 58
BOOL                 : 11 19
CHAR                 : 12 18
COLON                : 2
COMMA                : 5 23 43 54
CTE_CHAR             : 81
CTE_F                : 80
CTE_I                : 7 79
CTE_S                : 45
DIV                  : 73
DO                   : 50 51
ELSE                 : 48
EQ                   : 63
EQUAL                : 37 38 51
FLOAT                : 10 17
FOR                  : 51
FUNCTION             : 13
GEQ                  : 65
GT                   : 61
ID                   : 1 5 6 13 21 23 37 39 41 51 77 83
IF                   : 47
INT                  : 9 16
LEQ                  : 64
LT                   : 62
L_BRACE              : 13 26
L_BRACKET            : 7 83
L_PAREN              : 13 25 39 40 41 42 47 50 75
MAIN                 : 25
MEDIA                : 
MINUS                : 69
MODA                 : 
MULT                 : 72
OR                   : 56
PLOTXY               : 
PLUS                 : 68
PROGRAM              : 1
READ                 : 41
REG                  : 
RETURN               : 40
R_BRACE              : 13 26
R_BRACKET            : 7 83
R_PAREN              : 13 25 39 40 41 42 47 50 75
SEMICOLON            : 1 2 37 38 40 41 42
THEN                 : 47
TO                   : 51
VAR                  : 2
VARIANZA             : 
VOID                 : 20
WHILE                : 50
WRITE                : 42
error                : 

Nonterminals, with rules where they appear

Gosub                : 39
Goto                 : 48
GotoF                : 47 50
PROGRAMA             : 0
addDim               : 7
addJump              : 50
addfunc              : 13
addvar               : 5 6 21 23
array                : 5 6
asignacion           : 29
bloque               : 25 47 48 50 51
checkAndOr           : 56 57 58 59
checkParam           : 52 54
checkParamNum        : 39
checkexp             : 67
checkparentesis      : 39 75 83
checkrelop           : 60
checkterm            : 71
condicion            : 30
create_dirfunc       : 1
cuadVarDim           : 83
cuadVer              : 83
current_type         : 9 10 11 12 16 17 18 19 20
else_aux             : 47
empty                : 4 8 15 22 24 28 53 55 66 70 74
endFunc              : 13
endProc              : 25
end_if               : 48 49
end_while            : 50
escritura            : 31
escritura_aux        : 43 44
escritura_rep        : 42 43
estatuto             : 27
estatuto_rep         : 13 26 27
exp                  : 60 68 69
expAnd               : 56 57 58
expOr                : 37 38 40 46 47 50 51 51 52 54 56 75 83
expresion            : 58 59 61 62 63 64 65
factor               : 71
fakebottom           : 39 75 83
func                 : 14
func2                : 1 14
funcChange           : 25
funcJump             : 13
id_list              : 2 5
jumpAddr             : 7
lectura              : 34
llamada              : 32 78
llamadaEra           : 39
masmenos             : 67
multdiv              : 71
np_asignacion        : 37 38
np_print             : 46
np_read              : 41
np_return            : 40
params               : 13
params2              : 21 23
parm                 : 39
parm2                : 52 54
principal            : 1
printString          : 45
relop                : 60
repeticion           : 35
repeticion2          : 36
retorno              : 33
stack_operand_char   : 81
stack_operand_float  : 80
stack_operand_id     : 37 77 83
stack_operand_int    : 79
stack_operator       : 37 38 56 58 61 62 63 64 65 68 69 72 73
start                : 25
termino              : 67 72 73
tipo                 : 2 21 23
tipo_func            : 13
updateParams         : 21 23
var_cte              : 76
var_dim              : 38 82
vars                 : 3
vars2                : 1 3 13
verDim               : 83
verDimNum            : 83

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . PROGRAM create_dirfunc ID SEMICOLON vars2 func2 principal

    PROGRAM         shift and go to state 2

    PROGRAMA                       shift and go to state 1

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> PROGRAM . create_dirfunc ID SEMICOLON vars2 func2 principal
    (85) create_dirfunc -> .

    ID              reduce using rule 85 (create_dirfunc -> .)

    create_dirfunc                 shift and go to state 3

state 3

    (1) PROGRAMA -> PROGRAM create_dirfunc . ID SEMICOLON vars2 func2 principal

    ID              shift and go to state 4


state 4

    (1) PROGRAMA -> PROGRAM create_dirfunc ID . SEMICOLON vars2 func2 principal

    SEMICOLON       shift and go to state 5


state 5

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON . vars2 func2 principal
    (3) vars2 -> . vars vars2
    (4) vars2 -> . empty
    (2) vars -> . VAR tipo COLON id_list SEMICOLON
    (84) empty -> .

    VAR             shift and go to state 9
    FUNCTION        reduce using rule 84 (empty -> .)
    MAIN            reduce using rule 84 (empty -> .)

    vars2                          shift and go to state 6
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 6

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars2 . func2 principal
    (14) func2 -> . func func2
    (15) func2 -> . empty
    (13) func -> . FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc
    (84) empty -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 84 (empty -> .)

    func2                          shift and go to state 10
    func                           shift and go to state 11
    empty                          shift and go to state 12

state 7

    (3) vars2 -> vars . vars2
    (3) vars2 -> . vars vars2
    (4) vars2 -> . empty
    (2) vars -> . VAR tipo COLON id_list SEMICOLON
    (84) empty -> .

    VAR             shift and go to state 9
    FUNCTION        reduce using rule 84 (empty -> .)
    MAIN            reduce using rule 84 (empty -> .)
    L_BRACE         reduce using rule 84 (empty -> .)

    vars                           shift and go to state 7
    vars2                          shift and go to state 14
    empty                          shift and go to state 8

state 8

    (4) vars2 -> empty .

    FUNCTION        reduce using rule 4 (vars2 -> empty .)
    MAIN            reduce using rule 4 (vars2 -> empty .)
    L_BRACE         reduce using rule 4 (vars2 -> empty .)


state 9

    (2) vars -> VAR . tipo COLON id_list SEMICOLON
    (9) tipo -> . INT current_type
    (10) tipo -> . FLOAT current_type
    (11) tipo -> . BOOL current_type
    (12) tipo -> . CHAR current_type

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    CHAR            shift and go to state 19

    tipo                           shift and go to state 15

state 10

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars2 func2 . principal
    (25) principal -> . MAIN start funcChange L_PAREN R_PAREN bloque endProc

    MAIN            shift and go to state 21

    principal                      shift and go to state 20

state 11

    (14) func2 -> func . func2
    (14) func2 -> . func func2
    (15) func2 -> . empty
    (13) func -> . FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc
    (84) empty -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 84 (empty -> .)

    func                           shift and go to state 11
    func2                          shift and go to state 22
    empty                          shift and go to state 12

state 12

    (15) func2 -> empty .

    MAIN            reduce using rule 15 (func2 -> empty .)


state 13

    (13) func -> FUNCTION . tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc
    (16) tipo_func -> . INT current_type
    (17) tipo_func -> . FLOAT current_type
    (18) tipo_func -> . CHAR current_type
    (19) tipo_func -> . BOOL current_type
    (20) tipo_func -> . VOID current_type

    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26
    BOOL            shift and go to state 27
    VOID            shift and go to state 28

    tipo_func                      shift and go to state 23

state 14

    (3) vars2 -> vars vars2 .

    FUNCTION        reduce using rule 3 (vars2 -> vars vars2 .)
    MAIN            reduce using rule 3 (vars2 -> vars vars2 .)
    L_BRACE         reduce using rule 3 (vars2 -> vars vars2 .)


state 15

    (2) vars -> VAR tipo . COLON id_list SEMICOLON

    COLON           shift and go to state 29


state 16

    (9) tipo -> INT . current_type
    (86) current_type -> .

    COLON           reduce using rule 86 (current_type -> .)
    ID              reduce using rule 86 (current_type -> .)

    current_type                   shift and go to state 30

state 17

    (10) tipo -> FLOAT . current_type
    (86) current_type -> .

    COLON           reduce using rule 86 (current_type -> .)
    ID              reduce using rule 86 (current_type -> .)

    current_type                   shift and go to state 31

state 18

    (11) tipo -> BOOL . current_type
    (86) current_type -> .

    COLON           reduce using rule 86 (current_type -> .)
    ID              reduce using rule 86 (current_type -> .)

    current_type                   shift and go to state 32

state 19

    (12) tipo -> CHAR . current_type
    (86) current_type -> .

    COLON           reduce using rule 86 (current_type -> .)
    ID              reduce using rule 86 (current_type -> .)

    current_type                   shift and go to state 33

state 20

    (1) PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars2 func2 principal .

    $end            reduce using rule 1 (PROGRAMA -> PROGRAM create_dirfunc ID SEMICOLON vars2 func2 principal .)


state 21

    (25) principal -> MAIN . start funcChange L_PAREN R_PAREN bloque endProc
    (115) start -> .

    L_PAREN         reduce using rule 115 (start -> .)

    start                          shift and go to state 34

state 22

    (14) func2 -> func func2 .

    MAIN            reduce using rule 14 (func2 -> func func2 .)


state 23

    (13) func -> FUNCTION tipo_func . ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc

    ID              shift and go to state 35


state 24

    (16) tipo_func -> INT . current_type
    (86) current_type -> .

    ID              reduce using rule 86 (current_type -> .)

    current_type                   shift and go to state 36

state 25

    (17) tipo_func -> FLOAT . current_type
    (86) current_type -> .

    ID              reduce using rule 86 (current_type -> .)

    current_type                   shift and go to state 37

state 26

    (18) tipo_func -> CHAR . current_type
    (86) current_type -> .

    ID              reduce using rule 86 (current_type -> .)

    current_type                   shift and go to state 38

state 27

    (19) tipo_func -> BOOL . current_type
    (86) current_type -> .

    ID              reduce using rule 86 (current_type -> .)

    current_type                   shift and go to state 39

state 28

    (20) tipo_func -> VOID . current_type
    (86) current_type -> .

    ID              reduce using rule 86 (current_type -> .)

    current_type                   shift and go to state 40

state 29

    (2) vars -> VAR tipo COLON . id_list SEMICOLON
    (5) id_list -> . id_list COMMA ID addvar array
    (6) id_list -> . ID addvar array

    ID              shift and go to state 42

    id_list                        shift and go to state 41

state 30

    (9) tipo -> INT current_type .

    COLON           reduce using rule 9 (tipo -> INT current_type .)
    ID              reduce using rule 9 (tipo -> INT current_type .)


state 31

    (10) tipo -> FLOAT current_type .

    COLON           reduce using rule 10 (tipo -> FLOAT current_type .)
    ID              reduce using rule 10 (tipo -> FLOAT current_type .)


state 32

    (11) tipo -> BOOL current_type .

    COLON           reduce using rule 11 (tipo -> BOOL current_type .)
    ID              reduce using rule 11 (tipo -> BOOL current_type .)


state 33

    (12) tipo -> CHAR current_type .

    COLON           reduce using rule 12 (tipo -> CHAR current_type .)
    ID              reduce using rule 12 (tipo -> CHAR current_type .)


state 34

    (25) principal -> MAIN start . funcChange L_PAREN R_PAREN bloque endProc
    (111) funcChange -> .

    L_PAREN         reduce using rule 111 (funcChange -> .)

    funcChange                     shift and go to state 43

state 35

    (13) func -> FUNCTION tipo_func ID . addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc
    (88) addfunc -> .

    L_PAREN         reduce using rule 88 (addfunc -> .)

    addfunc                        shift and go to state 44

state 36

    (16) tipo_func -> INT current_type .

    ID              reduce using rule 16 (tipo_func -> INT current_type .)


state 37

    (17) tipo_func -> FLOAT current_type .

    ID              reduce using rule 17 (tipo_func -> FLOAT current_type .)


state 38

    (18) tipo_func -> CHAR current_type .

    ID              reduce using rule 18 (tipo_func -> CHAR current_type .)


state 39

    (19) tipo_func -> BOOL current_type .

    ID              reduce using rule 19 (tipo_func -> BOOL current_type .)


state 40

    (20) tipo_func -> VOID current_type .

    ID              reduce using rule 20 (tipo_func -> VOID current_type .)


state 41

    (2) vars -> VAR tipo COLON id_list . SEMICOLON
    (5) id_list -> id_list . COMMA ID addvar array

    SEMICOLON       shift and go to state 45
    COMMA           shift and go to state 46


state 42

    (6) id_list -> ID . addvar array
    (87) addvar -> .

    L_BRACKET       reduce using rule 87 (addvar -> .)
    SEMICOLON       reduce using rule 87 (addvar -> .)
    COMMA           reduce using rule 87 (addvar -> .)

    addvar                         shift and go to state 47

state 43

    (25) principal -> MAIN start funcChange . L_PAREN R_PAREN bloque endProc

    L_PAREN         shift and go to state 48


state 44

    (13) func -> FUNCTION tipo_func ID addfunc . L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc

    L_PAREN         shift and go to state 49


state 45

    (2) vars -> VAR tipo COLON id_list SEMICOLON .

    VAR             reduce using rule 2 (vars -> VAR tipo COLON id_list SEMICOLON .)
    FUNCTION        reduce using rule 2 (vars -> VAR tipo COLON id_list SEMICOLON .)
    MAIN            reduce using rule 2 (vars -> VAR tipo COLON id_list SEMICOLON .)
    L_BRACE         reduce using rule 2 (vars -> VAR tipo COLON id_list SEMICOLON .)


state 46

    (5) id_list -> id_list COMMA . ID addvar array

    ID              shift and go to state 50


state 47

    (6) id_list -> ID addvar . array
    (7) array -> . L_BRACKET CTE_I addDim R_BRACKET jumpAddr
    (8) array -> . empty
    (84) empty -> .

    L_BRACKET       shift and go to state 52
    SEMICOLON       reduce using rule 84 (empty -> .)
    COMMA           reduce using rule 84 (empty -> .)

    array                          shift and go to state 51
    empty                          shift and go to state 53

state 48

    (25) principal -> MAIN start funcChange L_PAREN . R_PAREN bloque endProc

    R_PAREN         shift and go to state 54


state 49

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN . params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc
    (21) params -> . tipo ID addvar updateParams params2
    (22) params -> . empty
    (9) tipo -> . INT current_type
    (10) tipo -> . FLOAT current_type
    (11) tipo -> . BOOL current_type
    (12) tipo -> . CHAR current_type
    (84) empty -> .

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    CHAR            shift and go to state 19
    R_PAREN         reduce using rule 84 (empty -> .)

    params                         shift and go to state 55
    tipo                           shift and go to state 56
    empty                          shift and go to state 57

state 50

    (5) id_list -> id_list COMMA ID . addvar array
    (87) addvar -> .

    L_BRACKET       reduce using rule 87 (addvar -> .)
    SEMICOLON       reduce using rule 87 (addvar -> .)
    COMMA           reduce using rule 87 (addvar -> .)

    addvar                         shift and go to state 58

state 51

    (6) id_list -> ID addvar array .

    SEMICOLON       reduce using rule 6 (id_list -> ID addvar array .)
    COMMA           reduce using rule 6 (id_list -> ID addvar array .)


state 52

    (7) array -> L_BRACKET . CTE_I addDim R_BRACKET jumpAddr

    CTE_I           shift and go to state 59


state 53

    (8) array -> empty .

    SEMICOLON       reduce using rule 8 (array -> empty .)
    COMMA           reduce using rule 8 (array -> empty .)


state 54

    (25) principal -> MAIN start funcChange L_PAREN R_PAREN . bloque endProc
    (26) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 61

    bloque                         shift and go to state 60

state 55

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN params . R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc

    R_PAREN         shift and go to state 62


state 56

    (21) params -> tipo . ID addvar updateParams params2

    ID              shift and go to state 63


state 57

    (22) params -> empty .

    R_PAREN         reduce using rule 22 (params -> empty .)


state 58

    (5) id_list -> id_list COMMA ID addvar . array
    (7) array -> . L_BRACKET CTE_I addDim R_BRACKET jumpAddr
    (8) array -> . empty
    (84) empty -> .

    L_BRACKET       shift and go to state 52
    SEMICOLON       reduce using rule 84 (empty -> .)
    COMMA           reduce using rule 84 (empty -> .)

    array                          shift and go to state 64
    empty                          shift and go to state 53

state 59

    (7) array -> L_BRACKET CTE_I . addDim R_BRACKET jumpAddr
    (120) addDim -> .

    R_BRACKET       reduce using rule 120 (addDim -> .)

    addDim                         shift and go to state 65

state 60

    (25) principal -> MAIN start funcChange L_PAREN R_PAREN bloque . endProc
    (116) endProc -> .

    $end            reduce using rule 116 (endProc -> .)

    endProc                        shift and go to state 66

state 61

    (26) bloque -> L_BRACE . estatuto_rep R_BRACE
    (27) estatuto_rep -> . estatuto estatuto_rep
    (28) estatuto_rep -> . empty
    (29) estatuto -> . asignacion
    (30) estatuto -> . condicion
    (31) estatuto -> . escritura
    (32) estatuto -> . llamada
    (33) estatuto -> . retorno
    (34) estatuto -> . lectura
    (35) estatuto -> . repeticion
    (36) estatuto -> . repeticion2
    (84) empty -> .
    (37) asignacion -> . ID stack_operand_id EQUAL stack_operator expOr np_asignacion SEMICOLON
    (38) asignacion -> . var_dim EQUAL stack_operator expOr np_asignacion SEMICOLON
    (47) condicion -> . IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux
    (42) escritura -> . WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (40) retorno -> . RETURN L_PAREN expOr np_return R_PAREN SEMICOLON
    (41) lectura -> . READ L_PAREN ID np_read R_PAREN SEMICOLON
    (50) repeticion -> . WHILE addJump L_PAREN expOr R_PAREN GotoF DO bloque end_while
    (51) repeticion2 -> . FOR ID EQUAL expOr TO expOr DO bloque
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    R_BRACE         reduce using rule 84 (empty -> .)
    ID              shift and go to state 78
    IF              shift and go to state 80
    WRITE           shift and go to state 81
    RETURN          shift and go to state 82
    READ            shift and go to state 83
    WHILE           shift and go to state 84
    FOR             shift and go to state 85

    estatuto_rep                   shift and go to state 67
    estatuto                       shift and go to state 68
    empty                          shift and go to state 69
    asignacion                     shift and go to state 70
    condicion                      shift and go to state 71
    escritura                      shift and go to state 72
    llamada                        shift and go to state 73
    retorno                        shift and go to state 74
    lectura                        shift and go to state 75
    repeticion                     shift and go to state 76
    repeticion2                    shift and go to state 77
    var_dim                        shift and go to state 79

state 62

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN . vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc
    (3) vars2 -> . vars vars2
    (4) vars2 -> . empty
    (2) vars -> . VAR tipo COLON id_list SEMICOLON
    (84) empty -> .

    VAR             shift and go to state 9
    L_BRACE         reduce using rule 84 (empty -> .)

    vars2                          shift and go to state 86
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 63

    (21) params -> tipo ID . addvar updateParams params2
    (87) addvar -> .

    COMMA           reduce using rule 87 (addvar -> .)
    R_PAREN         reduce using rule 87 (addvar -> .)

    addvar                         shift and go to state 87

state 64

    (5) id_list -> id_list COMMA ID addvar array .

    SEMICOLON       reduce using rule 5 (id_list -> id_list COMMA ID addvar array .)
    COMMA           reduce using rule 5 (id_list -> id_list COMMA ID addvar array .)


state 65

    (7) array -> L_BRACKET CTE_I addDim . R_BRACKET jumpAddr

    R_BRACKET       shift and go to state 88


state 66

    (25) principal -> MAIN start funcChange L_PAREN R_PAREN bloque endProc .

    $end            reduce using rule 25 (principal -> MAIN start funcChange L_PAREN R_PAREN bloque endProc .)


state 67

    (26) bloque -> L_BRACE estatuto_rep . R_BRACE

    R_BRACE         shift and go to state 89


state 68

    (27) estatuto_rep -> estatuto . estatuto_rep
    (27) estatuto_rep -> . estatuto estatuto_rep
    (28) estatuto_rep -> . empty
    (29) estatuto -> . asignacion
    (30) estatuto -> . condicion
    (31) estatuto -> . escritura
    (32) estatuto -> . llamada
    (33) estatuto -> . retorno
    (34) estatuto -> . lectura
    (35) estatuto -> . repeticion
    (36) estatuto -> . repeticion2
    (84) empty -> .
    (37) asignacion -> . ID stack_operand_id EQUAL stack_operator expOr np_asignacion SEMICOLON
    (38) asignacion -> . var_dim EQUAL stack_operator expOr np_asignacion SEMICOLON
    (47) condicion -> . IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux
    (42) escritura -> . WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (40) retorno -> . RETURN L_PAREN expOr np_return R_PAREN SEMICOLON
    (41) lectura -> . READ L_PAREN ID np_read R_PAREN SEMICOLON
    (50) repeticion -> . WHILE addJump L_PAREN expOr R_PAREN GotoF DO bloque end_while
    (51) repeticion2 -> . FOR ID EQUAL expOr TO expOr DO bloque
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    R_BRACE         reduce using rule 84 (empty -> .)
    ID              shift and go to state 78
    IF              shift and go to state 80
    WRITE           shift and go to state 81
    RETURN          shift and go to state 82
    READ            shift and go to state 83
    WHILE           shift and go to state 84
    FOR             shift and go to state 85

    estatuto                       shift and go to state 68
    estatuto_rep                   shift and go to state 90
    empty                          shift and go to state 69
    asignacion                     shift and go to state 70
    condicion                      shift and go to state 71
    escritura                      shift and go to state 72
    llamada                        shift and go to state 73
    retorno                        shift and go to state 74
    lectura                        shift and go to state 75
    repeticion                     shift and go to state 76
    repeticion2                    shift and go to state 77
    var_dim                        shift and go to state 79

state 69

    (28) estatuto_rep -> empty .

    R_BRACE         reduce using rule 28 (estatuto_rep -> empty .)


state 70

    (29) estatuto -> asignacion .

    ID              reduce using rule 29 (estatuto -> asignacion .)
    IF              reduce using rule 29 (estatuto -> asignacion .)
    WRITE           reduce using rule 29 (estatuto -> asignacion .)
    RETURN          reduce using rule 29 (estatuto -> asignacion .)
    READ            reduce using rule 29 (estatuto -> asignacion .)
    WHILE           reduce using rule 29 (estatuto -> asignacion .)
    FOR             reduce using rule 29 (estatuto -> asignacion .)
    R_BRACE         reduce using rule 29 (estatuto -> asignacion .)


state 71

    (30) estatuto -> condicion .

    ID              reduce using rule 30 (estatuto -> condicion .)
    IF              reduce using rule 30 (estatuto -> condicion .)
    WRITE           reduce using rule 30 (estatuto -> condicion .)
    RETURN          reduce using rule 30 (estatuto -> condicion .)
    READ            reduce using rule 30 (estatuto -> condicion .)
    WHILE           reduce using rule 30 (estatuto -> condicion .)
    FOR             reduce using rule 30 (estatuto -> condicion .)
    R_BRACE         reduce using rule 30 (estatuto -> condicion .)


state 72

    (31) estatuto -> escritura .

    ID              reduce using rule 31 (estatuto -> escritura .)
    IF              reduce using rule 31 (estatuto -> escritura .)
    WRITE           reduce using rule 31 (estatuto -> escritura .)
    RETURN          reduce using rule 31 (estatuto -> escritura .)
    READ            reduce using rule 31 (estatuto -> escritura .)
    WHILE           reduce using rule 31 (estatuto -> escritura .)
    FOR             reduce using rule 31 (estatuto -> escritura .)
    R_BRACE         reduce using rule 31 (estatuto -> escritura .)


state 73

    (32) estatuto -> llamada .

    ID              reduce using rule 32 (estatuto -> llamada .)
    IF              reduce using rule 32 (estatuto -> llamada .)
    WRITE           reduce using rule 32 (estatuto -> llamada .)
    RETURN          reduce using rule 32 (estatuto -> llamada .)
    READ            reduce using rule 32 (estatuto -> llamada .)
    WHILE           reduce using rule 32 (estatuto -> llamada .)
    FOR             reduce using rule 32 (estatuto -> llamada .)
    R_BRACE         reduce using rule 32 (estatuto -> llamada .)


state 74

    (33) estatuto -> retorno .

    ID              reduce using rule 33 (estatuto -> retorno .)
    IF              reduce using rule 33 (estatuto -> retorno .)
    WRITE           reduce using rule 33 (estatuto -> retorno .)
    RETURN          reduce using rule 33 (estatuto -> retorno .)
    READ            reduce using rule 33 (estatuto -> retorno .)
    WHILE           reduce using rule 33 (estatuto -> retorno .)
    FOR             reduce using rule 33 (estatuto -> retorno .)
    R_BRACE         reduce using rule 33 (estatuto -> retorno .)


state 75

    (34) estatuto -> lectura .

    ID              reduce using rule 34 (estatuto -> lectura .)
    IF              reduce using rule 34 (estatuto -> lectura .)
    WRITE           reduce using rule 34 (estatuto -> lectura .)
    RETURN          reduce using rule 34 (estatuto -> lectura .)
    READ            reduce using rule 34 (estatuto -> lectura .)
    WHILE           reduce using rule 34 (estatuto -> lectura .)
    FOR             reduce using rule 34 (estatuto -> lectura .)
    R_BRACE         reduce using rule 34 (estatuto -> lectura .)


state 76

    (35) estatuto -> repeticion .

    ID              reduce using rule 35 (estatuto -> repeticion .)
    IF              reduce using rule 35 (estatuto -> repeticion .)
    WRITE           reduce using rule 35 (estatuto -> repeticion .)
    RETURN          reduce using rule 35 (estatuto -> repeticion .)
    READ            reduce using rule 35 (estatuto -> repeticion .)
    WHILE           reduce using rule 35 (estatuto -> repeticion .)
    FOR             reduce using rule 35 (estatuto -> repeticion .)
    R_BRACE         reduce using rule 35 (estatuto -> repeticion .)


state 77

    (36) estatuto -> repeticion2 .

    ID              reduce using rule 36 (estatuto -> repeticion2 .)
    IF              reduce using rule 36 (estatuto -> repeticion2 .)
    WRITE           reduce using rule 36 (estatuto -> repeticion2 .)
    RETURN          reduce using rule 36 (estatuto -> repeticion2 .)
    READ            reduce using rule 36 (estatuto -> repeticion2 .)
    WHILE           reduce using rule 36 (estatuto -> repeticion2 .)
    FOR             reduce using rule 36 (estatuto -> repeticion2 .)
    R_BRACE         reduce using rule 36 (estatuto -> repeticion2 .)


state 78

    (37) asignacion -> ID . stack_operand_id EQUAL stack_operator expOr np_asignacion SEMICOLON
    (39) llamada -> ID . llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> ID . stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim
    (89) stack_operand_id -> .
    (100) llamadaEra -> .

    EQUAL           reduce using rule 89 (stack_operand_id -> .)
    L_BRACKET       reduce using rule 89 (stack_operand_id -> .)
    L_PAREN         reduce using rule 100 (llamadaEra -> .)

    stack_operand_id               shift and go to state 91
    llamadaEra                     shift and go to state 92

state 79

    (38) asignacion -> var_dim . EQUAL stack_operator expOr np_asignacion SEMICOLON

    EQUAL           shift and go to state 93


state 80

    (47) condicion -> IF . L_PAREN expOr R_PAREN GotoF THEN bloque else_aux

    L_PAREN         shift and go to state 94


state 81

    (42) escritura -> WRITE . L_PAREN escritura_rep R_PAREN SEMICOLON

    L_PAREN         shift and go to state 95


state 82

    (40) retorno -> RETURN . L_PAREN expOr np_return R_PAREN SEMICOLON

    L_PAREN         shift and go to state 96


state 83

    (41) lectura -> READ . L_PAREN ID np_read R_PAREN SEMICOLON

    L_PAREN         shift and go to state 97


state 84

    (50) repeticion -> WHILE . addJump L_PAREN expOr R_PAREN GotoF DO bloque end_while
    (107) addJump -> .

    L_PAREN         reduce using rule 107 (addJump -> .)

    addJump                        shift and go to state 98

state 85

    (51) repeticion2 -> FOR . ID EQUAL expOr TO expOr DO bloque

    ID              shift and go to state 99


state 86

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 . L_BRACE funcJump estatuto_rep R_BRACE endFunc

    L_BRACE         shift and go to state 100


state 87

    (21) params -> tipo ID addvar . updateParams params2
    (109) updateParams -> .

    COMMA           reduce using rule 109 (updateParams -> .)
    R_PAREN         reduce using rule 109 (updateParams -> .)

    updateParams                   shift and go to state 101

state 88

    (7) array -> L_BRACKET CTE_I addDim R_BRACKET . jumpAddr
    (121) jumpAddr -> .

    SEMICOLON       reduce using rule 121 (jumpAddr -> .)
    COMMA           reduce using rule 121 (jumpAddr -> .)

    jumpAddr                       shift and go to state 102

state 89

    (26) bloque -> L_BRACE estatuto_rep R_BRACE .

    $end            reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    ELSE            reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    ID              reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    IF              reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    WRITE           reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    RETURN          reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    READ            reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    WHILE           reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    FOR             reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)
    R_BRACE         reduce using rule 26 (bloque -> L_BRACE estatuto_rep R_BRACE .)


state 90

    (27) estatuto_rep -> estatuto estatuto_rep .

    R_BRACE         reduce using rule 27 (estatuto_rep -> estatuto estatuto_rep .)


state 91

    (37) asignacion -> ID stack_operand_id . EQUAL stack_operator expOr np_asignacion SEMICOLON
    (83) var_dim -> ID stack_operand_id . L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    EQUAL           shift and go to state 103
    L_BRACKET       shift and go to state 104


state 92

    (39) llamada -> ID llamadaEra . L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub

    L_PAREN         shift and go to state 105


state 93

    (38) asignacion -> var_dim EQUAL . stack_operator expOr np_asignacion SEMICOLON
    (93) stack_operator -> .

    L_PAREN         reduce using rule 93 (stack_operator -> .)
    ID              reduce using rule 93 (stack_operator -> .)
    CTE_I           reduce using rule 93 (stack_operator -> .)
    CTE_F           reduce using rule 93 (stack_operator -> .)
    CTE_CHAR        reduce using rule 93 (stack_operator -> .)

    stack_operator                 shift and go to state 106

state 94

    (47) condicion -> IF L_PAREN . expOr R_PAREN GotoF THEN bloque else_aux
    (56) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (57) expOr -> . expAnd checkAndOr
    (58) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (59) expAnd -> . expresion checkAndOr
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    expOr                          shift and go to state 108
    expAnd                         shift and go to state 109
    expresion                      shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 95

    (42) escritura -> WRITE L_PAREN . escritura_rep R_PAREN SEMICOLON
    (43) escritura_rep -> . escritura_rep COMMA escritura_aux
    (44) escritura_rep -> . escritura_aux
    (45) escritura_aux -> . CTE_S printString
    (46) escritura_aux -> . expOr np_print
    (56) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (57) expOr -> . expAnd checkAndOr
    (58) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (59) expAnd -> . expresion checkAndOr
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    CTE_S           shift and go to state 123
    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    escritura_rep                  shift and go to state 121
    escritura_aux                  shift and go to state 122
    expOr                          shift and go to state 124
    expAnd                         shift and go to state 109
    expresion                      shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 96

    (40) retorno -> RETURN L_PAREN . expOr np_return R_PAREN SEMICOLON
    (56) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (57) expOr -> . expAnd checkAndOr
    (58) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (59) expAnd -> . expresion checkAndOr
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    expOr                          shift and go to state 125
    expAnd                         shift and go to state 109
    expresion                      shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 97

    (41) lectura -> READ L_PAREN . ID np_read R_PAREN SEMICOLON

    ID              shift and go to state 126


state 98

    (50) repeticion -> WHILE addJump . L_PAREN expOr R_PAREN GotoF DO bloque end_while

    L_PAREN         shift and go to state 127


state 99

    (51) repeticion2 -> FOR ID . EQUAL expOr TO expOr DO bloque

    EQUAL           shift and go to state 128


state 100

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE . funcJump estatuto_rep R_BRACE endFunc
    (110) funcJump -> .

    ID              reduce using rule 110 (funcJump -> .)
    IF              reduce using rule 110 (funcJump -> .)
    WRITE           reduce using rule 110 (funcJump -> .)
    RETURN          reduce using rule 110 (funcJump -> .)
    READ            reduce using rule 110 (funcJump -> .)
    WHILE           reduce using rule 110 (funcJump -> .)
    FOR             reduce using rule 110 (funcJump -> .)
    R_BRACE         reduce using rule 110 (funcJump -> .)

    funcJump                       shift and go to state 129

state 101

    (21) params -> tipo ID addvar updateParams . params2
    (23) params2 -> . COMMA tipo ID addvar updateParams params2
    (24) params2 -> . empty
    (84) empty -> .

    COMMA           shift and go to state 131
    R_PAREN         reduce using rule 84 (empty -> .)

    params2                        shift and go to state 130
    empty                          shift and go to state 132

state 102

    (7) array -> L_BRACKET CTE_I addDim R_BRACKET jumpAddr .

    SEMICOLON       reduce using rule 7 (array -> L_BRACKET CTE_I addDim R_BRACKET jumpAddr .)
    COMMA           reduce using rule 7 (array -> L_BRACKET CTE_I addDim R_BRACKET jumpAddr .)


state 103

    (37) asignacion -> ID stack_operand_id EQUAL . stack_operator expOr np_asignacion SEMICOLON
    (93) stack_operator -> .

    L_PAREN         reduce using rule 93 (stack_operator -> .)
    ID              reduce using rule 93 (stack_operator -> .)
    CTE_I           reduce using rule 93 (stack_operator -> .)
    CTE_F           reduce using rule 93 (stack_operator -> .)
    CTE_CHAR        reduce using rule 93 (stack_operator -> .)

    stack_operator                 shift and go to state 133

state 104

    (83) var_dim -> ID stack_operand_id L_BRACKET . verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim
    (122) verDim -> .

    L_PAREN         reduce using rule 122 (verDim -> .)
    ID              reduce using rule 122 (verDim -> .)
    CTE_I           reduce using rule 122 (verDim -> .)
    CTE_F           reduce using rule 122 (verDim -> .)
    CTE_CHAR        reduce using rule 122 (verDim -> .)

    verDim                         shift and go to state 134

state 105

    (39) llamada -> ID llamadaEra L_PAREN . fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (94) fakebottom -> .

    L_PAREN         reduce using rule 94 (fakebottom -> .)
    ID              reduce using rule 94 (fakebottom -> .)
    CTE_I           reduce using rule 94 (fakebottom -> .)
    CTE_F           reduce using rule 94 (fakebottom -> .)
    CTE_CHAR        reduce using rule 94 (fakebottom -> .)
    R_PAREN         reduce using rule 94 (fakebottom -> .)

    fakebottom                     shift and go to state 135

state 106

    (38) asignacion -> var_dim EQUAL stack_operator . expOr np_asignacion SEMICOLON
    (56) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (57) expOr -> . expAnd checkAndOr
    (58) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (59) expAnd -> . expresion checkAndOr
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    var_dim                        shift and go to state 120
    expOr                          shift and go to state 136
    expAnd                         shift and go to state 109
    expresion                      shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116

state 107

    (75) factor -> L_PAREN . fakebottom expOr R_PAREN checkparentesis
    (94) fakebottom -> .

    L_PAREN         reduce using rule 94 (fakebottom -> .)
    ID              reduce using rule 94 (fakebottom -> .)
    CTE_I           reduce using rule 94 (fakebottom -> .)
    CTE_F           reduce using rule 94 (fakebottom -> .)
    CTE_CHAR        reduce using rule 94 (fakebottom -> .)

    fakebottom                     shift and go to state 137

state 108

    (47) condicion -> IF L_PAREN expOr . R_PAREN GotoF THEN bloque else_aux

    R_PAREN         shift and go to state 138


state 109

    (56) expOr -> expAnd . checkAndOr OR stack_operator expOr
    (57) expOr -> expAnd . checkAndOr
    (96) checkAndOr -> .

    OR              reduce using rule 96 (checkAndOr -> .)
    R_PAREN         reduce using rule 96 (checkAndOr -> .)
    COMMA           reduce using rule 96 (checkAndOr -> .)
    SEMICOLON       reduce using rule 96 (checkAndOr -> .)
    TO              reduce using rule 96 (checkAndOr -> .)
    R_BRACKET       reduce using rule 96 (checkAndOr -> .)
    DO              reduce using rule 96 (checkAndOr -> .)

    checkAndOr                     shift and go to state 139

state 110

    (58) expAnd -> expresion . checkAndOr AND stack_operator expAnd
    (59) expAnd -> expresion . checkAndOr
    (96) checkAndOr -> .

    AND             reduce using rule 96 (checkAndOr -> .)
    OR              reduce using rule 96 (checkAndOr -> .)
    R_PAREN         reduce using rule 96 (checkAndOr -> .)
    COMMA           reduce using rule 96 (checkAndOr -> .)
    SEMICOLON       reduce using rule 96 (checkAndOr -> .)
    TO              reduce using rule 96 (checkAndOr -> .)
    R_BRACKET       reduce using rule 96 (checkAndOr -> .)
    DO              reduce using rule 96 (checkAndOr -> .)

    checkAndOr                     shift and go to state 140

state 111

    (60) expresion -> exp . checkrelop relop
    (99) checkrelop -> .

    GT              reduce using rule 99 (checkrelop -> .)
    LT              reduce using rule 99 (checkrelop -> .)
    EQ              reduce using rule 99 (checkrelop -> .)
    LEQ             reduce using rule 99 (checkrelop -> .)
    GEQ             reduce using rule 99 (checkrelop -> .)
    AND             reduce using rule 99 (checkrelop -> .)
    OR              reduce using rule 99 (checkrelop -> .)
    R_PAREN         reduce using rule 99 (checkrelop -> .)
    COMMA           reduce using rule 99 (checkrelop -> .)
    SEMICOLON       reduce using rule 99 (checkrelop -> .)
    TO              reduce using rule 99 (checkrelop -> .)
    R_BRACKET       reduce using rule 99 (checkrelop -> .)
    DO              reduce using rule 99 (checkrelop -> .)

    checkrelop                     shift and go to state 141

state 112

    (67) exp -> termino . checkexp masmenos
    (98) checkexp -> .

    PLUS            reduce using rule 98 (checkexp -> .)
    MINUS           reduce using rule 98 (checkexp -> .)
    GT              reduce using rule 98 (checkexp -> .)
    LT              reduce using rule 98 (checkexp -> .)
    EQ              reduce using rule 98 (checkexp -> .)
    LEQ             reduce using rule 98 (checkexp -> .)
    GEQ             reduce using rule 98 (checkexp -> .)
    AND             reduce using rule 98 (checkexp -> .)
    OR              reduce using rule 98 (checkexp -> .)
    R_PAREN         reduce using rule 98 (checkexp -> .)
    COMMA           reduce using rule 98 (checkexp -> .)
    SEMICOLON       reduce using rule 98 (checkexp -> .)
    TO              reduce using rule 98 (checkexp -> .)
    R_BRACKET       reduce using rule 98 (checkexp -> .)
    DO              reduce using rule 98 (checkexp -> .)

    checkexp                       shift and go to state 142

state 113

    (71) termino -> factor . checkterm multdiv
    (97) checkterm -> .

    MULT            reduce using rule 97 (checkterm -> .)
    DIV             reduce using rule 97 (checkterm -> .)
    PLUS            reduce using rule 97 (checkterm -> .)
    MINUS           reduce using rule 97 (checkterm -> .)
    GT              reduce using rule 97 (checkterm -> .)
    LT              reduce using rule 97 (checkterm -> .)
    EQ              reduce using rule 97 (checkterm -> .)
    LEQ             reduce using rule 97 (checkterm -> .)
    GEQ             reduce using rule 97 (checkterm -> .)
    AND             reduce using rule 97 (checkterm -> .)
    OR              reduce using rule 97 (checkterm -> .)
    R_PAREN         reduce using rule 97 (checkterm -> .)
    COMMA           reduce using rule 97 (checkterm -> .)
    SEMICOLON       reduce using rule 97 (checkterm -> .)
    TO              reduce using rule 97 (checkterm -> .)
    R_BRACKET       reduce using rule 97 (checkterm -> .)
    DO              reduce using rule 97 (checkterm -> .)

    checkterm                      shift and go to state 143

state 114

    (76) factor -> var_cte .

    MULT            reduce using rule 76 (factor -> var_cte .)
    DIV             reduce using rule 76 (factor -> var_cte .)
    PLUS            reduce using rule 76 (factor -> var_cte .)
    MINUS           reduce using rule 76 (factor -> var_cte .)
    GT              reduce using rule 76 (factor -> var_cte .)
    LT              reduce using rule 76 (factor -> var_cte .)
    EQ              reduce using rule 76 (factor -> var_cte .)
    LEQ             reduce using rule 76 (factor -> var_cte .)
    GEQ             reduce using rule 76 (factor -> var_cte .)
    AND             reduce using rule 76 (factor -> var_cte .)
    OR              reduce using rule 76 (factor -> var_cte .)
    R_PAREN         reduce using rule 76 (factor -> var_cte .)
    COMMA           reduce using rule 76 (factor -> var_cte .)
    SEMICOLON       reduce using rule 76 (factor -> var_cte .)
    TO              reduce using rule 76 (factor -> var_cte .)
    R_BRACKET       reduce using rule 76 (factor -> var_cte .)
    DO              reduce using rule 76 (factor -> var_cte .)


state 115

    (77) var_cte -> ID . stack_operand_id
    (39) llamada -> ID . llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> ID . stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim
    (89) stack_operand_id -> .
    (100) llamadaEra -> .

    L_BRACKET       reduce using rule 89 (stack_operand_id -> .)
    MULT            reduce using rule 89 (stack_operand_id -> .)
    DIV             reduce using rule 89 (stack_operand_id -> .)
    PLUS            reduce using rule 89 (stack_operand_id -> .)
    MINUS           reduce using rule 89 (stack_operand_id -> .)
    GT              reduce using rule 89 (stack_operand_id -> .)
    LT              reduce using rule 89 (stack_operand_id -> .)
    EQ              reduce using rule 89 (stack_operand_id -> .)
    LEQ             reduce using rule 89 (stack_operand_id -> .)
    GEQ             reduce using rule 89 (stack_operand_id -> .)
    AND             reduce using rule 89 (stack_operand_id -> .)
    OR              reduce using rule 89 (stack_operand_id -> .)
    R_PAREN         reduce using rule 89 (stack_operand_id -> .)
    COMMA           reduce using rule 89 (stack_operand_id -> .)
    SEMICOLON       reduce using rule 89 (stack_operand_id -> .)
    TO              reduce using rule 89 (stack_operand_id -> .)
    R_BRACKET       reduce using rule 89 (stack_operand_id -> .)
    DO              reduce using rule 89 (stack_operand_id -> .)
    L_PAREN         reduce using rule 100 (llamadaEra -> .)

    stack_operand_id               shift and go to state 144
    llamadaEra                     shift and go to state 92

state 116

    (78) var_cte -> llamada .

    MULT            reduce using rule 78 (var_cte -> llamada .)
    DIV             reduce using rule 78 (var_cte -> llamada .)
    PLUS            reduce using rule 78 (var_cte -> llamada .)
    MINUS           reduce using rule 78 (var_cte -> llamada .)
    GT              reduce using rule 78 (var_cte -> llamada .)
    LT              reduce using rule 78 (var_cte -> llamada .)
    EQ              reduce using rule 78 (var_cte -> llamada .)
    LEQ             reduce using rule 78 (var_cte -> llamada .)
    GEQ             reduce using rule 78 (var_cte -> llamada .)
    AND             reduce using rule 78 (var_cte -> llamada .)
    OR              reduce using rule 78 (var_cte -> llamada .)
    R_PAREN         reduce using rule 78 (var_cte -> llamada .)
    COMMA           reduce using rule 78 (var_cte -> llamada .)
    SEMICOLON       reduce using rule 78 (var_cte -> llamada .)
    TO              reduce using rule 78 (var_cte -> llamada .)
    R_BRACKET       reduce using rule 78 (var_cte -> llamada .)
    DO              reduce using rule 78 (var_cte -> llamada .)


state 117

    (79) var_cte -> CTE_I . stack_operand_int
    (90) stack_operand_int -> .

    MULT            reduce using rule 90 (stack_operand_int -> .)
    DIV             reduce using rule 90 (stack_operand_int -> .)
    PLUS            reduce using rule 90 (stack_operand_int -> .)
    MINUS           reduce using rule 90 (stack_operand_int -> .)
    GT              reduce using rule 90 (stack_operand_int -> .)
    LT              reduce using rule 90 (stack_operand_int -> .)
    EQ              reduce using rule 90 (stack_operand_int -> .)
    LEQ             reduce using rule 90 (stack_operand_int -> .)
    GEQ             reduce using rule 90 (stack_operand_int -> .)
    AND             reduce using rule 90 (stack_operand_int -> .)
    OR              reduce using rule 90 (stack_operand_int -> .)
    R_PAREN         reduce using rule 90 (stack_operand_int -> .)
    COMMA           reduce using rule 90 (stack_operand_int -> .)
    SEMICOLON       reduce using rule 90 (stack_operand_int -> .)
    TO              reduce using rule 90 (stack_operand_int -> .)
    R_BRACKET       reduce using rule 90 (stack_operand_int -> .)
    DO              reduce using rule 90 (stack_operand_int -> .)

    stack_operand_int              shift and go to state 145

state 118

    (80) var_cte -> CTE_F . stack_operand_float
    (91) stack_operand_float -> .

    MULT            reduce using rule 91 (stack_operand_float -> .)
    DIV             reduce using rule 91 (stack_operand_float -> .)
    PLUS            reduce using rule 91 (stack_operand_float -> .)
    MINUS           reduce using rule 91 (stack_operand_float -> .)
    GT              reduce using rule 91 (stack_operand_float -> .)
    LT              reduce using rule 91 (stack_operand_float -> .)
    EQ              reduce using rule 91 (stack_operand_float -> .)
    LEQ             reduce using rule 91 (stack_operand_float -> .)
    GEQ             reduce using rule 91 (stack_operand_float -> .)
    AND             reduce using rule 91 (stack_operand_float -> .)
    OR              reduce using rule 91 (stack_operand_float -> .)
    R_PAREN         reduce using rule 91 (stack_operand_float -> .)
    COMMA           reduce using rule 91 (stack_operand_float -> .)
    SEMICOLON       reduce using rule 91 (stack_operand_float -> .)
    TO              reduce using rule 91 (stack_operand_float -> .)
    R_BRACKET       reduce using rule 91 (stack_operand_float -> .)
    DO              reduce using rule 91 (stack_operand_float -> .)

    stack_operand_float            shift and go to state 146

state 119

    (81) var_cte -> CTE_CHAR . stack_operand_char
    (92) stack_operand_char -> .

    MULT            reduce using rule 92 (stack_operand_char -> .)
    DIV             reduce using rule 92 (stack_operand_char -> .)
    PLUS            reduce using rule 92 (stack_operand_char -> .)
    MINUS           reduce using rule 92 (stack_operand_char -> .)
    GT              reduce using rule 92 (stack_operand_char -> .)
    LT              reduce using rule 92 (stack_operand_char -> .)
    EQ              reduce using rule 92 (stack_operand_char -> .)
    LEQ             reduce using rule 92 (stack_operand_char -> .)
    GEQ             reduce using rule 92 (stack_operand_char -> .)
    AND             reduce using rule 92 (stack_operand_char -> .)
    OR              reduce using rule 92 (stack_operand_char -> .)
    R_PAREN         reduce using rule 92 (stack_operand_char -> .)
    COMMA           reduce using rule 92 (stack_operand_char -> .)
    SEMICOLON       reduce using rule 92 (stack_operand_char -> .)
    TO              reduce using rule 92 (stack_operand_char -> .)
    R_BRACKET       reduce using rule 92 (stack_operand_char -> .)
    DO              reduce using rule 92 (stack_operand_char -> .)

    stack_operand_char             shift and go to state 147

state 120

    (82) var_cte -> var_dim .

    MULT            reduce using rule 82 (var_cte -> var_dim .)
    DIV             reduce using rule 82 (var_cte -> var_dim .)
    PLUS            reduce using rule 82 (var_cte -> var_dim .)
    MINUS           reduce using rule 82 (var_cte -> var_dim .)
    GT              reduce using rule 82 (var_cte -> var_dim .)
    LT              reduce using rule 82 (var_cte -> var_dim .)
    EQ              reduce using rule 82 (var_cte -> var_dim .)
    LEQ             reduce using rule 82 (var_cte -> var_dim .)
    GEQ             reduce using rule 82 (var_cte -> var_dim .)
    AND             reduce using rule 82 (var_cte -> var_dim .)
    OR              reduce using rule 82 (var_cte -> var_dim .)
    R_PAREN         reduce using rule 82 (var_cte -> var_dim .)
    COMMA           reduce using rule 82 (var_cte -> var_dim .)
    SEMICOLON       reduce using rule 82 (var_cte -> var_dim .)
    TO              reduce using rule 82 (var_cte -> var_dim .)
    R_BRACKET       reduce using rule 82 (var_cte -> var_dim .)
    DO              reduce using rule 82 (var_cte -> var_dim .)


state 121

    (42) escritura -> WRITE L_PAREN escritura_rep . R_PAREN SEMICOLON
    (43) escritura_rep -> escritura_rep . COMMA escritura_aux

    R_PAREN         shift and go to state 148
    COMMA           shift and go to state 149


state 122

    (44) escritura_rep -> escritura_aux .

    R_PAREN         reduce using rule 44 (escritura_rep -> escritura_aux .)
    COMMA           reduce using rule 44 (escritura_rep -> escritura_aux .)


state 123

    (45) escritura_aux -> CTE_S . printString
    (113) printString -> .

    R_PAREN         reduce using rule 113 (printString -> .)
    COMMA           reduce using rule 113 (printString -> .)

    printString                    shift and go to state 150

state 124

    (46) escritura_aux -> expOr . np_print
    (112) np_print -> .

    R_PAREN         reduce using rule 112 (np_print -> .)
    COMMA           reduce using rule 112 (np_print -> .)

    np_print                       shift and go to state 151

state 125

    (40) retorno -> RETURN L_PAREN expOr . np_return R_PAREN SEMICOLON
    (102) np_return -> .

    R_PAREN         reduce using rule 102 (np_return -> .)

    np_return                      shift and go to state 152

state 126

    (41) lectura -> READ L_PAREN ID . np_read R_PAREN SEMICOLON
    (114) np_read -> .

    R_PAREN         reduce using rule 114 (np_read -> .)

    np_read                        shift and go to state 153

state 127

    (50) repeticion -> WHILE addJump L_PAREN . expOr R_PAREN GotoF DO bloque end_while
    (56) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (57) expOr -> . expAnd checkAndOr
    (58) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (59) expAnd -> . expresion checkAndOr
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    expOr                          shift and go to state 154
    expAnd                         shift and go to state 109
    expresion                      shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 128

    (51) repeticion2 -> FOR ID EQUAL . expOr TO expOr DO bloque
    (56) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (57) expOr -> . expAnd checkAndOr
    (58) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (59) expAnd -> . expresion checkAndOr
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    expOr                          shift and go to state 155
    expAnd                         shift and go to state 109
    expresion                      shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 129

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump . estatuto_rep R_BRACE endFunc
    (27) estatuto_rep -> . estatuto estatuto_rep
    (28) estatuto_rep -> . empty
    (29) estatuto -> . asignacion
    (30) estatuto -> . condicion
    (31) estatuto -> . escritura
    (32) estatuto -> . llamada
    (33) estatuto -> . retorno
    (34) estatuto -> . lectura
    (35) estatuto -> . repeticion
    (36) estatuto -> . repeticion2
    (84) empty -> .
    (37) asignacion -> . ID stack_operand_id EQUAL stack_operator expOr np_asignacion SEMICOLON
    (38) asignacion -> . var_dim EQUAL stack_operator expOr np_asignacion SEMICOLON
    (47) condicion -> . IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux
    (42) escritura -> . WRITE L_PAREN escritura_rep R_PAREN SEMICOLON
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (40) retorno -> . RETURN L_PAREN expOr np_return R_PAREN SEMICOLON
    (41) lectura -> . READ L_PAREN ID np_read R_PAREN SEMICOLON
    (50) repeticion -> . WHILE addJump L_PAREN expOr R_PAREN GotoF DO bloque end_while
    (51) repeticion2 -> . FOR ID EQUAL expOr TO expOr DO bloque
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    R_BRACE         reduce using rule 84 (empty -> .)
    ID              shift and go to state 78
    IF              shift and go to state 80
    WRITE           shift and go to state 81
    RETURN          shift and go to state 82
    READ            shift and go to state 83
    WHILE           shift and go to state 84
    FOR             shift and go to state 85

    estatuto_rep                   shift and go to state 156
    estatuto                       shift and go to state 68
    empty                          shift and go to state 69
    asignacion                     shift and go to state 70
    condicion                      shift and go to state 71
    escritura                      shift and go to state 72
    llamada                        shift and go to state 73
    retorno                        shift and go to state 74
    lectura                        shift and go to state 75
    repeticion                     shift and go to state 76
    repeticion2                    shift and go to state 77
    var_dim                        shift and go to state 79

state 130

    (21) params -> tipo ID addvar updateParams params2 .

    R_PAREN         reduce using rule 21 (params -> tipo ID addvar updateParams params2 .)


state 131

    (23) params2 -> COMMA . tipo ID addvar updateParams params2
    (9) tipo -> . INT current_type
    (10) tipo -> . FLOAT current_type
    (11) tipo -> . BOOL current_type
    (12) tipo -> . CHAR current_type

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    BOOL            shift and go to state 18
    CHAR            shift and go to state 19

    tipo                           shift and go to state 157

state 132

    (24) params2 -> empty .

    R_PAREN         reduce using rule 24 (params2 -> empty .)


state 133

    (37) asignacion -> ID stack_operand_id EQUAL stack_operator . expOr np_asignacion SEMICOLON
    (56) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (57) expOr -> . expAnd checkAndOr
    (58) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (59) expAnd -> . expresion checkAndOr
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    expOr                          shift and go to state 158
    expAnd                         shift and go to state 109
    expresion                      shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 134

    (83) var_dim -> ID stack_operand_id L_BRACKET verDim . fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim
    (94) fakebottom -> .

    L_PAREN         reduce using rule 94 (fakebottom -> .)
    ID              reduce using rule 94 (fakebottom -> .)
    CTE_I           reduce using rule 94 (fakebottom -> .)
    CTE_F           reduce using rule 94 (fakebottom -> .)
    CTE_CHAR        reduce using rule 94 (fakebottom -> .)

    fakebottom                     shift and go to state 159

state 135

    (39) llamada -> ID llamadaEra L_PAREN fakebottom . parm checkParamNum R_PAREN checkparentesis Gosub
    (52) parm -> . expOr checkParam parm2
    (53) parm -> . empty
    (56) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (57) expOr -> . expAnd checkAndOr
    (84) empty -> .
    (58) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (59) expAnd -> . expresion checkAndOr
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    R_PAREN         reduce using rule 84 (empty -> .)
    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    parm                           shift and go to state 160
    expOr                          shift and go to state 161
    empty                          shift and go to state 162
    expAnd                         shift and go to state 109
    expresion                      shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 136

    (38) asignacion -> var_dim EQUAL stack_operator expOr . np_asignacion SEMICOLON
    (101) np_asignacion -> .

    SEMICOLON       reduce using rule 101 (np_asignacion -> .)

    np_asignacion                  shift and go to state 163

state 137

    (75) factor -> L_PAREN fakebottom . expOr R_PAREN checkparentesis
    (56) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (57) expOr -> . expAnd checkAndOr
    (58) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (59) expAnd -> . expresion checkAndOr
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    expOr                          shift and go to state 164
    expAnd                         shift and go to state 109
    expresion                      shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 138

    (47) condicion -> IF L_PAREN expOr R_PAREN . GotoF THEN bloque else_aux
    (103) GotoF -> .

    THEN            reduce using rule 103 (GotoF -> .)

    GotoF                          shift and go to state 165

state 139

    (56) expOr -> expAnd checkAndOr . OR stack_operator expOr
    (57) expOr -> expAnd checkAndOr .

    OR              shift and go to state 166
    R_PAREN         reduce using rule 57 (expOr -> expAnd checkAndOr .)
    COMMA           reduce using rule 57 (expOr -> expAnd checkAndOr .)
    SEMICOLON       reduce using rule 57 (expOr -> expAnd checkAndOr .)
    TO              reduce using rule 57 (expOr -> expAnd checkAndOr .)
    R_BRACKET       reduce using rule 57 (expOr -> expAnd checkAndOr .)
    DO              reduce using rule 57 (expOr -> expAnd checkAndOr .)


state 140

    (58) expAnd -> expresion checkAndOr . AND stack_operator expAnd
    (59) expAnd -> expresion checkAndOr .

    AND             shift and go to state 167
    OR              reduce using rule 59 (expAnd -> expresion checkAndOr .)
    R_PAREN         reduce using rule 59 (expAnd -> expresion checkAndOr .)
    COMMA           reduce using rule 59 (expAnd -> expresion checkAndOr .)
    SEMICOLON       reduce using rule 59 (expAnd -> expresion checkAndOr .)
    TO              reduce using rule 59 (expAnd -> expresion checkAndOr .)
    R_BRACKET       reduce using rule 59 (expAnd -> expresion checkAndOr .)
    DO              reduce using rule 59 (expAnd -> expresion checkAndOr .)


state 141

    (60) expresion -> exp checkrelop . relop
    (61) relop -> . GT stack_operator expresion
    (62) relop -> . LT stack_operator expresion
    (63) relop -> . EQ stack_operator expresion
    (64) relop -> . LEQ stack_operator expresion
    (65) relop -> . GEQ stack_operator expresion
    (66) relop -> . empty
    (84) empty -> .

    GT              shift and go to state 169
    LT              shift and go to state 170
    EQ              shift and go to state 171
    LEQ             shift and go to state 172
    GEQ             shift and go to state 173
    AND             reduce using rule 84 (empty -> .)
    OR              reduce using rule 84 (empty -> .)
    R_PAREN         reduce using rule 84 (empty -> .)
    COMMA           reduce using rule 84 (empty -> .)
    SEMICOLON       reduce using rule 84 (empty -> .)
    TO              reduce using rule 84 (empty -> .)
    R_BRACKET       reduce using rule 84 (empty -> .)
    DO              reduce using rule 84 (empty -> .)

    relop                          shift and go to state 168
    empty                          shift and go to state 174

state 142

    (67) exp -> termino checkexp . masmenos
    (68) masmenos -> . PLUS stack_operator exp
    (69) masmenos -> . MINUS stack_operator exp
    (70) masmenos -> . empty
    (84) empty -> .

    PLUS            shift and go to state 176
    MINUS           shift and go to state 177
    GT              reduce using rule 84 (empty -> .)
    LT              reduce using rule 84 (empty -> .)
    EQ              reduce using rule 84 (empty -> .)
    LEQ             reduce using rule 84 (empty -> .)
    GEQ             reduce using rule 84 (empty -> .)
    AND             reduce using rule 84 (empty -> .)
    OR              reduce using rule 84 (empty -> .)
    R_PAREN         reduce using rule 84 (empty -> .)
    COMMA           reduce using rule 84 (empty -> .)
    SEMICOLON       reduce using rule 84 (empty -> .)
    TO              reduce using rule 84 (empty -> .)
    R_BRACKET       reduce using rule 84 (empty -> .)
    DO              reduce using rule 84 (empty -> .)

    masmenos                       shift and go to state 175
    empty                          shift and go to state 178

state 143

    (71) termino -> factor checkterm . multdiv
    (72) multdiv -> . MULT stack_operator termino
    (73) multdiv -> . DIV stack_operator termino
    (74) multdiv -> . empty
    (84) empty -> .

    MULT            shift and go to state 180
    DIV             shift and go to state 181
    PLUS            reduce using rule 84 (empty -> .)
    MINUS           reduce using rule 84 (empty -> .)
    GT              reduce using rule 84 (empty -> .)
    LT              reduce using rule 84 (empty -> .)
    EQ              reduce using rule 84 (empty -> .)
    LEQ             reduce using rule 84 (empty -> .)
    GEQ             reduce using rule 84 (empty -> .)
    AND             reduce using rule 84 (empty -> .)
    OR              reduce using rule 84 (empty -> .)
    R_PAREN         reduce using rule 84 (empty -> .)
    COMMA           reduce using rule 84 (empty -> .)
    SEMICOLON       reduce using rule 84 (empty -> .)
    TO              reduce using rule 84 (empty -> .)
    R_BRACKET       reduce using rule 84 (empty -> .)
    DO              reduce using rule 84 (empty -> .)

    multdiv                        shift and go to state 179
    empty                          shift and go to state 182

state 144

    (77) var_cte -> ID stack_operand_id .
    (83) var_dim -> ID stack_operand_id . L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    MULT            reduce using rule 77 (var_cte -> ID stack_operand_id .)
    DIV             reduce using rule 77 (var_cte -> ID stack_operand_id .)
    PLUS            reduce using rule 77 (var_cte -> ID stack_operand_id .)
    MINUS           reduce using rule 77 (var_cte -> ID stack_operand_id .)
    GT              reduce using rule 77 (var_cte -> ID stack_operand_id .)
    LT              reduce using rule 77 (var_cte -> ID stack_operand_id .)
    EQ              reduce using rule 77 (var_cte -> ID stack_operand_id .)
    LEQ             reduce using rule 77 (var_cte -> ID stack_operand_id .)
    GEQ             reduce using rule 77 (var_cte -> ID stack_operand_id .)
    AND             reduce using rule 77 (var_cte -> ID stack_operand_id .)
    OR              reduce using rule 77 (var_cte -> ID stack_operand_id .)
    R_PAREN         reduce using rule 77 (var_cte -> ID stack_operand_id .)
    COMMA           reduce using rule 77 (var_cte -> ID stack_operand_id .)
    SEMICOLON       reduce using rule 77 (var_cte -> ID stack_operand_id .)
    TO              reduce using rule 77 (var_cte -> ID stack_operand_id .)
    R_BRACKET       reduce using rule 77 (var_cte -> ID stack_operand_id .)
    DO              reduce using rule 77 (var_cte -> ID stack_operand_id .)
    L_BRACKET       shift and go to state 104


state 145

    (79) var_cte -> CTE_I stack_operand_int .

    MULT            reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)
    DIV             reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)
    PLUS            reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)
    MINUS           reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)
    GT              reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)
    LT              reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)
    EQ              reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)
    LEQ             reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)
    GEQ             reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)
    AND             reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)
    OR              reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)
    R_PAREN         reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)
    COMMA           reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)
    SEMICOLON       reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)
    TO              reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)
    R_BRACKET       reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)
    DO              reduce using rule 79 (var_cte -> CTE_I stack_operand_int .)


state 146

    (80) var_cte -> CTE_F stack_operand_float .

    MULT            reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)
    DIV             reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)
    PLUS            reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)
    MINUS           reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)
    GT              reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)
    LT              reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)
    EQ              reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)
    LEQ             reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)
    GEQ             reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)
    AND             reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)
    OR              reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)
    R_PAREN         reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)
    COMMA           reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)
    SEMICOLON       reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)
    TO              reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)
    R_BRACKET       reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)
    DO              reduce using rule 80 (var_cte -> CTE_F stack_operand_float .)


state 147

    (81) var_cte -> CTE_CHAR stack_operand_char .

    MULT            reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)
    DIV             reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)
    PLUS            reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)
    MINUS           reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)
    GT              reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)
    LT              reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)
    EQ              reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)
    LEQ             reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)
    GEQ             reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)
    AND             reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)
    OR              reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)
    R_PAREN         reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)
    COMMA           reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)
    SEMICOLON       reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)
    TO              reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)
    R_BRACKET       reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)
    DO              reduce using rule 81 (var_cte -> CTE_CHAR stack_operand_char .)


state 148

    (42) escritura -> WRITE L_PAREN escritura_rep R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 183


state 149

    (43) escritura_rep -> escritura_rep COMMA . escritura_aux
    (45) escritura_aux -> . CTE_S printString
    (46) escritura_aux -> . expOr np_print
    (56) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (57) expOr -> . expAnd checkAndOr
    (58) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (59) expAnd -> . expresion checkAndOr
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    CTE_S           shift and go to state 123
    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    escritura_aux                  shift and go to state 184
    expOr                          shift and go to state 124
    expAnd                         shift and go to state 109
    expresion                      shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 150

    (45) escritura_aux -> CTE_S printString .

    R_PAREN         reduce using rule 45 (escritura_aux -> CTE_S printString .)
    COMMA           reduce using rule 45 (escritura_aux -> CTE_S printString .)


state 151

    (46) escritura_aux -> expOr np_print .

    R_PAREN         reduce using rule 46 (escritura_aux -> expOr np_print .)
    COMMA           reduce using rule 46 (escritura_aux -> expOr np_print .)


state 152

    (40) retorno -> RETURN L_PAREN expOr np_return . R_PAREN SEMICOLON

    R_PAREN         shift and go to state 185


state 153

    (41) lectura -> READ L_PAREN ID np_read . R_PAREN SEMICOLON

    R_PAREN         shift and go to state 186


state 154

    (50) repeticion -> WHILE addJump L_PAREN expOr . R_PAREN GotoF DO bloque end_while

    R_PAREN         shift and go to state 187


state 155

    (51) repeticion2 -> FOR ID EQUAL expOr . TO expOr DO bloque

    TO              shift and go to state 188


state 156

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep . R_BRACE endFunc

    R_BRACE         shift and go to state 189


state 157

    (23) params2 -> COMMA tipo . ID addvar updateParams params2

    ID              shift and go to state 190


state 158

    (37) asignacion -> ID stack_operand_id EQUAL stack_operator expOr . np_asignacion SEMICOLON
    (101) np_asignacion -> .

    SEMICOLON       reduce using rule 101 (np_asignacion -> .)

    np_asignacion                  shift and go to state 191

state 159

    (83) var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom . expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim
    (56) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (57) expOr -> . expAnd checkAndOr
    (58) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (59) expAnd -> . expresion checkAndOr
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    expOr                          shift and go to state 192
    expAnd                         shift and go to state 109
    expresion                      shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 160

    (39) llamada -> ID llamadaEra L_PAREN fakebottom parm . checkParamNum R_PAREN checkparentesis Gosub
    (118) checkParamNum -> .

    R_PAREN         reduce using rule 118 (checkParamNum -> .)

    checkParamNum                  shift and go to state 193

state 161

    (52) parm -> expOr . checkParam parm2
    (117) checkParam -> .

    COMMA           reduce using rule 117 (checkParam -> .)
    R_PAREN         reduce using rule 117 (checkParam -> .)

    checkParam                     shift and go to state 194

state 162

    (53) parm -> empty .

    R_PAREN         reduce using rule 53 (parm -> empty .)


state 163

    (38) asignacion -> var_dim EQUAL stack_operator expOr np_asignacion . SEMICOLON

    SEMICOLON       shift and go to state 195


state 164

    (75) factor -> L_PAREN fakebottom expOr . R_PAREN checkparentesis

    R_PAREN         shift and go to state 196


state 165

    (47) condicion -> IF L_PAREN expOr R_PAREN GotoF . THEN bloque else_aux

    THEN            shift and go to state 197


state 166

    (56) expOr -> expAnd checkAndOr OR . stack_operator expOr
    (93) stack_operator -> .

    L_PAREN         reduce using rule 93 (stack_operator -> .)
    ID              reduce using rule 93 (stack_operator -> .)
    CTE_I           reduce using rule 93 (stack_operator -> .)
    CTE_F           reduce using rule 93 (stack_operator -> .)
    CTE_CHAR        reduce using rule 93 (stack_operator -> .)

    stack_operator                 shift and go to state 198

state 167

    (58) expAnd -> expresion checkAndOr AND . stack_operator expAnd
    (93) stack_operator -> .

    L_PAREN         reduce using rule 93 (stack_operator -> .)
    ID              reduce using rule 93 (stack_operator -> .)
    CTE_I           reduce using rule 93 (stack_operator -> .)
    CTE_F           reduce using rule 93 (stack_operator -> .)
    CTE_CHAR        reduce using rule 93 (stack_operator -> .)

    stack_operator                 shift and go to state 199

state 168

    (60) expresion -> exp checkrelop relop .

    AND             reduce using rule 60 (expresion -> exp checkrelop relop .)
    OR              reduce using rule 60 (expresion -> exp checkrelop relop .)
    R_PAREN         reduce using rule 60 (expresion -> exp checkrelop relop .)
    COMMA           reduce using rule 60 (expresion -> exp checkrelop relop .)
    SEMICOLON       reduce using rule 60 (expresion -> exp checkrelop relop .)
    TO              reduce using rule 60 (expresion -> exp checkrelop relop .)
    R_BRACKET       reduce using rule 60 (expresion -> exp checkrelop relop .)
    DO              reduce using rule 60 (expresion -> exp checkrelop relop .)


state 169

    (61) relop -> GT . stack_operator expresion
    (93) stack_operator -> .

    L_PAREN         reduce using rule 93 (stack_operator -> .)
    ID              reduce using rule 93 (stack_operator -> .)
    CTE_I           reduce using rule 93 (stack_operator -> .)
    CTE_F           reduce using rule 93 (stack_operator -> .)
    CTE_CHAR        reduce using rule 93 (stack_operator -> .)

    stack_operator                 shift and go to state 200

state 170

    (62) relop -> LT . stack_operator expresion
    (93) stack_operator -> .

    L_PAREN         reduce using rule 93 (stack_operator -> .)
    ID              reduce using rule 93 (stack_operator -> .)
    CTE_I           reduce using rule 93 (stack_operator -> .)
    CTE_F           reduce using rule 93 (stack_operator -> .)
    CTE_CHAR        reduce using rule 93 (stack_operator -> .)

    stack_operator                 shift and go to state 201

state 171

    (63) relop -> EQ . stack_operator expresion
    (93) stack_operator -> .

    L_PAREN         reduce using rule 93 (stack_operator -> .)
    ID              reduce using rule 93 (stack_operator -> .)
    CTE_I           reduce using rule 93 (stack_operator -> .)
    CTE_F           reduce using rule 93 (stack_operator -> .)
    CTE_CHAR        reduce using rule 93 (stack_operator -> .)

    stack_operator                 shift and go to state 202

state 172

    (64) relop -> LEQ . stack_operator expresion
    (93) stack_operator -> .

    L_PAREN         reduce using rule 93 (stack_operator -> .)
    ID              reduce using rule 93 (stack_operator -> .)
    CTE_I           reduce using rule 93 (stack_operator -> .)
    CTE_F           reduce using rule 93 (stack_operator -> .)
    CTE_CHAR        reduce using rule 93 (stack_operator -> .)

    stack_operator                 shift and go to state 203

state 173

    (65) relop -> GEQ . stack_operator expresion
    (93) stack_operator -> .

    L_PAREN         reduce using rule 93 (stack_operator -> .)
    ID              reduce using rule 93 (stack_operator -> .)
    CTE_I           reduce using rule 93 (stack_operator -> .)
    CTE_F           reduce using rule 93 (stack_operator -> .)
    CTE_CHAR        reduce using rule 93 (stack_operator -> .)

    stack_operator                 shift and go to state 204

state 174

    (66) relop -> empty .

    AND             reduce using rule 66 (relop -> empty .)
    OR              reduce using rule 66 (relop -> empty .)
    R_PAREN         reduce using rule 66 (relop -> empty .)
    COMMA           reduce using rule 66 (relop -> empty .)
    SEMICOLON       reduce using rule 66 (relop -> empty .)
    TO              reduce using rule 66 (relop -> empty .)
    R_BRACKET       reduce using rule 66 (relop -> empty .)
    DO              reduce using rule 66 (relop -> empty .)


state 175

    (67) exp -> termino checkexp masmenos .

    GT              reduce using rule 67 (exp -> termino checkexp masmenos .)
    LT              reduce using rule 67 (exp -> termino checkexp masmenos .)
    EQ              reduce using rule 67 (exp -> termino checkexp masmenos .)
    LEQ             reduce using rule 67 (exp -> termino checkexp masmenos .)
    GEQ             reduce using rule 67 (exp -> termino checkexp masmenos .)
    AND             reduce using rule 67 (exp -> termino checkexp masmenos .)
    OR              reduce using rule 67 (exp -> termino checkexp masmenos .)
    R_PAREN         reduce using rule 67 (exp -> termino checkexp masmenos .)
    COMMA           reduce using rule 67 (exp -> termino checkexp masmenos .)
    SEMICOLON       reduce using rule 67 (exp -> termino checkexp masmenos .)
    TO              reduce using rule 67 (exp -> termino checkexp masmenos .)
    R_BRACKET       reduce using rule 67 (exp -> termino checkexp masmenos .)
    DO              reduce using rule 67 (exp -> termino checkexp masmenos .)


state 176

    (68) masmenos -> PLUS . stack_operator exp
    (93) stack_operator -> .

    L_PAREN         reduce using rule 93 (stack_operator -> .)
    ID              reduce using rule 93 (stack_operator -> .)
    CTE_I           reduce using rule 93 (stack_operator -> .)
    CTE_F           reduce using rule 93 (stack_operator -> .)
    CTE_CHAR        reduce using rule 93 (stack_operator -> .)

    stack_operator                 shift and go to state 205

state 177

    (69) masmenos -> MINUS . stack_operator exp
    (93) stack_operator -> .

    L_PAREN         reduce using rule 93 (stack_operator -> .)
    ID              reduce using rule 93 (stack_operator -> .)
    CTE_I           reduce using rule 93 (stack_operator -> .)
    CTE_F           reduce using rule 93 (stack_operator -> .)
    CTE_CHAR        reduce using rule 93 (stack_operator -> .)

    stack_operator                 shift and go to state 206

state 178

    (70) masmenos -> empty .

    GT              reduce using rule 70 (masmenos -> empty .)
    LT              reduce using rule 70 (masmenos -> empty .)
    EQ              reduce using rule 70 (masmenos -> empty .)
    LEQ             reduce using rule 70 (masmenos -> empty .)
    GEQ             reduce using rule 70 (masmenos -> empty .)
    AND             reduce using rule 70 (masmenos -> empty .)
    OR              reduce using rule 70 (masmenos -> empty .)
    R_PAREN         reduce using rule 70 (masmenos -> empty .)
    COMMA           reduce using rule 70 (masmenos -> empty .)
    SEMICOLON       reduce using rule 70 (masmenos -> empty .)
    TO              reduce using rule 70 (masmenos -> empty .)
    R_BRACKET       reduce using rule 70 (masmenos -> empty .)
    DO              reduce using rule 70 (masmenos -> empty .)


state 179

    (71) termino -> factor checkterm multdiv .

    PLUS            reduce using rule 71 (termino -> factor checkterm multdiv .)
    MINUS           reduce using rule 71 (termino -> factor checkterm multdiv .)
    GT              reduce using rule 71 (termino -> factor checkterm multdiv .)
    LT              reduce using rule 71 (termino -> factor checkterm multdiv .)
    EQ              reduce using rule 71 (termino -> factor checkterm multdiv .)
    LEQ             reduce using rule 71 (termino -> factor checkterm multdiv .)
    GEQ             reduce using rule 71 (termino -> factor checkterm multdiv .)
    AND             reduce using rule 71 (termino -> factor checkterm multdiv .)
    OR              reduce using rule 71 (termino -> factor checkterm multdiv .)
    R_PAREN         reduce using rule 71 (termino -> factor checkterm multdiv .)
    COMMA           reduce using rule 71 (termino -> factor checkterm multdiv .)
    SEMICOLON       reduce using rule 71 (termino -> factor checkterm multdiv .)
    TO              reduce using rule 71 (termino -> factor checkterm multdiv .)
    R_BRACKET       reduce using rule 71 (termino -> factor checkterm multdiv .)
    DO              reduce using rule 71 (termino -> factor checkterm multdiv .)


state 180

    (72) multdiv -> MULT . stack_operator termino
    (93) stack_operator -> .

    L_PAREN         reduce using rule 93 (stack_operator -> .)
    ID              reduce using rule 93 (stack_operator -> .)
    CTE_I           reduce using rule 93 (stack_operator -> .)
    CTE_F           reduce using rule 93 (stack_operator -> .)
    CTE_CHAR        reduce using rule 93 (stack_operator -> .)

    stack_operator                 shift and go to state 207

state 181

    (73) multdiv -> DIV . stack_operator termino
    (93) stack_operator -> .

    L_PAREN         reduce using rule 93 (stack_operator -> .)
    ID              reduce using rule 93 (stack_operator -> .)
    CTE_I           reduce using rule 93 (stack_operator -> .)
    CTE_F           reduce using rule 93 (stack_operator -> .)
    CTE_CHAR        reduce using rule 93 (stack_operator -> .)

    stack_operator                 shift and go to state 208

state 182

    (74) multdiv -> empty .

    PLUS            reduce using rule 74 (multdiv -> empty .)
    MINUS           reduce using rule 74 (multdiv -> empty .)
    GT              reduce using rule 74 (multdiv -> empty .)
    LT              reduce using rule 74 (multdiv -> empty .)
    EQ              reduce using rule 74 (multdiv -> empty .)
    LEQ             reduce using rule 74 (multdiv -> empty .)
    GEQ             reduce using rule 74 (multdiv -> empty .)
    AND             reduce using rule 74 (multdiv -> empty .)
    OR              reduce using rule 74 (multdiv -> empty .)
    R_PAREN         reduce using rule 74 (multdiv -> empty .)
    COMMA           reduce using rule 74 (multdiv -> empty .)
    SEMICOLON       reduce using rule 74 (multdiv -> empty .)
    TO              reduce using rule 74 (multdiv -> empty .)
    R_BRACKET       reduce using rule 74 (multdiv -> empty .)
    DO              reduce using rule 74 (multdiv -> empty .)


state 183

    (42) escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .

    ID              reduce using rule 42 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    IF              reduce using rule 42 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    WRITE           reduce using rule 42 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    RETURN          reduce using rule 42 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    READ            reduce using rule 42 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    WHILE           reduce using rule 42 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    FOR             reduce using rule 42 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)
    R_BRACE         reduce using rule 42 (escritura -> WRITE L_PAREN escritura_rep R_PAREN SEMICOLON .)


state 184

    (43) escritura_rep -> escritura_rep COMMA escritura_aux .

    R_PAREN         reduce using rule 43 (escritura_rep -> escritura_rep COMMA escritura_aux .)
    COMMA           reduce using rule 43 (escritura_rep -> escritura_rep COMMA escritura_aux .)


state 185

    (40) retorno -> RETURN L_PAREN expOr np_return R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 209


state 186

    (41) lectura -> READ L_PAREN ID np_read R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 210


state 187

    (50) repeticion -> WHILE addJump L_PAREN expOr R_PAREN . GotoF DO bloque end_while
    (103) GotoF -> .

    DO              reduce using rule 103 (GotoF -> .)

    GotoF                          shift and go to state 211

state 188

    (51) repeticion2 -> FOR ID EQUAL expOr TO . expOr DO bloque
    (56) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (57) expOr -> . expAnd checkAndOr
    (58) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (59) expAnd -> . expresion checkAndOr
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    expOr                          shift and go to state 212
    expAnd                         shift and go to state 109
    expresion                      shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 189

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE . endFunc
    (108) endFunc -> .

    FUNCTION        reduce using rule 108 (endFunc -> .)
    MAIN            reduce using rule 108 (endFunc -> .)

    endFunc                        shift and go to state 213

state 190

    (23) params2 -> COMMA tipo ID . addvar updateParams params2
    (87) addvar -> .

    COMMA           reduce using rule 87 (addvar -> .)
    R_PAREN         reduce using rule 87 (addvar -> .)

    addvar                         shift and go to state 214

state 191

    (37) asignacion -> ID stack_operand_id EQUAL stack_operator expOr np_asignacion . SEMICOLON

    SEMICOLON       shift and go to state 215


state 192

    (83) var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr . cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim
    (124) cuadVer -> .

    R_BRACKET       reduce using rule 124 (cuadVer -> .)

    cuadVer                        shift and go to state 216

state 193

    (39) llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum . R_PAREN checkparentesis Gosub

    R_PAREN         shift and go to state 217


state 194

    (52) parm -> expOr checkParam . parm2
    (54) parm2 -> . COMMA expOr checkParam parm2
    (55) parm2 -> . empty
    (84) empty -> .

    COMMA           shift and go to state 219
    R_PAREN         reduce using rule 84 (empty -> .)

    parm2                          shift and go to state 218
    empty                          shift and go to state 220

state 195

    (38) asignacion -> var_dim EQUAL stack_operator expOr np_asignacion SEMICOLON .

    ID              reduce using rule 38 (asignacion -> var_dim EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    IF              reduce using rule 38 (asignacion -> var_dim EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    WRITE           reduce using rule 38 (asignacion -> var_dim EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    RETURN          reduce using rule 38 (asignacion -> var_dim EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    READ            reduce using rule 38 (asignacion -> var_dim EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    WHILE           reduce using rule 38 (asignacion -> var_dim EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    FOR             reduce using rule 38 (asignacion -> var_dim EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    R_BRACE         reduce using rule 38 (asignacion -> var_dim EQUAL stack_operator expOr np_asignacion SEMICOLON .)


state 196

    (75) factor -> L_PAREN fakebottom expOr R_PAREN . checkparentesis
    (95) checkparentesis -> .

    MULT            reduce using rule 95 (checkparentesis -> .)
    DIV             reduce using rule 95 (checkparentesis -> .)
    PLUS            reduce using rule 95 (checkparentesis -> .)
    MINUS           reduce using rule 95 (checkparentesis -> .)
    GT              reduce using rule 95 (checkparentesis -> .)
    LT              reduce using rule 95 (checkparentesis -> .)
    EQ              reduce using rule 95 (checkparentesis -> .)
    LEQ             reduce using rule 95 (checkparentesis -> .)
    GEQ             reduce using rule 95 (checkparentesis -> .)
    AND             reduce using rule 95 (checkparentesis -> .)
    OR              reduce using rule 95 (checkparentesis -> .)
    R_PAREN         reduce using rule 95 (checkparentesis -> .)
    COMMA           reduce using rule 95 (checkparentesis -> .)
    SEMICOLON       reduce using rule 95 (checkparentesis -> .)
    TO              reduce using rule 95 (checkparentesis -> .)
    R_BRACKET       reduce using rule 95 (checkparentesis -> .)
    DO              reduce using rule 95 (checkparentesis -> .)

    checkparentesis                shift and go to state 221

state 197

    (47) condicion -> IF L_PAREN expOr R_PAREN GotoF THEN . bloque else_aux
    (26) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 61

    bloque                         shift and go to state 222

state 198

    (56) expOr -> expAnd checkAndOr OR stack_operator . expOr
    (56) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (57) expOr -> . expAnd checkAndOr
    (58) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (59) expAnd -> . expresion checkAndOr
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    expAnd                         shift and go to state 109
    expOr                          shift and go to state 223
    expresion                      shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 199

    (58) expAnd -> expresion checkAndOr AND stack_operator . expAnd
    (58) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (59) expAnd -> . expresion checkAndOr
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    expresion                      shift and go to state 110
    expAnd                         shift and go to state 224
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 200

    (61) relop -> GT stack_operator . expresion
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    expresion                      shift and go to state 225
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 201

    (62) relop -> LT stack_operator . expresion
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    expresion                      shift and go to state 226
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 202

    (63) relop -> EQ stack_operator . expresion
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    expresion                      shift and go to state 227
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 203

    (64) relop -> LEQ stack_operator . expresion
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    expresion                      shift and go to state 228
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 204

    (65) relop -> GEQ stack_operator . expresion
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    expresion                      shift and go to state 229
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 205

    (68) masmenos -> PLUS stack_operator . exp
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    exp                            shift and go to state 230
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 206

    (69) masmenos -> MINUS stack_operator . exp
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    exp                            shift and go to state 231
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 207

    (72) multdiv -> MULT stack_operator . termino
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    termino                        shift and go to state 232
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 208

    (73) multdiv -> DIV stack_operator . termino
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    termino                        shift and go to state 233
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 209

    (40) retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .

    ID              reduce using rule 40 (retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .)
    IF              reduce using rule 40 (retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .)
    WRITE           reduce using rule 40 (retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .)
    RETURN          reduce using rule 40 (retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .)
    READ            reduce using rule 40 (retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .)
    WHILE           reduce using rule 40 (retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .)
    FOR             reduce using rule 40 (retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .)
    R_BRACE         reduce using rule 40 (retorno -> RETURN L_PAREN expOr np_return R_PAREN SEMICOLON .)


state 210

    (41) lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .

    ID              reduce using rule 41 (lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .)
    IF              reduce using rule 41 (lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .)
    WRITE           reduce using rule 41 (lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .)
    RETURN          reduce using rule 41 (lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .)
    READ            reduce using rule 41 (lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .)
    WHILE           reduce using rule 41 (lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .)
    FOR             reduce using rule 41 (lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .)
    R_BRACE         reduce using rule 41 (lectura -> READ L_PAREN ID np_read R_PAREN SEMICOLON .)


state 211

    (50) repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF . DO bloque end_while

    DO              shift and go to state 234


state 212

    (51) repeticion2 -> FOR ID EQUAL expOr TO expOr . DO bloque

    DO              shift and go to state 235


state 213

    (13) func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc .

    FUNCTION        reduce using rule 13 (func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc .)
    MAIN            reduce using rule 13 (func -> FUNCTION tipo_func ID addfunc L_PAREN params R_PAREN vars2 L_BRACE funcJump estatuto_rep R_BRACE endFunc .)


state 214

    (23) params2 -> COMMA tipo ID addvar . updateParams params2
    (109) updateParams -> .

    COMMA           reduce using rule 109 (updateParams -> .)
    R_PAREN         reduce using rule 109 (updateParams -> .)

    updateParams                   shift and go to state 236

state 215

    (37) asignacion -> ID stack_operand_id EQUAL stack_operator expOr np_asignacion SEMICOLON .

    ID              reduce using rule 37 (asignacion -> ID stack_operand_id EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    IF              reduce using rule 37 (asignacion -> ID stack_operand_id EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    WRITE           reduce using rule 37 (asignacion -> ID stack_operand_id EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    RETURN          reduce using rule 37 (asignacion -> ID stack_operand_id EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    READ            reduce using rule 37 (asignacion -> ID stack_operand_id EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    WHILE           reduce using rule 37 (asignacion -> ID stack_operand_id EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    FOR             reduce using rule 37 (asignacion -> ID stack_operand_id EQUAL stack_operator expOr np_asignacion SEMICOLON .)
    R_BRACE         reduce using rule 37 (asignacion -> ID stack_operand_id EQUAL stack_operator expOr np_asignacion SEMICOLON .)


state 216

    (83) var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer . R_BRACKET checkparentesis verDimNum cuadVarDim

    R_BRACKET       shift and go to state 237


state 217

    (39) llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN . checkparentesis Gosub
    (95) checkparentesis -> .

    ID              reduce using rule 95 (checkparentesis -> .)
    IF              reduce using rule 95 (checkparentesis -> .)
    WRITE           reduce using rule 95 (checkparentesis -> .)
    RETURN          reduce using rule 95 (checkparentesis -> .)
    READ            reduce using rule 95 (checkparentesis -> .)
    WHILE           reduce using rule 95 (checkparentesis -> .)
    FOR             reduce using rule 95 (checkparentesis -> .)
    R_BRACE         reduce using rule 95 (checkparentesis -> .)
    MULT            reduce using rule 95 (checkparentesis -> .)
    DIV             reduce using rule 95 (checkparentesis -> .)
    PLUS            reduce using rule 95 (checkparentesis -> .)
    MINUS           reduce using rule 95 (checkparentesis -> .)
    GT              reduce using rule 95 (checkparentesis -> .)
    LT              reduce using rule 95 (checkparentesis -> .)
    EQ              reduce using rule 95 (checkparentesis -> .)
    LEQ             reduce using rule 95 (checkparentesis -> .)
    GEQ             reduce using rule 95 (checkparentesis -> .)
    AND             reduce using rule 95 (checkparentesis -> .)
    OR              reduce using rule 95 (checkparentesis -> .)
    R_PAREN         reduce using rule 95 (checkparentesis -> .)
    COMMA           reduce using rule 95 (checkparentesis -> .)
    SEMICOLON       reduce using rule 95 (checkparentesis -> .)
    TO              reduce using rule 95 (checkparentesis -> .)
    R_BRACKET       reduce using rule 95 (checkparentesis -> .)
    DO              reduce using rule 95 (checkparentesis -> .)

    checkparentesis                shift and go to state 238

state 218

    (52) parm -> expOr checkParam parm2 .

    R_PAREN         reduce using rule 52 (parm -> expOr checkParam parm2 .)


state 219

    (54) parm2 -> COMMA . expOr checkParam parm2
    (56) expOr -> . expAnd checkAndOr OR stack_operator expOr
    (57) expOr -> . expAnd checkAndOr
    (58) expAnd -> . expresion checkAndOr AND stack_operator expAnd
    (59) expAnd -> . expresion checkAndOr
    (60) expresion -> . exp checkrelop relop
    (67) exp -> . termino checkexp masmenos
    (71) termino -> . factor checkterm multdiv
    (75) factor -> . L_PAREN fakebottom expOr R_PAREN checkparentesis
    (76) factor -> . var_cte
    (77) var_cte -> . ID stack_operand_id
    (78) var_cte -> . llamada
    (79) var_cte -> . CTE_I stack_operand_int
    (80) var_cte -> . CTE_F stack_operand_float
    (81) var_cte -> . CTE_CHAR stack_operand_char
    (82) var_cte -> . var_dim
    (39) llamada -> . ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub
    (83) var_dim -> . ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim

    L_PAREN         shift and go to state 107
    ID              shift and go to state 115
    CTE_I           shift and go to state 117
    CTE_F           shift and go to state 118
    CTE_CHAR        shift and go to state 119

    expOr                          shift and go to state 239
    expAnd                         shift and go to state 109
    expresion                      shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 114
    llamada                        shift and go to state 116
    var_dim                        shift and go to state 120

state 220

    (55) parm2 -> empty .

    R_PAREN         reduce using rule 55 (parm2 -> empty .)


state 221

    (75) factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .

    MULT            reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    DIV             reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    PLUS            reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    MINUS           reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    GT              reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    LT              reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    EQ              reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    LEQ             reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    GEQ             reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    AND             reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    OR              reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    R_PAREN         reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    COMMA           reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    SEMICOLON       reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    TO              reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    R_BRACKET       reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)
    DO              reduce using rule 75 (factor -> L_PAREN fakebottom expOr R_PAREN checkparentesis .)


state 222

    (47) condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque . else_aux
    (48) else_aux -> . ELSE Goto bloque end_if
    (49) else_aux -> . end_if
    (105) end_if -> .

    ELSE            shift and go to state 241
    ID              reduce using rule 105 (end_if -> .)
    IF              reduce using rule 105 (end_if -> .)
    WRITE           reduce using rule 105 (end_if -> .)
    RETURN          reduce using rule 105 (end_if -> .)
    READ            reduce using rule 105 (end_if -> .)
    WHILE           reduce using rule 105 (end_if -> .)
    FOR             reduce using rule 105 (end_if -> .)
    R_BRACE         reduce using rule 105 (end_if -> .)

    else_aux                       shift and go to state 240
    end_if                         shift and go to state 242

state 223

    (56) expOr -> expAnd checkAndOr OR stack_operator expOr .

    R_PAREN         reduce using rule 56 (expOr -> expAnd checkAndOr OR stack_operator expOr .)
    COMMA           reduce using rule 56 (expOr -> expAnd checkAndOr OR stack_operator expOr .)
    SEMICOLON       reduce using rule 56 (expOr -> expAnd checkAndOr OR stack_operator expOr .)
    TO              reduce using rule 56 (expOr -> expAnd checkAndOr OR stack_operator expOr .)
    R_BRACKET       reduce using rule 56 (expOr -> expAnd checkAndOr OR stack_operator expOr .)
    DO              reduce using rule 56 (expOr -> expAnd checkAndOr OR stack_operator expOr .)


state 224

    (58) expAnd -> expresion checkAndOr AND stack_operator expAnd .

    OR              reduce using rule 58 (expAnd -> expresion checkAndOr AND stack_operator expAnd .)
    R_PAREN         reduce using rule 58 (expAnd -> expresion checkAndOr AND stack_operator expAnd .)
    COMMA           reduce using rule 58 (expAnd -> expresion checkAndOr AND stack_operator expAnd .)
    SEMICOLON       reduce using rule 58 (expAnd -> expresion checkAndOr AND stack_operator expAnd .)
    TO              reduce using rule 58 (expAnd -> expresion checkAndOr AND stack_operator expAnd .)
    R_BRACKET       reduce using rule 58 (expAnd -> expresion checkAndOr AND stack_operator expAnd .)
    DO              reduce using rule 58 (expAnd -> expresion checkAndOr AND stack_operator expAnd .)


state 225

    (61) relop -> GT stack_operator expresion .

    AND             reduce using rule 61 (relop -> GT stack_operator expresion .)
    OR              reduce using rule 61 (relop -> GT stack_operator expresion .)
    R_PAREN         reduce using rule 61 (relop -> GT stack_operator expresion .)
    COMMA           reduce using rule 61 (relop -> GT stack_operator expresion .)
    SEMICOLON       reduce using rule 61 (relop -> GT stack_operator expresion .)
    TO              reduce using rule 61 (relop -> GT stack_operator expresion .)
    R_BRACKET       reduce using rule 61 (relop -> GT stack_operator expresion .)
    DO              reduce using rule 61 (relop -> GT stack_operator expresion .)


state 226

    (62) relop -> LT stack_operator expresion .

    AND             reduce using rule 62 (relop -> LT stack_operator expresion .)
    OR              reduce using rule 62 (relop -> LT stack_operator expresion .)
    R_PAREN         reduce using rule 62 (relop -> LT stack_operator expresion .)
    COMMA           reduce using rule 62 (relop -> LT stack_operator expresion .)
    SEMICOLON       reduce using rule 62 (relop -> LT stack_operator expresion .)
    TO              reduce using rule 62 (relop -> LT stack_operator expresion .)
    R_BRACKET       reduce using rule 62 (relop -> LT stack_operator expresion .)
    DO              reduce using rule 62 (relop -> LT stack_operator expresion .)


state 227

    (63) relop -> EQ stack_operator expresion .

    AND             reduce using rule 63 (relop -> EQ stack_operator expresion .)
    OR              reduce using rule 63 (relop -> EQ stack_operator expresion .)
    R_PAREN         reduce using rule 63 (relop -> EQ stack_operator expresion .)
    COMMA           reduce using rule 63 (relop -> EQ stack_operator expresion .)
    SEMICOLON       reduce using rule 63 (relop -> EQ stack_operator expresion .)
    TO              reduce using rule 63 (relop -> EQ stack_operator expresion .)
    R_BRACKET       reduce using rule 63 (relop -> EQ stack_operator expresion .)
    DO              reduce using rule 63 (relop -> EQ stack_operator expresion .)


state 228

    (64) relop -> LEQ stack_operator expresion .

    AND             reduce using rule 64 (relop -> LEQ stack_operator expresion .)
    OR              reduce using rule 64 (relop -> LEQ stack_operator expresion .)
    R_PAREN         reduce using rule 64 (relop -> LEQ stack_operator expresion .)
    COMMA           reduce using rule 64 (relop -> LEQ stack_operator expresion .)
    SEMICOLON       reduce using rule 64 (relop -> LEQ stack_operator expresion .)
    TO              reduce using rule 64 (relop -> LEQ stack_operator expresion .)
    R_BRACKET       reduce using rule 64 (relop -> LEQ stack_operator expresion .)
    DO              reduce using rule 64 (relop -> LEQ stack_operator expresion .)


state 229

    (65) relop -> GEQ stack_operator expresion .

    AND             reduce using rule 65 (relop -> GEQ stack_operator expresion .)
    OR              reduce using rule 65 (relop -> GEQ stack_operator expresion .)
    R_PAREN         reduce using rule 65 (relop -> GEQ stack_operator expresion .)
    COMMA           reduce using rule 65 (relop -> GEQ stack_operator expresion .)
    SEMICOLON       reduce using rule 65 (relop -> GEQ stack_operator expresion .)
    TO              reduce using rule 65 (relop -> GEQ stack_operator expresion .)
    R_BRACKET       reduce using rule 65 (relop -> GEQ stack_operator expresion .)
    DO              reduce using rule 65 (relop -> GEQ stack_operator expresion .)


state 230

    (68) masmenos -> PLUS stack_operator exp .

    GT              reduce using rule 68 (masmenos -> PLUS stack_operator exp .)
    LT              reduce using rule 68 (masmenos -> PLUS stack_operator exp .)
    EQ              reduce using rule 68 (masmenos -> PLUS stack_operator exp .)
    LEQ             reduce using rule 68 (masmenos -> PLUS stack_operator exp .)
    GEQ             reduce using rule 68 (masmenos -> PLUS stack_operator exp .)
    AND             reduce using rule 68 (masmenos -> PLUS stack_operator exp .)
    OR              reduce using rule 68 (masmenos -> PLUS stack_operator exp .)
    R_PAREN         reduce using rule 68 (masmenos -> PLUS stack_operator exp .)
    COMMA           reduce using rule 68 (masmenos -> PLUS stack_operator exp .)
    SEMICOLON       reduce using rule 68 (masmenos -> PLUS stack_operator exp .)
    TO              reduce using rule 68 (masmenos -> PLUS stack_operator exp .)
    R_BRACKET       reduce using rule 68 (masmenos -> PLUS stack_operator exp .)
    DO              reduce using rule 68 (masmenos -> PLUS stack_operator exp .)


state 231

    (69) masmenos -> MINUS stack_operator exp .

    GT              reduce using rule 69 (masmenos -> MINUS stack_operator exp .)
    LT              reduce using rule 69 (masmenos -> MINUS stack_operator exp .)
    EQ              reduce using rule 69 (masmenos -> MINUS stack_operator exp .)
    LEQ             reduce using rule 69 (masmenos -> MINUS stack_operator exp .)
    GEQ             reduce using rule 69 (masmenos -> MINUS stack_operator exp .)
    AND             reduce using rule 69 (masmenos -> MINUS stack_operator exp .)
    OR              reduce using rule 69 (masmenos -> MINUS stack_operator exp .)
    R_PAREN         reduce using rule 69 (masmenos -> MINUS stack_operator exp .)
    COMMA           reduce using rule 69 (masmenos -> MINUS stack_operator exp .)
    SEMICOLON       reduce using rule 69 (masmenos -> MINUS stack_operator exp .)
    TO              reduce using rule 69 (masmenos -> MINUS stack_operator exp .)
    R_BRACKET       reduce using rule 69 (masmenos -> MINUS stack_operator exp .)
    DO              reduce using rule 69 (masmenos -> MINUS stack_operator exp .)


state 232

    (72) multdiv -> MULT stack_operator termino .

    PLUS            reduce using rule 72 (multdiv -> MULT stack_operator termino .)
    MINUS           reduce using rule 72 (multdiv -> MULT stack_operator termino .)
    GT              reduce using rule 72 (multdiv -> MULT stack_operator termino .)
    LT              reduce using rule 72 (multdiv -> MULT stack_operator termino .)
    EQ              reduce using rule 72 (multdiv -> MULT stack_operator termino .)
    LEQ             reduce using rule 72 (multdiv -> MULT stack_operator termino .)
    GEQ             reduce using rule 72 (multdiv -> MULT stack_operator termino .)
    AND             reduce using rule 72 (multdiv -> MULT stack_operator termino .)
    OR              reduce using rule 72 (multdiv -> MULT stack_operator termino .)
    R_PAREN         reduce using rule 72 (multdiv -> MULT stack_operator termino .)
    COMMA           reduce using rule 72 (multdiv -> MULT stack_operator termino .)
    SEMICOLON       reduce using rule 72 (multdiv -> MULT stack_operator termino .)
    TO              reduce using rule 72 (multdiv -> MULT stack_operator termino .)
    R_BRACKET       reduce using rule 72 (multdiv -> MULT stack_operator termino .)
    DO              reduce using rule 72 (multdiv -> MULT stack_operator termino .)


state 233

    (73) multdiv -> DIV stack_operator termino .

    PLUS            reduce using rule 73 (multdiv -> DIV stack_operator termino .)
    MINUS           reduce using rule 73 (multdiv -> DIV stack_operator termino .)
    GT              reduce using rule 73 (multdiv -> DIV stack_operator termino .)
    LT              reduce using rule 73 (multdiv -> DIV stack_operator termino .)
    EQ              reduce using rule 73 (multdiv -> DIV stack_operator termino .)
    LEQ             reduce using rule 73 (multdiv -> DIV stack_operator termino .)
    GEQ             reduce using rule 73 (multdiv -> DIV stack_operator termino .)
    AND             reduce using rule 73 (multdiv -> DIV stack_operator termino .)
    OR              reduce using rule 73 (multdiv -> DIV stack_operator termino .)
    R_PAREN         reduce using rule 73 (multdiv -> DIV stack_operator termino .)
    COMMA           reduce using rule 73 (multdiv -> DIV stack_operator termino .)
    SEMICOLON       reduce using rule 73 (multdiv -> DIV stack_operator termino .)
    TO              reduce using rule 73 (multdiv -> DIV stack_operator termino .)
    R_BRACKET       reduce using rule 73 (multdiv -> DIV stack_operator termino .)
    DO              reduce using rule 73 (multdiv -> DIV stack_operator termino .)


state 234

    (50) repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF DO . bloque end_while
    (26) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 61

    bloque                         shift and go to state 243

state 235

    (51) repeticion2 -> FOR ID EQUAL expOr TO expOr DO . bloque
    (26) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 61

    bloque                         shift and go to state 244

state 236

    (23) params2 -> COMMA tipo ID addvar updateParams . params2
    (23) params2 -> . COMMA tipo ID addvar updateParams params2
    (24) params2 -> . empty
    (84) empty -> .

    COMMA           shift and go to state 131
    R_PAREN         reduce using rule 84 (empty -> .)

    params2                        shift and go to state 245
    empty                          shift and go to state 132

state 237

    (83) var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET . checkparentesis verDimNum cuadVarDim
    (95) checkparentesis -> .

    EQUAL           reduce using rule 95 (checkparentesis -> .)
    MULT            reduce using rule 95 (checkparentesis -> .)
    DIV             reduce using rule 95 (checkparentesis -> .)
    PLUS            reduce using rule 95 (checkparentesis -> .)
    MINUS           reduce using rule 95 (checkparentesis -> .)
    GT              reduce using rule 95 (checkparentesis -> .)
    LT              reduce using rule 95 (checkparentesis -> .)
    EQ              reduce using rule 95 (checkparentesis -> .)
    LEQ             reduce using rule 95 (checkparentesis -> .)
    GEQ             reduce using rule 95 (checkparentesis -> .)
    AND             reduce using rule 95 (checkparentesis -> .)
    OR              reduce using rule 95 (checkparentesis -> .)
    R_PAREN         reduce using rule 95 (checkparentesis -> .)
    COMMA           reduce using rule 95 (checkparentesis -> .)
    SEMICOLON       reduce using rule 95 (checkparentesis -> .)
    TO              reduce using rule 95 (checkparentesis -> .)
    R_BRACKET       reduce using rule 95 (checkparentesis -> .)
    DO              reduce using rule 95 (checkparentesis -> .)

    checkparentesis                shift and go to state 246

state 238

    (39) llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis . Gosub
    (119) Gosub -> .

    ID              reduce using rule 119 (Gosub -> .)
    IF              reduce using rule 119 (Gosub -> .)
    WRITE           reduce using rule 119 (Gosub -> .)
    RETURN          reduce using rule 119 (Gosub -> .)
    READ            reduce using rule 119 (Gosub -> .)
    WHILE           reduce using rule 119 (Gosub -> .)
    FOR             reduce using rule 119 (Gosub -> .)
    R_BRACE         reduce using rule 119 (Gosub -> .)
    MULT            reduce using rule 119 (Gosub -> .)
    DIV             reduce using rule 119 (Gosub -> .)
    PLUS            reduce using rule 119 (Gosub -> .)
    MINUS           reduce using rule 119 (Gosub -> .)
    GT              reduce using rule 119 (Gosub -> .)
    LT              reduce using rule 119 (Gosub -> .)
    EQ              reduce using rule 119 (Gosub -> .)
    LEQ             reduce using rule 119 (Gosub -> .)
    GEQ             reduce using rule 119 (Gosub -> .)
    AND             reduce using rule 119 (Gosub -> .)
    OR              reduce using rule 119 (Gosub -> .)
    R_PAREN         reduce using rule 119 (Gosub -> .)
    COMMA           reduce using rule 119 (Gosub -> .)
    SEMICOLON       reduce using rule 119 (Gosub -> .)
    TO              reduce using rule 119 (Gosub -> .)
    R_BRACKET       reduce using rule 119 (Gosub -> .)
    DO              reduce using rule 119 (Gosub -> .)

    Gosub                          shift and go to state 247

state 239

    (54) parm2 -> COMMA expOr . checkParam parm2
    (117) checkParam -> .

    COMMA           reduce using rule 117 (checkParam -> .)
    R_PAREN         reduce using rule 117 (checkParam -> .)

    checkParam                     shift and go to state 248

state 240

    (47) condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .

    ID              reduce using rule 47 (condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .)
    IF              reduce using rule 47 (condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .)
    WRITE           reduce using rule 47 (condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .)
    RETURN          reduce using rule 47 (condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .)
    READ            reduce using rule 47 (condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .)
    WHILE           reduce using rule 47 (condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .)
    FOR             reduce using rule 47 (condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .)
    R_BRACE         reduce using rule 47 (condicion -> IF L_PAREN expOr R_PAREN GotoF THEN bloque else_aux .)


state 241

    (48) else_aux -> ELSE . Goto bloque end_if
    (104) Goto -> .

    L_BRACE         reduce using rule 104 (Goto -> .)

    Goto                           shift and go to state 249

state 242

    (49) else_aux -> end_if .

    ID              reduce using rule 49 (else_aux -> end_if .)
    IF              reduce using rule 49 (else_aux -> end_if .)
    WRITE           reduce using rule 49 (else_aux -> end_if .)
    RETURN          reduce using rule 49 (else_aux -> end_if .)
    READ            reduce using rule 49 (else_aux -> end_if .)
    WHILE           reduce using rule 49 (else_aux -> end_if .)
    FOR             reduce using rule 49 (else_aux -> end_if .)
    R_BRACE         reduce using rule 49 (else_aux -> end_if .)


state 243

    (50) repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF DO bloque . end_while
    (106) end_while -> .

    ID              reduce using rule 106 (end_while -> .)
    IF              reduce using rule 106 (end_while -> .)
    WRITE           reduce using rule 106 (end_while -> .)
    RETURN          reduce using rule 106 (end_while -> .)
    READ            reduce using rule 106 (end_while -> .)
    WHILE           reduce using rule 106 (end_while -> .)
    FOR             reduce using rule 106 (end_while -> .)
    R_BRACE         reduce using rule 106 (end_while -> .)

    end_while                      shift and go to state 250

state 244

    (51) repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .

    ID              reduce using rule 51 (repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .)
    IF              reduce using rule 51 (repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .)
    WRITE           reduce using rule 51 (repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .)
    RETURN          reduce using rule 51 (repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .)
    READ            reduce using rule 51 (repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .)
    WHILE           reduce using rule 51 (repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .)
    FOR             reduce using rule 51 (repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .)
    R_BRACE         reduce using rule 51 (repeticion2 -> FOR ID EQUAL expOr TO expOr DO bloque .)


state 245

    (23) params2 -> COMMA tipo ID addvar updateParams params2 .

    R_PAREN         reduce using rule 23 (params2 -> COMMA tipo ID addvar updateParams params2 .)


state 246

    (83) var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis . verDimNum cuadVarDim
    (123) verDimNum -> .

    EQUAL           reduce using rule 123 (verDimNum -> .)
    MULT            reduce using rule 123 (verDimNum -> .)
    DIV             reduce using rule 123 (verDimNum -> .)
    PLUS            reduce using rule 123 (verDimNum -> .)
    MINUS           reduce using rule 123 (verDimNum -> .)
    GT              reduce using rule 123 (verDimNum -> .)
    LT              reduce using rule 123 (verDimNum -> .)
    EQ              reduce using rule 123 (verDimNum -> .)
    LEQ             reduce using rule 123 (verDimNum -> .)
    GEQ             reduce using rule 123 (verDimNum -> .)
    AND             reduce using rule 123 (verDimNum -> .)
    OR              reduce using rule 123 (verDimNum -> .)
    R_PAREN         reduce using rule 123 (verDimNum -> .)
    COMMA           reduce using rule 123 (verDimNum -> .)
    SEMICOLON       reduce using rule 123 (verDimNum -> .)
    TO              reduce using rule 123 (verDimNum -> .)
    R_BRACKET       reduce using rule 123 (verDimNum -> .)
    DO              reduce using rule 123 (verDimNum -> .)

    verDimNum                      shift and go to state 251

state 247

    (39) llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .

    ID              reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    IF              reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    WRITE           reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    RETURN          reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    READ            reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    WHILE           reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    FOR             reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    R_BRACE         reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    MULT            reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    DIV             reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    PLUS            reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    MINUS           reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    GT              reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    LT              reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    EQ              reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    LEQ             reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    GEQ             reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    AND             reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    OR              reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    R_PAREN         reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    COMMA           reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    SEMICOLON       reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    TO              reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    R_BRACKET       reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)
    DO              reduce using rule 39 (llamada -> ID llamadaEra L_PAREN fakebottom parm checkParamNum R_PAREN checkparentesis Gosub .)


state 248

    (54) parm2 -> COMMA expOr checkParam . parm2
    (54) parm2 -> . COMMA expOr checkParam parm2
    (55) parm2 -> . empty
    (84) empty -> .

    COMMA           shift and go to state 219
    R_PAREN         reduce using rule 84 (empty -> .)

    parm2                          shift and go to state 252
    empty                          shift and go to state 220

state 249

    (48) else_aux -> ELSE Goto . bloque end_if
    (26) bloque -> . L_BRACE estatuto_rep R_BRACE

    L_BRACE         shift and go to state 61

    bloque                         shift and go to state 253

state 250

    (50) repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF DO bloque end_while .

    ID              reduce using rule 50 (repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF DO bloque end_while .)
    IF              reduce using rule 50 (repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF DO bloque end_while .)
    WRITE           reduce using rule 50 (repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF DO bloque end_while .)
    RETURN          reduce using rule 50 (repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF DO bloque end_while .)
    READ            reduce using rule 50 (repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF DO bloque end_while .)
    WHILE           reduce using rule 50 (repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF DO bloque end_while .)
    FOR             reduce using rule 50 (repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF DO bloque end_while .)
    R_BRACE         reduce using rule 50 (repeticion -> WHILE addJump L_PAREN expOr R_PAREN GotoF DO bloque end_while .)


state 251

    (83) var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum . cuadVarDim
    (125) cuadVarDim -> .

    EQUAL           reduce using rule 125 (cuadVarDim -> .)
    MULT            reduce using rule 125 (cuadVarDim -> .)
    DIV             reduce using rule 125 (cuadVarDim -> .)
    PLUS            reduce using rule 125 (cuadVarDim -> .)
    MINUS           reduce using rule 125 (cuadVarDim -> .)
    GT              reduce using rule 125 (cuadVarDim -> .)
    LT              reduce using rule 125 (cuadVarDim -> .)
    EQ              reduce using rule 125 (cuadVarDim -> .)
    LEQ             reduce using rule 125 (cuadVarDim -> .)
    GEQ             reduce using rule 125 (cuadVarDim -> .)
    AND             reduce using rule 125 (cuadVarDim -> .)
    OR              reduce using rule 125 (cuadVarDim -> .)
    R_PAREN         reduce using rule 125 (cuadVarDim -> .)
    COMMA           reduce using rule 125 (cuadVarDim -> .)
    SEMICOLON       reduce using rule 125 (cuadVarDim -> .)
    TO              reduce using rule 125 (cuadVarDim -> .)
    R_BRACKET       reduce using rule 125 (cuadVarDim -> .)
    DO              reduce using rule 125 (cuadVarDim -> .)

    cuadVarDim                     shift and go to state 254

state 252

    (54) parm2 -> COMMA expOr checkParam parm2 .

    R_PAREN         reduce using rule 54 (parm2 -> COMMA expOr checkParam parm2 .)


state 253

    (48) else_aux -> ELSE Goto bloque . end_if
    (105) end_if -> .

    ID              reduce using rule 105 (end_if -> .)
    IF              reduce using rule 105 (end_if -> .)
    WRITE           reduce using rule 105 (end_if -> .)
    RETURN          reduce using rule 105 (end_if -> .)
    READ            reduce using rule 105 (end_if -> .)
    WHILE           reduce using rule 105 (end_if -> .)
    FOR             reduce using rule 105 (end_if -> .)
    R_BRACE         reduce using rule 105 (end_if -> .)

    end_if                         shift and go to state 255

state 254

    (83) var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .

    EQUAL           reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    MULT            reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    DIV             reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    PLUS            reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    MINUS           reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    GT              reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    LT              reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    EQ              reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    LEQ             reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    GEQ             reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    AND             reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    OR              reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    R_PAREN         reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    COMMA           reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    SEMICOLON       reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    TO              reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    R_BRACKET       reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)
    DO              reduce using rule 83 (var_dim -> ID stack_operand_id L_BRACKET verDim fakebottom expOr cuadVer R_BRACKET checkparentesis verDimNum cuadVarDim .)


state 255

    (48) else_aux -> ELSE Goto bloque end_if .

    ID              reduce using rule 48 (else_aux -> ELSE Goto bloque end_if .)
    IF              reduce using rule 48 (else_aux -> ELSE Goto bloque end_if .)
    WRITE           reduce using rule 48 (else_aux -> ELSE Goto bloque end_if .)
    RETURN          reduce using rule 48 (else_aux -> ELSE Goto bloque end_if .)
    READ            reduce using rule 48 (else_aux -> ELSE Goto bloque end_if .)
    WHILE           reduce using rule 48 (else_aux -> ELSE Goto bloque end_if .)
    FOR             reduce using rule 48 (else_aux -> ELSE Goto bloque end_if .)
    R_BRACE         reduce using rule 48 (else_aux -> ELSE Goto bloque end_if .)

